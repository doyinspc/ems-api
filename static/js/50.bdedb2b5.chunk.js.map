{"version":3,"sources":["views/staff/AttendanceBox.js","views/staff/Attendance.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","actions/staff/staffattendance.js"],"names":["AttendanceBox","props","useState","color","setcolor","useEffect","Date","mydate","getDay","candidates","split","includes","client","parseInt","issue","d","leaves","filter","rw","id","setData","className","style","backgroundColor","width","connect","state","staffs","staffReducer","staffattendance","staffattendanceReducer","user","userReducer","getStaffattendances","getStaffattendancedailys","getStaffattendance","registerStaffattendance","registerStaffattendancedaily","updateStaffattendance","updateStaffattendancedaily","deleteStaffattendance","deleteStaffattendancedaily","getFullYear","getMonth","firstday","setfirstday","lastday","setlastday","datax","setdatax","params","data","JSON","stringify","activeschool","moment","format","cat","table","narration","params1","registered_attendance_date","Array","isArray","staffattendancedailys","undefined","arr_days","forEach","dates","reason","registered_attendance_issue","staffattendances","arr_persons","clients","leaveid","listDate","startDate","endDate","dateMove","strDate","toISOString","slice","push","setDate","getDate","alldays","map","prop","ind","key","alldates","allpara","r","i","rowSpan","textOrientation","name","students","dt","surname","firstname","middlename","pro","date_marked","date_issue","gs","myd","cand","cli","getStaged","a","b","ids","datas","hasOwnProperty","changeData","cnt","length","prp","type","value","onChange","e","target","fluid","scrolling","border","marginTop","_slicedToArray","arr","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","err","unsupportedIterableToArray","TypeError","path","API_PATH_STAFF","dispatch","getState","token","MAIN_TOKEN","STAFFATTENDANCE_LOADING","axios","get","axiosConfig","then","res","STAFFATTENDANCE_GET_MULTIPLE","payload","catch","STAFFATTENDANCE_LOADING_ERROR","STAFFATTENDANCE_GET_DAILY","STAFFATTENDANCE_GET_ONE","POST","STAFFATTENDANCE_DELETE_SUCCESS","STAFFATTENDANCE_DELETE_FAIL","STAFFATTENDANCE_DELETE_DAILY","post","axiosConfig1","STAFFATTENDANCE_REGISTER_SUCCESS","STAFFATTENDANCE_REGISTER_FAIL","STAFFATTENDANCE_REGISTER_DAILY","STAFFATTENDANCE_UPDATE_SUCCESS","STAFFATTENDANCE_UPDATE_FAIL","STAFFATTENDANCE_UPDATE_DAILY"],"mappings":"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","file":"static/js/50.bdedb2b5.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react'\r\nimport { leaves } from '../../actions/common';\r\n\r\nconst AttendanceBox = (props) => {\r\n    const [color, setcolor] = useState('#ccc');\r\n    //console.log(props.client, props.issue)\r\n    //if pass current date\r\n    useEffect(() => {\r\n        //confirm if its date yet else return grey\r\n        if(new Date(props.mydate) <= new Date() && new Date(props.mydate).getDay() !== 6 && new Date(props.mydate).getDay() !== 0)\r\n        {\r\n            //date has passed\r\n            //confirm if in list\r\n            let list = props.candidates.split(',');\r\n            if(list.includes(props.client))\r\n            {\r\n                //client present that day\r\n                //was it recorded\r\n                if(parseInt(props.issue) > 0)\r\n                {\r\n                    let d = leaves.filter(rw=>parseInt(rw.id) === parseInt(props.issue))\r\n                    setcolor(d[0].color)    \r\n                    props.setData(props.client, parseInt(props.issue))\r\n                }else{\r\n                    setcolor('#cfc') \r\n                    props.setData(props.client, 1)\r\n                }\r\n                \r\n\r\n            }else\r\n            {\r\n                //client not present that day\r\n                setcolor('#ccc');\r\n                props.setData(props.client, 0)\r\n            }\r\n            \r\n        }\r\n        return () => {\r\n            setcolor('#ccc')\r\n        }\r\n    }, [props.mydate])\r\n    \r\n    return(\r\n        <>\r\n        <td className='text-center'  style={{backgroundColor:color, width:'25px'}} >\r\n\r\n        </td>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AttendanceBox","import { CRow, CCol, CButton, CContainer, CInput, CLabel } from '@coreui/react';\r\nimport React, { useEffect, useState, useMemo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { \r\n    getStaffattendances, \r\n    getStaffattendancedailys,\r\n    getStaffattendance, \r\n    registerStaffattendance, \r\n    registerStaffattendancedaily,\r\n    updateStaffattendance, \r\n    updateStaffattendancedaily, \r\n    deleteStaffattendance,\r\n    deleteStaffattendancedaily\r\n  } from './../../actions/staff/staffattendance';\r\n  import moment from 'moment'\r\nimport AttendanceBox from './AttendanceBox';\r\nimport { leaves } from '../../actions/common';\r\n\r\n\r\nconst Staffattendance = (props) => {\r\n     let dt = new Date();\r\n     \r\n     //let firstday = new Date(dt.getFullYear(), dt.getMonth(), -1);\r\n     //let lastday = new Date(dt.getFullYear(), dt.getMonth() + 1, 0);\r\n     const [firstday, setfirstday] = useState(new Date(new Date().getFullYear(), new Date().getMonth(), -1))\r\n     const [lastday, setlastday] = useState(new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0))\r\n     const [datax, setdatax] = useState({})\r\n\r\n    useEffect(() => {\r\n        //date changes get\r\n        let params = {\r\n          data:JSON.stringify(\r\n          {\r\n              'schoolid':props.user.activeschool.id,\r\n              'grp':1,\r\n              'starts':moment(firstday).format('YYYY-MM-DD'),\r\n              'ends':moment(lastday).format('YYYY-MM-DD')\r\n    \r\n          }),\r\n          cat:'selectedattendance',\r\n          table:'attendances',\r\n          narration:'get all staffs'\r\n      }\r\n        props.getStaffattendances(params)\r\n    \r\n        let params1 = {\r\n          data:JSON.stringify(\r\n          {\r\n              'clients':props.user.activeschool.id,\r\n              'schoolid':props.user.activeschool.id,\r\n              'grp':5,\r\n              'starts':moment(firstday).format('YYYY-MM-DD'),\r\n              'ends':moment(lastday).format('YYYY-MM-DD')\r\n          }),\r\n          cat:'selectedattendance',\r\n          table:'attendances',\r\n          narration:'get all attendance'\r\n      }\r\n        props.getStaffattendancedailys(params1)\r\n      }, [firstday, lastday])\r\n     \r\n     const changeData = (client, ids) =>{\r\n         let datas = {...datax}\r\n         if(datas.hasOwnProperty(client))\r\n         {\r\n             datas[client].push(ids)\r\n             setdatax(datas)\r\n         }else{\r\n             datas[client] =[];\r\n             datas[client].push(ids)\r\n             setdatax(datas)\r\n         }\r\n         \r\n     }\r\n\r\n     const getStaged = (myd, cand, cli, issue) =>{\r\n        if(new Date(myd) <= new Date() && new Date(myd).getDay() !== 6 && new Date(myd).getDay() !== 0)\r\n        {\r\n            let list = cand.split(',');\r\n            if(list.includes(cli))\r\n            {\r\n                if(parseInt(issue) > 0)\r\n                {\r\n                    return parseInt(issue);\r\n                }else{\r\n                    return 1;\r\n                }\r\n            }else\r\n            {\r\n                return 0;\r\n            }\r\n        }\r\n     }\r\n     let registered_attendance_date = Array.isArray(props.staffattendance.staffattendancedailys)  && props.staffattendance.staffattendancedailys !== undefined? props.staffattendance.staffattendancedailys : [];\r\n     let arr_days = {}\r\n     registered_attendance_date.forEach(rw =>{\r\n         return arr_days[rw.dates] = rw.reason\r\n     });\r\n      \r\n      let registered_attendance_issue = Array.isArray(props.staffattendance.staffattendances)  && props.staffattendance.staffattendances !== undefined? props.staffattendance.staffattendances : [];\r\n      let arr_persons = {}\r\n      registered_attendance_issue.forEach(rw =>{\r\n            return arr_persons[rw.dates+\"_\"+rw.clients] = rw.leaveid\r\n      });\r\n\r\n     var listDate = [];\r\n     var startDate = firstday ;\r\n     var endDate = lastday;\r\n     var dateMove = new Date(startDate);\r\n     var strDate = startDate;\r\n\r\n        while (new Date(strDate) < new Date(endDate)){\r\n                var strDate = dateMove.toISOString().slice(0,10);\r\n                listDate.push(strDate);\r\n                dateMove.setDate(dateMove.getDate()+1);\r\n        };\r\n\r\n    \r\n     \r\n    let alldays =  listDate.map((prop, ind)=>{\r\n        return <td key={ind} className=\"text-center\" style={{width:'25px'}}><strong>{moment(new Date(prop)).format('dd')}</strong></td>\r\n    })\r\n     let alldates =  listDate.map((prop, ind)=>{\r\n            return <><td key={ind} className=\"text-center\"><strong>{new Date(prop).getDate()}</strong></td>\r\n                </>\r\n     })\r\n     let allpara = leaves.map((r, i)=>{\r\n        return <td key={i} rowSpan={2}>\r\n                <small style={{textOrientation:'upright'}}>{r.name}</small>\r\n                </td>\r\n\r\n            })\r\n\r\n     let allstaffs =  props.staffs;\r\n     let students =  allstaffs.map((prop, ind)=>{\r\n         let dt = []\r\n         return <tr key={ind +\"_\"+ prop.id}>\r\n             <td className=\"text-right\"><strong className='text-nowrap'>{`${prop.surname} ${prop.firstname} ${prop.middlename}`}</strong></td>\r\n             {listDate.map((pro, ind)=>{\r\n                let date_marked = arr_days[moment(pro).format('YYYY-MM-DD')] ? arr_days[moment(pro).format('YYYY-MM-DD')]: ''\r\n                let date_issue = arr_persons[moment(pro).format('YYYY-MM-DD')+\"_\"+prop.id] ? arr_persons[moment(pro).format('YYYY-MM-DD')+\"_\"+prop.id] : 0;\r\n                let gs = getStaged(pro, date_marked, prop.id, date_issue);\r\n                dt.push(gs);\r\n                return <><AttendanceBox \r\n                            candidates={date_marked}\r\n                            client={prop.id}\r\n                            issue={date_issue}\r\n                            mydate={pro} \r\n                            key={ind} \r\n                            setData={(a, b)=>changeData(a, b)}\r\n                            />\r\n                        </>\r\n\r\n\r\n             })}\r\n\r\n                  {leaves.map((r, i)=>{\r\n                    let cnt = Array.isArray(dt) ? dt.filter(rw=>parseInt(rw) === parseInt(r.id)).length : 0;\r\n                    return <td key={i} className='text-center'>\r\n                            {cnt}\r\n                            </td>\r\n\r\n                        })}\r\n         </tr>\r\n     })\r\n    \r\n    return(\r\n        <>\r\n        <CRow className=\" d-flex row mb-20\">\r\n            {\r\n                leaves.map((prp, ind)=>{\r\n                    return  <CButton key={ind} className=\"text-center\" style={{backgroundColor: prp.color}}><strong>{prp.name}</strong></CButton>\r\n                })\r\n            }\r\n        </CRow>\r\n        <CRow className='m-10'>\r\n            <CCol>\r\n                <CLabel><strong>Start Date</strong></CLabel>\r\n                <CInput\r\n                    name=\"starts\"\r\n                    type='date'\r\n                    value={firstday}\r\n                    onChange={(e)=>setfirstday(e.target.value)}\r\n                />\r\n            </CCol>\r\n            <CCol>\r\n            <CLabel><strong>End Date</strong></CLabel>\r\n                <CInput\r\n                    name=\"ends\"\r\n                    type='date'\r\n                    value={lastday}\r\n                    onChange={(e)=>setlastday(e.target.value)}\r\n                />\r\n            </CCol>\r\n        </CRow>\r\n        <CContainer fluid>\r\n            <CRow scrolling>\r\n        <table border='ipx solid' style={{backgroundColor:'white', marginTop:'50px'}}>\r\n            <thead>\r\n                <tr>\r\n                    <th className='text-center'><strong>DAYS</strong></th>\r\n                    {alldays}{allpara}\r\n                </tr>\r\n                <tr>\r\n                    <th className='text-center'><strong>STAFF NAMES</strong></th>\r\n                    {alldates}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {students}\r\n            </tbody>\r\n        </table>\r\n        </CRow>\r\n        </CContainer>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    \r\n    staffs:state.staffReducer.staffs,\r\n    staffattendance : state.staffattendanceReducer,\r\n    user:state.userReducer\r\n\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    getStaffattendances,\r\n    getStaffattendancedailys,\r\n    getStaffattendance,\r\n    registerStaffattendance,\r\n    registerStaffattendancedaily,\r\n    updateStaffattendance,\r\n    updateStaffattendancedaily,\r\n    deleteStaffattendance,\r\n    deleteStaffattendancedaily\r\n  })(Staffattendance)\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios';\r\nimport {\r\n    STAFFATTENDANCE_GET_ONE,\r\n    STAFFATTENDANCE_GET_MULTIPLE,\r\n    STAFFATTENDANCE_GET_DAILY,\r\n    STAFFATTENDANCE_REGISTER_SUCCESS,\r\n    STAFFATTENDANCE_REGISTER_DAILY,\r\n    STAFFATTENDANCE_REGISTER_FAIL,\r\n    STAFFATTENDANCE_LOADING,\r\n    STAFFATTENDANCE_LOADING_ERROR,\r\n    STAFFATTENDANCE_UPDATE_SUCCESS,\r\n    STAFFATTENDANCE_UPDATE_DAILY,\r\n    STAFFATTENDANCE_UPDATE_FAIL,\r\n    STAFFATTENDANCE_DELETE_SUCCESS,\r\n    STAFFATTENDANCE_DELETE_DAILY,\r\n    STAFFATTENDANCE_DELETE_FAIL\r\n} from \"./../../types/staff/staffattendance\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFATTENDANCE \r\nexport const getStaffattendances = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFATTENDANCE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STAFFATTENDANCE \r\nexport const getStaffattendancedailys = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFATTENDANCE_GET_DAILY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFATTENDANCE \r\nexport const getStaffattendance = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFATTENDANCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//GET SINGLE STAFFATTENDANCE \r\nexport const getStaffattendancedaily = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFATTENDANCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFATTENDANCE DELETE\r\nexport const deleteStaffattendance = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFATTENDANCE_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFATTENDANCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFATTENDANCE DELETE\r\nexport const deleteStaffattendancedaily = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFATTENDANCE_DELETE_DAILY,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFATTENDANCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFATTENDANCE REGISTER\r\nexport const registerStaffattendance = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFATTENDANCE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFATTENDANCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STAFFATTENDANCE REGISTER\r\nexport const registerStaffattendancedaily = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFATTENDANCE_REGISTER_DAILY,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFATTENDANCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFATTENDANCE UPDATE\r\nexport const updateStaffattendance = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFATTENDANCE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFATTENDANCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\nexport const updateStaffattendancedaily = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFATTENDANCE_UPDATE_DAILY,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFATTENDANCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n"],"sourceRoot":""}