{"version":3,"sources":["views/staff/StaffDashboardSchool.js","views/staff/StaffDashboardSession.js","views/staff/Birthdays.js","views/staff/Notice.js","views/setting/SchoolData.js","views/staff/Search.js","views/staff/Dasboard/ClassPopulation.js","views/setting/Stage/Staffsubject1.js","views/staff/Subjects/Theme.js","views/staff/Dasboard/ClassFee.js","views/staff/Dasboard/ClassAttendance.js","views/staff/Dasboard/ClassAcademics.js","views/staff/StaffDashboard.js","actions/student/studentscore.js","actions/student/studentclass.js","actions/student/studentfee.js","actions/student/studentattendance.js"],"names":["Dashboard","props","colors","1","2","3","4","5","6","7","8","9","undefined","schools","Array","isArray","length","map","prop","index","fade","key","xs","sm","lg","onClick","changeSchool","style","cursor","text","abbrv","header","name","color","iconPadding","className","id","activeterm","hasOwnProperty","activeschool","content","toggleMenu","Birthday","this","user","parseInt","params","data","JSON","stringify","cat","table","narration","birthday","prevProps","prevState","settings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","useTransform","textArray","process","randomNumber","Math","floor","random","birthdayz","prp","ing","class","src","alt","photo","onError","e","target","onerror","textShadow","letterSpacing","fontFamily","numb","href","Component","connect","state","staffReducer","userReducer","Notice","getNotices","vertical","notices","filter","rw","height","backgroundColor","ini","width","title","moment","date_created","format","source","message","staffname","noticeReducer","WidgetsDropdown","school","address","country","links","email","phone1","phone2","signatoryname","marginBlock","Search","SearchDashboard","SearchDashboard1","summary","studentclassReducer","studentclasssummary","getStudentclassSummary","termid","sessionid","useEffect","genderarray","sooTable","dobTable","houseTable","placeTable","summale","sumfemale","sumpop","forEach","element","nm","pop","nums","gens","gender","split","mg","i","toLowerCase","fg","mg0","fg0","arr","push","dobs","dob","yrs","Date","getFullYear","yr","round","soos","soo","houses","house","places","place","smale","reduce","a","b","sfemale","spop","bgcol","Object","keys","console","log","value","active","md","xl","male","female","shape","type","datasets","values","label","labels","options","tooltips","enabled","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","staffsubjects","staffsubjectReducer","terms","termReducer","sessions","sessionReducer","getStaffsubjects","getStaffsubjectsummary","deleteStaffsubject","updateStaffsubject","useState","collapse","setCollapse","setId","dts","setDts","pid","ses","tem","qid","staffsubjectsummary","Header","did","icon","para","editer","toggle","submenu","onActivate","num","nu","fd","FormData","append","onEdit","dt","onDelete","show","onReset","onClose","themes","themeReducer","themesummary","getThemesummary","subject","typeid","subjectid","claszid","subjectz","claszs","ele","subjectname","claszabbrv","subjects","entries","sort","r","k","v","th1","p","colSpan","padding","th2","p1","i1","tbs","toUpperCase","p2","i2","sub","term","clasz","window","open","moveDir","studentfeeReducer","studentfeesummary","getStudentfeeSummary","feearray","feesarray","payarray","balarray","balsarray","namearray","sumfee","sumpay","sumbal","sumbals","pay","parseFloat","fee","bal","bals","includes","payz","money","sfee","spay","nairaformat","studentattendanceReducer","studentattendancesummary","getStudentattendanceSummary","getMonth","firstday","lastday","data1","listDate","startDate","endDate","dateMove","strDate","toISOString","slice","setDate","getDate","getdates","dates","res","reason","getdatex","clientid","getabsents","getabsentsname","getabsentsdata","clients","clientname","clientdata","popu","diff","attendancearray","attendancesarray","sumattendance","grp","attendance","ind","reports","reportReducer","studentscore","studentscoreReducer","studentscoresummary","gradeunits","gradeunitReducer","subjectReducer","claszReducer","claszunits","claszunitReducer","getReports","getStudentscoreSummary","getGradeunits","getClaszunits","getClaszs","getSubjects","all_clasz","all_claszunit","all_subject","reportid","setreportid","rep","setrep","class_toggle","setclass_toggle","sub_toggle","setsub_toggle","grd","gradeid","params2","params3","params4","params5","avg","sumz","sums","tots","Number","toFixed","compute","sum_all","obj","al","el","avg_all","pers","perss","lister","list_holder","all_claszs","all_claszunits","all_subjects","studentscore0","studentscore1","studentscore2","studentscore3","studentscore4","total_score0","tabl0","score","studentid","studentname","classname","total_score00","group","minscore","maxscore","total_score000","classid","total_score0000","total_score1","tabl1","pr","total_score10","total_score2","tabl2","total_score20","cla_sub1","tbl1","ig","border","pp","ir","textTransform","pr1","cla_sub","tbl","dt1","parse","loadreport","variant","cnt","prev","activeTerm","getUserDatas","getUserSchools","getUserTerms","getUserdropdowns","settSchool","settTerm","showmenu","setShowmenu","tid","params1","mid","myschools","join","dropdowns","myCurrentSchool","schoolid","sd","mySchoolData","schdata","StaffDashboardSession","StaffDashboardSchool","StaffDashboardMenu","changeTerm","SchoolData","ClassPopulation","ClassFee","ClassAttendance","ClassAcademics","Theme","Birthdays","path","API_PATH_SETTING","getStudentscores","dispatch","getState","token","MAIN_TOKEN","STUDENTSCORE_LOADING","axios","get","axiosConfig","then","STUDENTSCORE_GET_MULTIPLE","payload","catch","err","STUDENTSCORE_LOADING_ERROR","getStudentscorecas","STUDENTSCORE_GET_MULTIPLE_CA","STUDENTSCORE_GET_SUMMARY","deleteStudentscore","post","axiosConfig1","STUDENTSCORE_DELETE_SUCCESS","STUDENTSCORE_DELETE_FAIL","registerStudentscore","STUDENTSCORE_REGISTER_SUCCESS","STUDENTSCORE_REGISTER_FAIL","insertStudentca","STUDENTSCORE_REGISTER_CA","STUDENTSCORE_REGISTER_CA_FAIL","deleteStudentca","STUDENTSCORE_DELETE_CA","updateStudentscore","STUDENTSCORE_UPDATE_SUCCESS","STUDENTSCORE_UPDATE_FAIL","getStudentclasss","STUDENTCLASS_LOADING","STUDENTCLASS_GET_MULTIPLE","STUDENTCLASS_LOADING_ERROR","STUDENTCLASS_GET_SUMMARY","getStudentclass","STUDENTCLASS_GET_ONE","deleteStudentclass","STUDENTCLASS_DELETE_SUCCESS","STUDENTCLASS_DELETE_FAIL","registerStudentclass","STUDENTCLASS_REGISTER_SUCCESS","STUDENTCLASS_REGISTER_FAIL","updateStudentclass","STUDENTCLASS_UPDATE_SUCCESS","STUDENTCLASS_UPDATE_FAIL","getStudentfees","STUDENTFEE_LOADING","STUDENTFEE_GET_MULTIPLE","STUDENTFEE_LOADING_ERROR","STUDENTFEE_GET_SUMMARY","getStudentfeesSingle","STUDENTFEE_GET_SINGLE","getStudentfee","STUDENTFEE_GET_ONE","deleteStudentfee","STUDENTFEE_DELETE_SUCCESS","STUDENTFEE_DELETE_FAIL","registerStudentfee","STUDENTFEE_REGISTER_SUCCESS","STUDENTFEE_REGISTER_FAIL","updateStudentfee","STUDENTFEE_UPDATE_SUCCESS","STUDENTFEE_UPDATE_FAIL","setStudentfee","STUDENTFEE_SET_LOAD","STUDENTFEE_SET_SUCCESS","STUDENTFEE_SET_FAIL","API_PATH_STUDENT","getStudentattendances","STUDENTATTENDANCE_LOADING","STUDENTATTENDANCE_GET_MULTIPLE","STUDENTATTENDANCE_LOADING_ERROR","STUDENTATTENDANCE_GET_SUMMARY","getStudentattendancedailys","STUDENTATTENDANCE_GET_DAILY","getStudentattendance","STUDENTATTENDANCE_GET_ONE","deleteStudentattendance","POST","STUDENTATTENDANCE_DELETE_SUCCESS","STUDENTATTENDANCE_DELETE_FAIL","deleteStudentattendancedaily","STUDENTATTENDANCE_DELETE_DAILY","registerStudentattendance","STUDENTATTENDANCE_REGISTER_SUCCESS","STUDENTATTENDANCE_REGISTER_FAIL","registerStudentattendancedaily","STUDENTATTENDANCE_REGISTER_DAILY","updateStudentattendance","STUDENTATTENDANCE_UPDATE_SUCCESS","STUDENTATTENDANCE_UPDATE_FAIL","updateStudentattendancedaily","STUDENTATTENDANCE_UPDATE_DAILY"],"mappings":"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","file":"static/js/37.daa5b349.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { \r\n    CCard, \r\n    CCardBody, \r\n    CButton, \r\n    CButtonGroup, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow, \r\n    CWidgetBrand,\r\n    CWidgetIcon,\r\n     \r\n} from '@coreui/react';\r\n\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  const colors={\r\n    1:'primary',\r\n    2:'info',\r\n    3:'warning',\r\n    4:'danger',\r\n    5:'secondary',\r\n    6:'primary',\r\n    7:'info',\r\n    8:'warning',\r\n    9:'danger',\r\n  }\r\n\r\nreturn (\r\n    <>\r\n    <CRow>\r\n      { props.schools !== undefined && Array.isArray(props.schools) && props.schools.length > 1 ? props.schools.map((prop, index)=>{\r\n         return  <CCol \r\n         fade\r\n            key={index} \r\n            xs=\"12\" \r\n            sm=\"6\" \r\n            lg=\"6\"\r\n            onClick={()=>props.changeSchool(prop)}\r\n            style={{cursor:'pointer'}}\r\n            >\r\n          <CWidgetIcon text={prop.abbrv} header={prop.name} color={colors[index + 1]} iconPadding={false}>\r\n            <i className='fa fa-university fa-2x'></i>\r\n          </CWidgetIcon>\r\n        </CCol>\r\n      }):''}\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n\r\n})\r\nexport default Dashboard","import React from 'react'\r\nimport { \r\n    CCard,  \r\n    CButton, \r\n    CButtonGroup, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow,\r\n    CTooltip, \r\n   \r\n} from '@coreui/react';\r\n\r\n\r\n\r\nconst Dashboard = (props) => {\r\n \r\nreturn (\r\n    <>\r\n    <CRow>\r\n      <CCol lg={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            <CRow>\r\n              <CCol xs={10}>\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">{props.activeterm != undefined &&  props.activeterm.hasOwnProperty('name') && props.activeterm.name ? props.activeterm.name : <span> Welcome<small><i> (No active term)</i></small></span> }</h4>\r\n              <div className=\"small text-muted\"><strong>{props.activeschool != undefined && props.activeschool.hasOwnProperty('name') && props.activeschool.name ? props.activeschool.name: <i>Please select a school or consult the admin</i>}</strong></div>\r\n              \r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group\">\r\n              <CButtonGroup className='pull-right d-print-none'>\r\n                <CTooltip content='Click here to switch between schools'>\r\n              <CButton  \r\n                  color=\"primary\" \r\n                  className=\"\"\r\n                  onClick={()=>props.toggleMenu()}\r\n                  >\r\n                <i className='fa fa-university'></i>\r\n              </CButton>\r\n              </CTooltip>\r\n              </CButtonGroup>  \r\n            </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n         </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { \r\n    CCard, \r\n    CCardBody, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow\r\n} from '@coreui/react';\r\nimport { birthday } from './../../actions/staff/staff'\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\n\r\n class Birthday extends Component {\r\n\r\n\r\n  componentDidMount(){\r\n    if(this.props.user.activeschool !== undefined && parseInt(this.props.user.activeschool.id) > 0){\r\n    let params = {\r\n      data:JSON.stringify(\r\n      {\r\n          'schoolid': this.props.user.activeschool.id\r\n      }),\r\n      cat:'selected',\r\n      table:'birthday',\r\n      narration:'get birthdays'\r\n    }\r\n    this.props.birthday(params)\r\n   }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(this.props.user.activeschool !== prevProps.user.activeschool)\r\n    {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'schoolid': this.props.user.activeschool.id\r\n        }),\r\n        cat:'selected',\r\n        table:'birthday',\r\n        narration:'get birthdays'\r\n      }\r\n      this.props.birthday(params)\r\n     }\r\n  }\r\nrender() {\r\n      const settings = {\r\n        dots: false,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        autoplay:true,\r\n        autoplaySpeed: 6000,\r\n        useTransform:true\r\n      };\r\n      var textArray = [\r\n        process.env.PUBLIC_URL +'/icons/profile_1.png',\r\n        process.env.PUBLIC_URL +'/icons/profile_2.png',\r\n        process.env.PUBLIC_URL +'/icons/profile_3.png',\r\n        process.env.PUBLIC_URL +'/icons/profile_4.png',\r\n        process.env.PUBLIC_URL +'/icons/profile_5.png'\r\n    ];\r\n      var randomNumber = Math.floor(Math.random()*textArray.length)\r\n      let data = this.props.birthdayz;\r\nreturn (\r\n    <>\r\n    \r\n          <Slider {...settings}>\r\n        {\r\n            data !== undefined && Array.isArray(data) ? data.map((prp, ing)=>{\r\n            return <div key={ing} class=\"col-md-12\">\r\n                    <div class=\"card profile-card-1\">\r\n                        <img src={process.env.PUBLIC_URL + \"/bg.jpeg\"} alt=\"profile-sample1\" class=\"background\"/>\r\n                        <img \r\n                        src={process.env.REACT_APP_SERVER_URL + prp.photo} \r\n                        alt=\"profile-image\" \r\n                        class=\"profile\"\r\n                        onError={(e)=>{e.target.onerror=null; e.target.src=textArray[randomNumber]} }\r\n                        />\r\n                        <div class=\"card-content\">\r\n                        <h6 style={{color: '#fff', textShadow: '0 0 5px #fff, 0 0 10px #fff, 0 0 15px #fff, 0 0 20px #ff2d95, 0 0 30px #ff2d95, 0 0 40px #ff2d95, 0 0 50px #ff2d95, 0 0 75px #ff2d95', letterSpacing:\"5px\", fontFamily:'Boogaloo'}}>Happy Birthday</h6>\r\n                        <h4>{prp.name}</h4>\r\n                        <small>{prp.numb}</small>\r\n                        <div class=\"icon-block\">\r\n                            <a href=\"#\"><i class=\"fa fa-facebook\"></i></a>\r\n                            <a href=\"#\"> <i class=\"fa fa-twitter\"></i></a>\r\n                            <a href=\"#\"> <i class=\"fa fa-google-plus\"></i></a>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            }):''\r\n        }\r\n        </Slider>   \r\n    </>\r\n  )\r\n}\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  birthdayz:state.staffReducer.birthday,\r\n  user:state.userReducer\r\n})\r\nexport default connect(mapStateToProps, {birthday}) (Birthday)\r\n","import React, {Component} from 'react'\r\nimport moment from 'moment'\r\nimport { \r\n    CCard, \r\n    CCardBody, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow\r\n} from '@coreui/react';\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { getNotices } from './../../actions/setting/notice'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Notice extends Component {\r\n\r\n  componentDidMount(){\r\n    if(this.props.user.activeschool !== undefined && parseInt(this.props.user.activeschool.id) > 0){\r\n    let params = {\r\n      data:JSON.stringify(\r\n      {\r\n          'schoolid': this.props.user.activeschool.id\r\n      }),\r\n      cat:'selected',\r\n      table:'notices',\r\n      narration:'get notices'\r\n    }\r\n    this.props.getNotices(params)\r\n   }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(this.props.user.activeschool !== prevProps.user.activeschool)\r\n    {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'schoolid': this.props.user.activeschool.id\r\n        }),\r\n        cat:'selected',\r\n        table:'notices',\r\n        narration:'get notices'\r\n      }\r\n      this.props.getNotices(params)\r\n     }\r\n  }\r\nrender() {\r\n      const settings = {\r\n        dots: false,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        autoplay:true,\r\n        autoplaySpeed: 6000,\r\n        useTransform:true,\r\n        vertical:true,\r\n\r\n      };\r\n  let data = this.props.notices.notices && Array.isArray(this.props.notices.notices) ? this.props.notices.notices.filter(rw =>rw !== null || rw !== undefined) : []\r\n  \r\nreturn (\r\n    <>\r\n    <CRow>\r\n      <CCol lg={12} className='m-0 p-0'>\r\n        <CCard style={{ height:'550px', backgroundColor:'teal', color:'white'}}>\r\n          <CCardBody>\r\n          <Slider {...settings}>\r\n            { \r\n                data.map((prp, ini)=>{\r\n                return <div className=\"media border p-3\">\r\n                <img \r\n                src={process.env.REACT_APP_SERVER_URL + prp.photo} \r\n                alt=\"John Doe\" \r\n                className=\"mr-3 mt-3 rounded-circle\" \r\n                onError={(e)=>{e.target.onerror=null; e.target.src=process.env.PUBLIC_URL + '/icons/profile_3.png'} }\r\n                style={{width:'60px'}}\r\n            />\r\n            <div className=\"media-body\">\r\n                <h4 style={{fontFamily:'Quicksand'}}>{prp.title}</h4> \r\n                <small><i>Posted on { moment(prp.date_created).format('m DD, YYYY')}February 19, 2016</i></small>\r\n                <strong>{prp.source}</strong>\r\n              <p>{prp.message}</p>\r\n                <small>{prp.staffname}</small>  \r\n            </div>\r\n          </div>\r\n            })\r\n            }\r\n          \r\n        </Slider>\r\n\r\n          </CCardBody>\r\n         </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n}\r\n\r\nconst mapStatetoProps = (state) =>({\r\n  notices:state.noticeReducer,\r\n  user:state.userReducer\r\n})\r\n\r\nexport default connect(mapStatetoProps, {getNotices})(Notice)","import React from 'react'\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CCardBody,\r\n  CContainer,\r\n} from '@coreui/react'\r\nimport { Link } from 'react-router-dom'\r\nimport { controls } from '../../actions/common'\r\n\r\nconst WidgetsDropdown = (props) => {\r\n  // render\r\n  let {\r\n    name,\r\n    abbrv,\r\n    id,\r\n    address,\r\n    state,\r\n    country,\r\n    color,\r\n    links,\r\n    email,\r\n    phone1,\r\n    phone2,\r\n    signatoryname\r\n\r\n  } = props.school || \"\";\r\n \r\n  return (\r\n    <CCard>\r\n        <CCardBody>\r\n        <CContainer>\r\n            <CRow>\r\n                <CCol xs={12} className='text-center' style ={{marginBlock:'auto'}}>\r\n                  <img \r\n                  height='150px' \r\n                  src={process.env.REACT_APP_SERVER_URL+ links} \r\n                  onError={(e)=>{e.target.onerror=null; e.target.src='icons/slack.png'} }\r\n                  /></CCol>\r\n            </CRow>\r\n            <hr/>\r\n            <CRow>\r\n                <CCol xs={2}><i style={{color:color}} className=\"fa fa-university fa-2x\"></i></CCol>\r\n                <CCol xs={10} ><strong style={{fontFamily:'Quicksand'}}>{name}</strong></CCol>\r\n            </CRow>\r\n            <hr/>\r\n            <CRow>\r\n                <CCol xs={2}><i style={{color:color}} className=\"fa fa-thumb-tack fa-2x\"></i></CCol>\r\n                <CCol xs={10} ><strong style={{fontFamily:'Quicksand'}}>{abbrv}</strong></CCol>\r\n            </CRow>\r\n            <hr/>\r\n            <CRow>\r\n                <CCol xs={2}><i style={{color:color}} className=\"fa fa-map-marker fa-2x\"></i></CCol>\r\n                <CCol xs={10}><strong style={{fontFamily:'Quicksand'}}>{address}{\" \"}{state}{\" \"}{country}{\" \"}</strong></CCol>\r\n            </CRow>\r\n            <hr/>\r\n            <CRow>\r\n                <CCol xs={2}><i style={{color:color}} className=\"fa fa-envelope fa-2x\"></i></CCol>\r\n                <CCol xs={10}><strong style={{fontFamily:'Quicksand'}}>{email}</strong></CCol>\r\n            </CRow>\r\n            <hr/>\r\n            <CRow>\r\n                <CCol xs={2}><i style={{color:color}} className=\"fa fa-phone fa-2x\"></i></CCol>\r\n                <CCol xs={10}><strong style={{fontFamily:'Quicksand'}}>{phone1}{\" \"}{phone2}</strong></CCol>\r\n            </CRow>\r\n            <hr/>\r\n            <CRow>\r\n                <CCol xs={2}><i style={{color:color}} className=\"fa fa-user fa-2x\"></i></CCol>\r\n                <CCol xs={10}><strong style={{fontFamily:'Quicksand'}}>{signatoryname}</strong></CCol>\r\n            </CRow>\r\n            <hr/>\r\n        </CContainer>\r\n        </CCardBody>\r\n    </CCard>\r\n  \r\n  )\r\n}\r\n\r\nexport default WidgetsDropdown\r\n","import React, {Component} from 'react'\r\nimport { \r\n    CCard, \r\n    CCardBody, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow\r\n} from '@coreui/react';\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport SearchDashboard from './SearchDashboard';\r\nimport SearchDashboard1 from './SearchDashboard1';\r\n\r\n\r\nexport default class Search extends Component {\r\nrender() {\r\n     \r\nreturn (\r\n    <>\r\n    <SearchDashboard />\r\n    <SearchDashboard1 />\r\n   </>\r\n  )\r\n}\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { getStudentclassSummary } from './../../../actions/student/studentclass';\r\n\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CCallout\r\n} from '@coreui/react'\r\nimport {\r\n    CChartBar,\r\n    CChartLine,\r\n    CChartDoughnut,\r\n    CChartRadar,\r\n    CChartPie,\r\n    CChartPolarArea\r\n  } from '@coreui/react-chartjs';\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst Dashboards= (props) => {\r\n    let termid = props.termid;\r\n    let sessionid = props.sessionid;\r\n    \r\n    useEffect(() => {\r\n        let params = {\r\n            data:JSON.stringify(\r\n            {\r\n                'sessionid':sessionid,\r\n                'termid':termid,\r\n                'typeid':1\r\n            }),\r\n            cat:'datasummary',\r\n            table:'access',\r\n            narration:'get all schools'\r\n            }\r\n        props.getStudentclassSummary(params)\r\n        return () => {\r\n            //cleanup\r\n        }\r\n    }, [termid, sessionid])\r\n\r\n    \r\n \r\n    \r\n   \r\n   let data = props.summary && Array.isArray(props.summary) ? props.summary.filter(rw=>rw.id !== null):[];\r\n   let genderarray = [];\r\n   let sooTable = {};\r\n   let dobTable = {};\r\n   let houseTable = {};\r\n   let placeTable = {};\r\n   let summale = [];\r\n   let sumfemale = [];\r\n   let sumpop = [];\r\n   data.forEach(element => {\r\n       let nm = element.name;\r\n       let pop = parseInt(element.nums);\r\n       let gens = element.gender && element.gender.length > 0 ? element.gender.split(\",\"):[];\r\n      \r\n       let mg = gens.map((rw, i)=>{return rw.toLowerCase()}).filter(rw=>rw === 'male').length;\r\n       let fg = gens.map((rw, i)=>{return rw.toLowerCase()}).filter(rw=>rw === 'female').length;\r\n       let mg0 = parseInt(mg) > 0  && parseInt(pop) > 0 ? parseInt(mg)/parseInt(pop) * 100 : 0;\r\n       let fg0 = parseInt(fg) > 0  && parseInt(pop) > 0 ? parseInt(fg)/parseInt(pop) * 100: 0;\r\n       \r\n       let arr = {}\r\n       summale.push(mg);\r\n       sumfemale.push(fg)\r\n       sumpop.push(pop)\r\n       arr['name'] = nm;\r\n       arr['pop'] = pop;\r\n       arr['male'] = mg0;\r\n       arr['female'] = fg0;\r\n\r\n       genderarray.push(arr);\r\n\r\n       //AGE\r\n       let dobs = element.dob && element.dob.length > 0 ? element.dob.split(\",\"):[];\r\n      \r\n       for(var i = 0; i < dobs.length; i++)\r\n       {\r\n            let yrs = new Date(dobs[i]).getFullYear();\r\n            let yr = Math.round(new Date().getFullYear() - yrs)\r\n            if(yr in dobTable)\r\n                dobTable[yr]++;\r\n            else\r\n                dobTable[yr] = 1;\r\n        }\r\n\r\n        //STATE OF ORIGIN\r\n        let soos = element.soo && element.soo.length > 0 ? element.soo.split(\",\"):[];\r\n        for(var i = 0; i < soos.length; i++)\r\n        {\r\n            if(soos[i] in sooTable)\r\n                sooTable[soos[i]]++;\r\n            else\r\n                sooTable[soos[i]] = 1;\r\n        }\r\n\r\n        //HOUSE\r\n        let houses = element.house && element.house.length > 0 ? element.house.split(\",\"):[];\r\n        for(var i = 0; i < houses.length; i++)\r\n        {\r\n            if(houses[i] in houseTable)\r\n                houseTable[houses[i]]++;\r\n            else\r\n                houseTable[houses[i]] = 1;\r\n        }\r\n\r\n         //PLACE\r\n         let places = element.place && element.place.length > 0 ? element.place.split(\",\"):[];\r\n         for(var i = 0; i < places.length; i++)\r\n         {\r\n             if(places[i] in placeTable)\r\n                 placeTable[places[i]]++;\r\n             else\r\n                 placeTable[places[i]] = 1;\r\n         }\r\n   });\r\n\r\n   \r\n\r\n   let smale = summale.reduce((a, b)=>parseInt(a) + parseInt(b), 0);\r\n   let sfemale = sumfemale.reduce((a, b)=>parseInt(a) + parseInt(b), 0)\r\n   let spop = sumpop.reduce((a, b)=>parseInt(a) + parseInt(b), 0)\r\n\r\n   let bgcol = Object.keys(houseTable);\r\n   console.log(bgcol)\r\n  return (\r\n    <>\r\n     <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardBody>\r\n            <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Students</h4>\r\n  <div className=\"small text-muted\">{moment(new Date()).format('MMMM YYYY')}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n              <CButton color=\"primary\" className=\"float-right\">\r\n                <CIcon name=\"cil-cloud-download\"/>\r\n              </CButton>\r\n              <CButtonGroup className=\"float-right mr-3\">\r\n                {\r\n                  ['Day', 'Month', 'Year'].map(value => (\r\n                    <CButton\r\n                      color=\"outline-secondary\"\r\n                      key={value}\r\n                      className=\"mx-0\"\r\n                      active={value === 'Month'}\r\n                    >\r\n                      {value}\r\n                    </CButton>\r\n                  ))\r\n                }\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n\r\n              <CRow>\r\n              <CCol xs=\"12\" md=\"12\" xl=\"12\">\r\n              <CRow>\r\n                    \r\n                    <CCol sm=\"4\">\r\n                      <CCallout color=\"info\">\r\n                        <small className=\"text-muted\">Male Population</small>\r\n                        <br />\r\n            <strong className=\"h4\">{smale}</strong>\r\n                      </CCallout>\r\n                    </CCol>\r\n                    <CCol sm=\"4\">\r\n                      <CCallout color=\"danger\">\r\n                        <small className=\"text-muted\">Female Population</small>\r\n                        <br />\r\n            <strong className=\"h4\">{sfemale}</strong>\r\n                      </CCallout>\r\n                    </CCol>\r\n                    <CCol sm=\"4\">\r\n                      <CCallout color=\"success\">\r\n                        <small className=\"text-muted\">Total Population</small>\r\n                        <br />\r\n            <strong className=\"h4\">{spop}</strong>\r\n                      </CCallout>\r\n                    </CCol>\r\n                  </CRow>\r\n                \r\n                {genderarray.map((prop, index)=>{\r\n                  return <CRow key={index}>\r\n                  <CCol>\r\n                <div className=\"progress-group mb-4\">\r\n                  <div className=\"progress-group-prepend\">\r\n                    <span className=\"progress-group-text\">\r\n                      {prop.name}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"progress-group-bars\">\r\n                  <div className=\"progress-group-header\">\r\n                        <CIcon className=\"progress-group-icon\" name=\"cil-user\" />\r\n                        <span className=\"title\">Male</span>\r\n                <span className=\"ml-auto font-weight-bold\">{parseInt(prop.male)}%</span>\r\n                        </div>\r\n                    <CProgress className=\"progress-xs\" color=\"info\" value={parseInt(prop.male)} />\r\n                    <CProgress className=\"progress-xs\" color=\"danger\" value={parseInt(prop.female)} />\r\n                    <div className=\"progress-group-header\">\r\n                        <CIcon className=\"progress-group-icon\" name=\"cil-user-female\" />\r\n                        <span className=\"title\">Female</span>\r\n                        <span className=\"ml-auto font-weight-bold\">{parseInt(prop.female)}%</span>\r\n                        </div>\r\n                  </div>\r\n                  \r\n                 \r\n                </div>\r\n                </CCol>\r\n                      <CCol xs={2}>\r\n                      <div className=\"progress-group-prepend\">\r\n                    <span className=\"progress-group-text pull-right m-auto\">\r\n                      <strong><h4>{parseInt(prop.pop)}</h4></strong>\r\n                    </span>\r\n                  </div>\r\n                   </CCol>\r\n                </CRow>\r\n                  })}\r\n\r\n                  <hr className=\"mt-0\" />\r\n                  <div className=\"legend text-center\">\r\n                    <small>\r\n                      <sup className=\"px-1\"><CBadge shape=\"pill\" color=\"info\">&nbsp;</CBadge></sup>\r\n                      Males\r\n                      &nbsp;\r\n                      <sup className=\"px-1\"><CBadge shape=\"pill\" color=\"danger\">&nbsp;</CBadge></sup>\r\n                      Females\r\n                    </small>\r\n                  </div>\r\n                </CCol>\r\n              </CRow>\r\n\r\n              <br />\r\n              \r\n      <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n        <CCard>\r\n        <CCardHeader>\r\n          Age Distrubution\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartBar\r\n            type=\"barchart\"\r\n            datasets={[\r\n                {\r\n                  data: Object.values(dobTable),\r\n                  backgroundColor: '#E55353',\r\n                  label: 'Years',\r\n                }\r\n            ]}\r\n            labels={Object.keys(dobTable)}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n      </CCol>\r\n      <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n        <CCard>\r\n        <CCardHeader>\r\n          Place of Work\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartBar\r\n            type=\"barchart\"\r\n            datasets={[\r\n                {\r\n                  data: Object.values(placeTable),\r\n                  backgroundColor: 'teal',\r\n                  label: 'No. of Guardians',\r\n                }\r\n            ]}\r\n            labels={Object.keys(placeTable)}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n      </CCol>\r\n      <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n        <CCard>\r\n        <CCardHeader>\r\n          House\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartPolarArea\r\n            type=\"barchart\"\r\n            datasets={[\r\n                {\r\n                  data: Object.values(houseTable),\r\n                  backgroundColor: bgcol,\r\n                  label: 'House',\r\n                }\r\n            ]}\r\n            labels={Object.keys(houseTable)}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n      </CCol>\r\n      <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n        <CCard>\r\n        <CCardHeader>\r\n          State of Origin\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartBar\r\n            type=\"barchart\"\r\n            datasets={[\r\n                {\r\n                  data: Object.values(sooTable),\r\n                  label: 'State of Origin',\r\n                  backgroundColor: 'rgba(255,99,132,0.2)',\r\n                    borderColor: 'rgba(255,99,132,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                    hoverBorderColor: 'rgba(255,99,132,1)',\r\n                }\r\n            ]}\r\n            labels={Object.keys(sooTable)}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n      </CCol>\r\n      \r\n      \r\n    \r\n\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n   \r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    summary:state.studentclassReducer.studentclasssummary\r\n  })\r\nexport default connect(mapStateToProps,{getStudentclassSummary})(Dashboards)\r\n  \r\n  \r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {getStaffsubjects, getStaffsubjectsummary, deleteStaffsubject, updateStaffsubject} from './../../../actions/staff/staffsubject';\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CRow,\r\n  CCollapse,\r\n} from '@coreui/react'\r\nimport StaffsubjectForm from'./../Form/Staffsubject'\r\nimport StaffsubjectTable from'./../Table/Staffsubject'\r\nimport Header from './Header';\r\n\r\n\r\nconst Staffsubject = (props) => {\r\n  const [collapse, setCollapse] = useState(false)\r\n  const [id, setId] = useState('')\r\n  const [dts, setDts] = useState({})\r\n\r\n  const toggle = () => {\r\n    setCollapse(!collapse)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'termid':props.termid,\r\n            'sessionid':props.sessionid,\r\n            'grp':2\r\n        }),\r\n        cat:'staffclass',\r\n        table:'accessstaffsubject',\r\n        narration:'get staffsubjects'\r\n  \r\n    }\r\n    props.getStaffsubjectsummary(params)\r\n    \r\n  }, [props.pid])\r\n\r\n  \r\n  const onEdit = (dt) =>{\r\n      setId(dt.id);\r\n      setDts(dt);\r\n      setCollapse(true)\r\n  }\r\n  const onDelete = (rw, dt) =>{\r\n    \r\n  }\r\n  const onActivate = (rw, num) =>{\r\n   \r\n    let nu = parseInt(num) === 0 ? 1 : 0;\r\n    let fd = new FormData();\r\n    fd.append('id', rw);\r\n    fd.append('is_active', nu);\r\n    fd.append('cat', 'updates');\r\n    fd.append('sessionid', props.pid);\r\n    fd.append('table', 'accessstaffclass');\r\n    fd.append('narration', `activate ande disable class ${nu}`);\r\n    props.updateStaffsubject(fd);\r\n\r\n  }\r\n  const onReset = () =>{\r\n    setId(null);\r\n    setDts({});\r\n  }\r\n  const onClose = (rw, dt) =>{\r\n    setCollapse(false)\r\n  }\r\n\r\n  \r\n  //GET TERM NAME\r\n  let ses = props.sessions.filter(rw=>parseInt(rw.id) === parseInt(props.pid));\r\n  let sess = ses && Array.isArray(ses) && ses.length > 0 ? ses[0].name : 'None'\r\n\r\n  let tem = props.terms.filter(rw=>parseInt(rw.id) === parseInt(props.qid));\r\n  let tems = tem && Array.isArray(tem) && tem.length > 0 ? tem[0].name : 'None'\r\n\r\n  let data = props.staffsubjects.staffsubjectsummary && Array.isArray(props.staffsubjects.staffsubjectsummary) ? props.staffsubjects.staffsubjectsummary.filter(rw =>rw !== null || rw !== undefined) : []\r\n  \r\n   return (\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <Header \r\n              pid={props.pid}\r\n              qid={props.qid}\r\n              did={props.did}\r\n              icon={props.para.icon}\r\n              editer={false}\r\n              title={props.title.name+\": Subjects Allocation\"} \r\n              school={props.school} \r\n              toggle={toggle}\r\n              />\r\n         <CCardBody className='table-responsive'>\r\n            <StaffsubjectTable  \r\n                pid={props.pid}\r\n                qid={props.qid}\r\n                did={props.did}\r\n                data={data}\r\n                editer={false}\r\n                submenu={props.para.submenu}\r\n                onActivate={(id, rw)=>onActivate(id, rw)}\r\n                onEdit={(rw)=>onEdit(rw)}\r\n                onDelete={(rw)=>onDelete(rw)}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n        <CCollapse show={collapse}>\r\n            <StaffsubjectForm \r\n                pid={props.pid}\r\n                qid={props.qid}\r\n                did={props.did}\r\n                id={id}\r\n                school={props.school}\r\n                data={dts}\r\n                onReset={onReset}\r\n                onClose={onClose}\r\n            />\r\n        </CCollapse>\r\n    </CRow>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer,\r\n  terms : state.termReducer.terms,\r\n  sessions : state.sessionReducer.sessions\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getStaffsubjects,\r\n  getStaffsubjectsummary,\r\n  deleteStaffsubject,\r\n  updateStaffsubject\r\n})(Staffsubject)\r\n","import React, { useEffect }  from 'react'\r\nimport { getThemesummary} from './../../../actions/setting/theme'\r\nimport { connect } from 'react-redux'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CContainer, CRow } from '@coreui/react'\r\n\r\n\r\n\r\nconst Studentclasss = (props) => {\r\n  let dt = props.themes && Array.isArray(props.themes) ? props.themes.filter(rw =>rw !== null || rw !== undefined) : []\r\n \r\n  let subjectid = props.subject;\r\n  useEffect(() => {\r\n    let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'id':0,\r\n            'typeid':props.activeschool.typeid\r\n        }),\r\n        cat:'selectess',\r\n        table:'themesummary',\r\n        narration:'get all scheme of work'\r\n      }\r\n      props.getThemesummary(params);\r\n    \r\n  }, [])\r\n\r\n let data = {};\r\n dt.forEach(element => {\r\n    if(element.subjectid in data)\r\n    {\r\n        if(element.termid in data[element.subjectid])\r\n        {\r\n            if(element.claszid in data[element.subjectid][element.termid])\r\n            {\r\n\r\n            }else\r\n            {\r\n                data[element.subjectid][element.termid][element.claszid] = element.num\r\n            }\r\n\r\n        }else\r\n        {\r\n            data[element.subjectid][element.termid] = {} \r\n            data[element.subjectid][element.termid][element.claszid] = element.num\r\n        }\r\n\r\n    }else\r\n    {\r\n        data[element.subjectid] = {}\r\n        data[element.subjectid][element.termid] = {} \r\n        data[element.subjectid][element.termid][element.claszid] = element.num\r\n    }\r\n}); \r\n let subjectz = {};\r\n let claszs = {};\r\n dt.forEach(ele=>{\r\n    subjectz[ele.subjectid] = ele.subjectname;\r\n    claszs[ele.claszid] = ele.claszabbrv;\r\n })\r\n\r\n const subjects = Object.entries(subjectz)\r\n    .sort(([,a],[,b]) => a-b)\r\n    .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});\r\n    \r\nlet terms = { 1:'Ist', 2:'2nd', 3:'3rd'};\r\nconst moveDir = (sub, term, clasz) =>{\r\n        window.open('#/scheme/'+clasz+'/'+term+'/'+sub)\r\n}\r\n\r\nlet th1 = Object.keys(claszs).filter(rw=>claszs[rw] !== null).map((p, i)=>{\r\n    return <td colSpan={3} style={{padding:'2px'}}>{claszs[p]}</td>\r\n    })\r\n\r\nlet th2 = Object.keys(claszs).filter(rw=>claszs[rw] !== null).map((p, i)=>{\r\n            return Object.keys(terms).map((p1, i1)=>{\r\n                return <td key={`${i}-${i1}`} style={{padding:'2px'}}>{terms[p1]}</td>\r\n            })\r\n          })\r\n\r\nlet tbs = Object.keys(subjects).map((p, i)=>{    \r\n    return  <tr style={{padding:'2px'}}>\r\n                <td key={i}  className='text-left'  style={{padding:'2px'}}>{subjects[p] ? subjects[p].toUpperCase() :'NO TITLE' }</td>\r\n                { Object.keys(claszs).filter(rw=>claszs[rw] !== null).map((p1, i1)=>{\r\n                  return   Object.keys(terms).map((p2, i2)=>{\r\n                        return   p in data && p2 in data[p] && p1 in data[p][p2] ?\r\n                        <td key={i2} style={{padding:'2px', cursor:'pointer'}} onClick={()=>moveDir(p, p2, p1)}>{data[p][p2][p1]}</td>:<td style={{padding:'2px'}}>{'-.-'}</td>\r\n                    })\r\n                  })\r\n                }\r\n            </tr>\r\n})\r\n \r\n  return (\r\n   <>\r\n   <CCard>\r\n     <CCardHeader>\r\n       <CContainer>\r\n         <CRow>\r\n           <CCol>\r\n              <h4>SCHEME OF WORK: SUMMARY</h4>\r\n              Click the number of themes to veiw.\r\n            </CCol>\r\n         </CRow>\r\n      </CContainer>\r\n   </CCardHeader>\r\n   <CCardBody className='table-responsive'>\r\n   <table className=\"table  table-bordered table-dark mb-0 d-sm-table\" >\r\n        <thead className=\"thead-light text-center\">\r\n            <tr style={{padding:'2px'}}>\r\n                <td style={{padding:'2px'}}></td>\r\n                {th1}\r\n            </tr>\r\n            <tr style={{padding:'2px'}}>\r\n            <td style={{padding:'2px'}}></td>\r\n                {th2}\r\n            </tr>\r\n        </thead>\r\n        <tbody className='text-center'>\r\n            {tbs}\r\n        </tbody>\r\n  </table>\r\n  </CCardBody>\r\n  </CCard>\r\n   </>\r\n  )\r\n}\r\nconst mapStatetoProps = (state)=>({\r\n themes:state.themeReducer.themesummary,\r\n activeschool:state.userReducer.activeschool\r\n})\r\nexport default connect(mapStatetoProps, {\r\n    getThemesummary\r\n}) (Studentclasss)\r\n  \r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { getStudentfeeSummary } from './../../../actions/student/studentfee';\r\n\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CCallout,\r\n  CTooltip\r\n} from '@coreui/react'\r\nimport {\r\n    CChartBar,\r\n    CChartLine,\r\n    CChartDoughnut,\r\n    CChartRadar,\r\n    CChartPie,\r\n    CChartPolarArea\r\n  } from '@coreui/react-chartjs';\r\nimport CIcon from '@coreui/icons-react'\r\nimport { nairaformat } from '../../../actions/common';\r\n\r\n\r\nconst Dashboards= (props) => {\r\n    let termid = props.termid;\r\n    let sessionid = props.sessionid;\r\n    \r\n    useEffect(() => {\r\n        let params = {\r\n            data:JSON.stringify(\r\n            {\r\n                'sessionid':sessionid,\r\n                'termid':termid,\r\n                'typeid':2\r\n            }),\r\n            cat:'datasummary',\r\n            table:'access',\r\n            narration:'get all schools'\r\n            }\r\n        props.getStudentfeeSummary(params)\r\n        return () => {\r\n            //cleanup\r\n        }\r\n    }, [termid, sessionid])\r\n\r\n  \r\n   let data = props.summary && Array.isArray(props.summary) ? props.summary.filter(rw=>rw.id !== null):[];\r\n  \r\n   let feearray = {};\r\n   let feesarray = [];\r\n   let payarray = {};\r\n   let balarray = {};\r\n   let balsarray = {};\r\n   let namearray = {};\r\n   let sumpop = [];\r\n   let sumfee = [];\r\n   let sumpay = [];\r\n   let sumbal = [];\r\n   let sumbals = [];\r\n   data.forEach(element => {\r\n      \r\n       let nm = element.name;\r\n       let pop = parseInt(element.nums);\r\n       let pay = parseFloat(element.pay) >= 0 ? parseFloat(element.pay) : 0;\r\n       let fee = parseFloat(element.fee) >= 0 ? parseFloat(element.fee) : 0;\r\n       let bal = parseFloat(element.bal) >= 0 ? parseFloat(element.bal) : 0;\r\n       let bals = parseFloat(element.bals) >= 0 ? parseFloat(element.bals) : 0;\r\n\r\n       feearray[element.id] =  fee;\r\n       payarray[element.id] =  pay;\r\n       balarray[element.id] =  bal;\r\n       balsarray[element.id] = bals;\r\n\r\n       sumfee.push(fee)\r\n       sumpay.push(pay)\r\n       sumbal.push(bal)\r\n       sumbals.push(bals)\r\n      //  if(parseInt(element.grp) > 0)\r\n      //  {\r\n      //    feearray[element.id] =  pay;\r\n      //    sumfee.push(pay)\r\n      //  }else{\r\n      //    payarray[element.id] =  pay;\r\n      //    sumpay.push(pay)\r\n      //  }\r\n\r\n       if(Object.keys(namearray).includes(element.id))\r\n       {\r\n            \r\n       }else{\r\n            namearray[element.id] = nm;\r\n       }\r\n\r\n   });\r\n   \r\n   Object.keys(namearray).forEach(element => {\r\n       let arr = {}\r\n       let fee = feearray[element];\r\n       let pay = payarray[element];\r\n       let bal = balarray[element];\r\n       let bals = balsarray[element];\r\n       let payz = parseFloat(payarray[element]) - parseFloat(balsarray[element]);\r\n       let money = parseFloat(pay) > 0  && parseFloat(fee) > 0 ? (parseFloat(payz)/parseFloat(fee)) * 100 : 0;\r\n\r\n        arr['name'] = namearray[element];\r\n        \r\n        arr['fee'] = fee;\r\n        arr['pay'] = pay;\r\n        arr['bal'] = bal;\r\n        arr['bals'] = bals;\r\n        arr['pop'] = fee - pay;\r\n        console.log(bals)\r\n        arr['money'] = money;\r\n\r\n        feesarray.push(arr)\r\n   });\r\n\r\n\r\n   let sfee = sumfee.reduce((a, b)=>parseFloat(a) + parseFloat(b), 0);\r\n   let spay = sumpay.reduce((a, b)=>parseFloat(a) + parseFloat(b), 0)\r\n   let spop = sumpop.reduce((a, b)=>parseFloat(a) + parseFloat(b), 0)\r\n\r\n   let naira = nairaformat;\r\n  return (\r\n    <>\r\n     <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardBody>\r\n            <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Fees</h4>\r\n                <div className=\"small text-muted\">{moment(new Date()).format('MMMM YYYY')}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n              <CTooltip content=\"Click to download/reload\">\r\n              <CButton color=\"primary\" className=\"float-right\">\r\n                <CIcon \r\n                name=\"cil-cloud-download\"/>\r\n              </CButton>\r\n              </CTooltip>\r\n              <CButtonGroup className=\"float-right mr-3\">\r\n                {\r\n                  ['Term', 'Session'].map(value => (\r\n                    <CButton\r\n                      color=\"outline-secondary\"\r\n                      key={value}\r\n                      className=\"mx-0\"\r\n                      active={value === 'Term'}\r\n                    >\r\n                      {value}\r\n                    </CButton>\r\n                  ))\r\n                }\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n\r\n              <CRow>\r\n              <CCol xs=\"12\" md=\"12\" xl=\"12\">\r\n              <CRow>\r\n                    <CCol sm=\"4\">\r\n                      <CCallout color=\"info\">\r\n                        <small className=\"text-muted\">Fee</small>\r\n                        <br />\r\n            <strong className=\"h4\">{nairaformat(sfee)}</strong>\r\n                      </CCallout>\r\n                    </CCol>\r\n                    <CCol sm=\"4\">\r\n                      <CCallout color=\"success\">\r\n                        <small className=\"text-muted\">Payments</small>\r\n                        <br />\r\n            <strong className=\"h4\">{nairaformat(spay)}</strong>\r\n                      </CCallout>\r\n                    </CCol>\r\n                    <CCol sm=\"4\">\r\n                      <CCallout color=\"danger\">\r\n                        <small className=\"text-muted\">Debt</small>\r\n                        <br />\r\n            <strong className=\"h4\">{nairaformat(sfee - spay)}</strong>\r\n                      </CCallout>\r\n                    </CCol>\r\n                  </CRow>\r\n                \r\n                {feesarray.map((prop, index)=>{\r\n                  return <CRow key={index}>\r\n                  <CCol>\r\n                <div className=\"progress-group mb-4\">\r\n                  <div className=\"progress-group-bars\">\r\n                  <div className=\"progress-group-header\">\r\n                        <CIcon className=\"progress-group-icon\" name=\"cil-money\" />\r\n                        <span className=\"title\">{prop.name}</span>\r\n                <span className=\"ml-auto font-weight-bold\">{parseInt(prop.money)}%</span>\r\n                        </div>\r\n                    <CProgress className=\"progress-xs\" color=\"warning\" value={parseInt(prop.money)} />\r\n                    </div>\r\n                </div>\r\n                </CCol>\r\n                      <CCol xs={2}>\r\n                      <div className=\"progress-group-prepend\">\r\n                    <span className=\"progress-group-text pull-right m-auto\">\r\n                      <strong><strong className=\"text-danger\">{nairaformat(prop.pop)}</strong></strong>\r\n                    </span>\r\n                  </div>\r\n                   </CCol>\r\n                </CRow>\r\n                  })}\r\n\r\n                  <hr className=\"mt-0\" />\r\n                  <div className=\"legend text-center\">\r\n                    <small>\r\n                      <sup className=\"px-1\"><CBadge shape=\"pill\" color=\"warning\">&nbsp;</CBadge></sup>\r\n                      Percentage paid\r\n                     \r\n                    </small>\r\n                  </div>\r\n                </CCol>\r\n              </CRow>\r\n              <br />\r\n    \r\n\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n   \r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    summary:state.studentfeeReducer.studentfeesummary\r\n  })\r\nexport default connect(mapStateToProps,{getStudentfeeSummary})(Dashboards)\r\n  \r\n  \r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { getStudentattendanceSummary } from './../../../actions/student/studentattendance';\r\n\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CCallout\r\n} from '@coreui/react'\r\nimport {\r\n    CChartBar,\r\n    CChartLine,\r\n    CChartDoughnut,\r\n    CChartRadar,\r\n    CChartPie,\r\n    CChartPolarArea\r\n  } from '@coreui/react-chartjs';\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nconst Dashboards= (props) => {\r\n    let termid = props.termid;\r\n    let sessionid = props.sessionid;\r\n\r\n    const [firstday, setfirstday] = useState(new Date(new Date().getFullYear(), new Date().getMonth(), -1))\r\n    const [lastday, setlastday] = useState(new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0))\r\n    const [datax, setdatax] = useState({})\r\n    \r\n    useEffect(() => {\r\n        let params = {\r\n            data:JSON.stringify(\r\n            {\r\n                'sessionid':sessionid,\r\n                'termid':termid,\r\n                'schoolid':props.user.activeschool.id,\r\n                'starts':moment(firstday).format('YYYY-MM-DD'),\r\n                'ends':moment(lastday).format('YYYY-MM-DD')\r\n            }),\r\n            cat:'dataattendance',\r\n            table:'attendances',\r\n            narration:'get all attendance'\r\n            }\r\n        props.getStudentattendanceSummary(params)\r\n        return () => {\r\n            //cleanup\r\n        }\r\n    }, [termid, sessionid, firstday, lastday])\r\n\r\n    \r\n \r\n    \r\n   \r\n   let data = props.summary && Array.isArray(props.summary) && props.summary.length > 1 && Array.isArray(props.summary[0])? props.summary[0].filter(rw=>rw.id !== null):[];\r\n   let data1 = props.summary && Array.isArray(props.summary) && props.summary.length > 1 && Array.isArray(props.summary[1]) ? props.summary[1].filter(rw=>rw.id !== null):[];\r\n   \r\n    var listDate = [];\r\n    var startDate = firstday;\r\n    var endDate = lastday;\r\n    var dateMove = new Date(startDate);\r\n    var strDate = startDate;\r\n\r\n    while (new Date(strDate) < new Date(endDate)){\r\n            var strDate = dateMove.toISOString().slice(0, 10);\r\n            listDate.push(strDate);\r\n            dateMove.setDate(dateMove.getDate() + 1);\r\n    };\r\n    var getdates = {};\r\n    data.forEach(prop =>{\r\n        if(Object.keys(getdates).includes(moment(prop.dates).format('YYYY-MM-DD')))\r\n        {\r\n            let res = prop.reason.split(\",\");\r\n            getdates[moment(prop.dates).format('YYYY-MM-DD')].push(res.length);\r\n        }else\r\n        {\r\n            getdates[moment(prop.dates).format('YYYY-MM-DD')] = [];\r\n            let res = prop.reason.split(\",\");\r\n            getdates[moment(prop.dates).format('YYYY-MM-DD')].push(res.length);\r\n        }  \r\n    })\r\n    var getdatex = {};\r\n    data1.forEach(prop =>{\r\n        if(Object.keys(getdatex).includes(moment(prop.dates).format('YYYY-MM-DD')))\r\n        {\r\n            getdatex[moment(prop.dates).format('YYYY-MM-DD')].push(prop.clientid);\r\n        }else\r\n        {\r\n            getdatex[moment(prop.dates).format('YYYY-MM-DD')] = [];\r\n            getdatex[moment(prop.dates).format('YYYY-MM-DD')].push(prop.clientid);\r\n        }  \r\n    })\r\n\r\n    var getabsents = {};\r\n    var getabsentsname = {};\r\n    var getabsentsdata = {};\r\n    data1.forEach(prop =>{\r\n        if(Object.keys(getabsents).includes(prop.clients))\r\n        {\r\n            getabsents[prop.clients].push(moment(prop.dates).format('YYYY-MM-DD'));\r\n        }else\r\n        {\r\n            getabsents[prop.clients] = []\r\n            getabsentsname[prop.clients] = prop.clientname;\r\n            getabsentsdata[prop.clients] = prop.clientdata.split(\"::::\");\r\n            getabsents[prop.clients].push(moment().format(prop.dates,'YYYY-MM-DD'));\r\n        }  \r\n    })\r\n    \r\n    let popu = {}\r\n    listDate.forEach(prop =>{\r\n        let all_students_counted = getdates[moment().format(prop,'YYYY-MM-DD')] \r\n                            && Array.isArray(getdates[moment().format(prop,'YYYY-MM-DD')]) \r\n                            && getdates[moment().format(prop,'YYYY-MM-DD')].length > 0 ?\r\n                            getdates[moment().format(prop,'YYYY-MM-DD')].reduce((a, b)=>parseInt(a) + parseInt(b), 0) :\r\n                            0;\r\n        let all_not_available = getdatex[moment().format(prop,'YYYY-MM-DD')] \r\n                                && Array.isArray(getdatex[moment().format(prop,'YYYY-MM-DD')]) \r\n                                && getdatex[moment().format(prop,'YYYY-MM-DD')].length > 0 ?\r\n                                getdatex[moment().format(prop,'YYYY-MM-DD')].length : 0;\r\n\r\n        let diff = all_students_counted - all_not_available;\r\n\r\n        popu[moment().format(prop,'YYYY-MM-DD')] = diff;\r\n    })\r\n    \r\n   let attendancearray = {};\r\n   let attendancesarray = [];\r\n   let payarray = {};\r\n   let namearray = {};\r\n   let sumpop = [];\r\n   let sumattendance = [];\r\n   let sumpay = [];\r\n\r\n\r\n   data.forEach(element => {\r\n      \r\n       let nm = element.name;\r\n       let pop = parseInt(element.nums);\r\n       let pay = parseFloat(element.pay) > 0 ? parseFloat(element.pay) : 0;\r\n       \r\n       if(parseInt(element.grp) > 0)\r\n       {\r\n         attendancearray[element.id] =  pay;\r\n         sumattendance.push(pay)\r\n       }else{\r\n         payarray[element.id] =  pay;\r\n         sumpay.push(pay)\r\n       }\r\n\r\n       if(Object.keys(namearray).includes(element.id))\r\n       {\r\n            \r\n       }else{\r\n            namearray[element.id] = nm;\r\n       }\r\n\r\n   });\r\n   \r\n   Object.keys(namearray).forEach(element => {\r\n       let arr = {}\r\n       let attendance = attendancearray[element];\r\n       let pay = payarray[element];\r\n       let money = parseFloat(pay) > 0  && parseFloat(attendance) > 0 ? (parseFloat(pay)/parseFloat(attendance)) * 100 : 0;\r\n\r\n        arr['name'] = namearray[element];\r\n        \r\n        arr['attendance'] = attendance;\r\n        arr['pay'] = pay;\r\n        arr['pop'] = attendance - pay;\r\n        arr['money'] = money;\r\n\r\n        attendancesarray.push(arr)\r\n   });\r\n\r\n\r\n    return (\r\n    <>\r\n     <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardBody>\r\n            <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Student Attendance</h4>\r\n                <div className=\"small text-muted\">{moment(new Date()).format('MMMM YYYY')}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n              <CButton color=\"primary\" className=\"float-right\">\r\n                <CIcon name=\"cil-cloud-download\"/>\r\n              </CButton>\r\n              <CButtonGroup className=\"float-right mr-3\">\r\n                {\r\n                  ['Day', 'Month', 'Year'].map(value => (\r\n                    <CButton\r\n                      color=\"outline-secondary\"\r\n                      key={value}\r\n                      className=\"mx-0\"\r\n                      active={value === 'Month'}\r\n                    >\r\n                      {value}\r\n                    </CButton>\r\n                  ))\r\n                }\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n\r\n              <CRow>\r\n              <CCol xs=\"12\" md=\"12\" xl=\"12\"></CCol>\r\n              </CRow>\r\n              <br />\r\n\r\n              <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                <CCardBody>\r\n                <CChartLine\r\n                    type=\"barchart\"\r\n                    datasets={[\r\n                        {\r\n                        data: Object.values(popu),\r\n                        label: 'student',\r\n                        backgroundColor: 'rgba(255,99,132,0.2)',\r\n                        borderColor: 'rgba(255,99,132,1)',\r\n                        borderWidth: 4,\r\n                        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                        hoverBorderColor: 'rgba(255,99,132,1)',\r\n                        }\r\n                    ]}\r\n                    labels={Object.keys(popu)}\r\n                    options={{\r\n                    tooltips: {\r\n                        enabled: true\r\n                    }\r\n                    }}\r\n                />\r\n                </CCardBody>\r\n            </CCol>\r\n      \r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardHeader>\r\n              Absentees {' - '} {`${moment(firstday).format('DD, MMM YYYY')} - ${moment(lastday).format('DD, MMM YYYY')}`}\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th className=\"text-center\"><CIcon name=\"cil-people\" /></th>\r\n                    <th>Student Name</th>\r\n                    <th className=\"text-center\">\r\n                      <CIcon height={25} name=\"cil-phone\" />\r\n                      </th>\r\n                      <th className=\"text-center\">\r\n                      <CIcon height={25} name=\"cil-envelope-letter\" />\r\n                      </th>\r\n                      <th className=\"text-center\">\r\n                      <i className='fa fa-whatsapp fa-2x'></i>\r\n                    </th>\r\n                    <th>Absents</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                 { Object.keys(getabsentsname).map((prop, ind)=>{\r\n                 return <tr key={ind}>\r\n                    <td className=\"text-center\">\r\n                      <div className=\"c-avatar\">\r\n                      <img \r\n                        src={process.env.REACT_APP_SERVER_URL+  getabsentsdata[prop][1]} \r\n                        className=\"c-avatar-img\" \r\n                        alt={getabsentsdata[prop][0]} \r\n                        onError={(e)=>{e.target.onerror=null; e.target.src=process.env.PUBLIC_URL+'/icons/profile_1.png'} }\r\n                        />\r\n                        \r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div>{getabsentsname[prop]}</div>\r\n                      <div className=\"small text-muted\">\r\n                 <span>{getabsentsdata[prop][0]}</span> | {`${getabsentsdata[prop][2]} ${getabsentsdata[prop][3]} ${getabsentsdata[prop][4]} ${getabsentsdata[prop][5]}`}\r\n                      </div>\r\n                    </td>\r\n                    \r\n                    \r\n                    <td className=\"text-center\">\r\n                      <CIcon height={25} name=\"cil-phone\" />\r\n                      </td>\r\n                      <td className=\"text-center\">\r\n                      <CIcon height={25} name=\"cil-envelope-letter\" />\r\n                      </td>\r\n                      <td className=\"text-center\">\r\n                      <i className='fa fa-whatsapp fa-2x'></i>\r\n                    </td>\r\n                    <td>\r\n                      <div className=\"small text-muted\">Absent</div>\r\n                 <strong>{getabsents[prop].length > 1 ? `${getabsents[prop].length} days`  : '1 day'}</strong>\r\n                    </td>\r\n                  </tr>\r\n                  })}\r\n                  </tbody>\r\n              </table>\r\n\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    \r\n   \r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    summary:state.studentattendanceReducer.studentattendancesummary,\r\n    user:state.userReducer\r\n  })\r\nexport default connect(mapStateToProps,{getStudentattendanceSummary})(Dashboards)\r\n  \r\n  \r\n","import React, {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getReports} from './../../../actions/setting/report';\r\nimport {getGradeunits} from './../../../actions/setting/gradeunit';\r\nimport {getSubjects} from './../../../actions/setting/subject';\r\nimport {getClaszs} from './../../../actions/setting/clasz';\r\nimport {getClaszunits} from './../../../actions/setting/claszunit';\r\nimport {getStudentscoreSummary} from './../../../actions/student/studentscore';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCardBody,\r\n  CCardHeader,\r\n CTabs,\r\n CNav,\r\n CNavItem,\r\n CNavLink,\r\n CTabContent,\r\n CTabPane,\r\n CTooltip,\r\n CCardFooter\r\n} from '@coreui/react'\r\nimport {\r\n    CChartBar,\r\n    CChartLine,\r\n    CChartDoughnut,\r\n    CChartRadar,\r\n    CChartPie,\r\n    CChartPolarArea\r\n  } from '@coreui/react-chartjs';\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nconst Dashboards= (props) => {\r\n\r\n    let termid = props.termid;\r\n    let sessionid = props.sessionid;\r\n    let all_clasz = props.claszs;\r\n    let all_claszunit = props.claszunits;\r\n    let all_subject = props.subjects;\r\n\r\n    const [reportid, setreportid] = useState(null)\r\n    const [rep, setrep] = useState({})\r\n    const [class_toggle, setclass_toggle] = useState(true)\r\n    const [sub_toggle, setsub_toggle] = useState(true)\r\n\r\n    useEffect(() => {\r\n        let params = {\r\n            data:JSON.stringify(\r\n            {\r\n                'is_active':0,\r\n                'termid':termid\r\n            }),\r\n            cat:'selected',\r\n            table:'reports',\r\n            narration:'get all reports'\r\n        }\r\n        props.getReports(params)\r\n        \r\n    }, [termid, sessionid])\r\n\r\n    useEffect(() => {\r\n       let grd = Array.isArray(Object.keys(rep)) ? rep.gradeid : '';\r\n\r\n        let params = {\r\n            data:JSON.stringify(\r\n            {\r\n                'reportid':reportid,\r\n                'termid':termid,\r\n                'sessionid':sessionid\r\n            }),\r\n            cat:'getreport',\r\n            table:'studentscores',\r\n            narration:'get all reports'\r\n        }\r\n        props.getStudentscoreSummary(params)\r\n        \r\n        let params2 = {\r\n            data:JSON.stringify(\r\n            {\r\n                  'gradeid' : grd,\r\n                  'is_active':0\r\n            }),\r\n              cat:'selected',\r\n              table:'gradeunits',\r\n              narration:'get cas'\r\n            }\r\n          props.getGradeunits(params2);\r\n        \r\n        let params3 = {\r\n            data:JSON.stringify(\r\n            {\r\n                  'is_active':0\r\n            }),\r\n              cat:'selected',\r\n              table:'subjectsort',\r\n              narration:'get all subjects'\r\n            }\r\n          props.getSubjects(params3);\r\n        \r\n          let params4 = {\r\n            data:JSON.stringify(\r\n            {\r\n                  'is_active':0\r\n            }),\r\n              cat:'selected',\r\n              table:'claszsort',\r\n              narration:'get all clasz'\r\n            }\r\n          props.getClaszs(params4);\r\n\r\n          let params5 = {\r\n            data:JSON.stringify(\r\n            {\r\n                  'is_active':0\r\n            }),\r\n              cat:'selected',\r\n              table:'claszunitsort',\r\n              narration:'get all classz units'\r\n            }\r\n          props.getClaszunits(params5);\r\n\r\n    }, [reportid, sessionid, termid])\r\n    \r\n    const avg = (sumz)=>{\r\n        if(sumz !== undefined){\r\n        let sums = sumz.reduce((a, b)=>parseFloat(a) + parseFloat(b), 0);\r\n        let tots = sumz.length;\r\n        \r\n        let res = sums > 0 && tots > 0 ? (sums/tots) : 0;\r\n        return Number(res).toFixed(2)\r\n        }\r\n    }\r\n    const cnt = (sumz)=>{\r\n        if(sumz !== undefined){\r\n        ;\r\n        let tots = sumz.length;\r\n        return Number(tots).toFixed(0)\r\n        }\r\n    }\r\n    const compute = (sumz)=>{\r\n        if(sumz !== undefined){\r\n        let sums = sumz.length;\r\n        \r\n        return Number(sums).toFixed(0)\r\n        }\r\n    }\r\n    const loadreport = (dt) =>{\r\n        if(dt.length > 0)\r\n        {\r\n            let dt1 = JSON.parse(dt)\r\n            setreportid(dt1.id)\r\n            setrep(dt1)\r\n\r\n        }\r\n    }\r\n    const sum_all = (obj) =>{\r\n        let al = []\r\n        Object.keys(obj).forEach(el=>{\r\n           al =  [...al, ...obj[el]];\r\n        })\r\n        let all = al.length\r\n        return all;\r\n        //console.log(obj, Object.values(obj))\r\n    }\r\n    const avg_all = (obj) =>{\r\n        let al = []\r\n        Object.keys(obj).forEach(el=>{\r\n           al =  [...al, ...obj[el]];\r\n        })\r\n        let sumz = al;\r\n\r\n        if(sumz !== undefined)\r\n        {\r\n            let sums = sumz.reduce((a, b)=>parseFloat(a) + parseFloat(b), 0);\r\n            let tots = sumz.length;\r\n            let res = sums > 0 && tots > 0 ? (sums/tots) : 0;\r\n            return Number(res).toFixed(1)\r\n        }\r\n        \r\n    }\r\n    const pers = (num, obj) =>{\r\n            let tots = num;\r\n            let al = []\r\n            Object.keys(obj).forEach(el=>{\r\n            al.push(obj[el])\r\n            })\r\n            let sumz = al;\r\n\r\n            if(sumz !== undefined)\r\n            {\r\n                let sums = sumz.reduce((a, b)=>parseFloat(a) + parseFloat(b), 0);\r\n                let res = sums > 0 && tots > 0 ? (tots/sums) * 100 : 0;\r\n                return Number(res).toFixed(0)+'%'\r\n            }\r\n    }\r\n    const perss = (num, obj) =>{\r\n        let tots = num;\r\n        let al = []\r\n        Object.keys(obj).forEach(el=>{\r\n            al =  [...al, ...obj[el]];\r\n        })\r\n        \r\n        let sumz = al;\r\n\r\n        if(sumz !== undefined)\r\n        {\r\n            let sums = sumz.length;\r\n            let res = sums > 0 && tots > 0 ? (tots/sums) * 100 : 0;\r\n            return Number(res).toFixed(0)+'%'\r\n        }\r\n   }\r\n   const  lister = (obj) =>{\r\n       if(obj !== undefined && Array.isArray(obj)){\r\n       let list_holder = {};\r\n       obj.forEach(ele=>{\r\n        list_holder[ele.id] = ele.name;\r\n       })\r\n       return list_holder;\r\n    }\r\n    return {}\r\n   }\r\n   \r\n   const all_claszs = lister(all_clasz);\r\n   const all_claszunits = lister(all_claszunit);\r\n   const all_subjects = lister(all_subject);\r\n   \r\n   let studentscore0 = props.studentscore[0] !== undefined && Array.isArray(props.studentscore[0]) ? props.studentscore[0]:[];\r\n   let studentscore1 = props.studentscore[1] !== undefined && Array.isArray(props.studentscore[1]) ? props.studentscore[1]:[];\r\n   let studentscore2 = props.studentscore[2] !== undefined && Array.isArray(props.studentscore[2]) ? props.studentscore[2]:[];\r\n   let studentscore3 = props.studentscore[3] !== undefined && Array.isArray(props.studentscore[3]) ? props.studentscore[3]:[];\r\n   let studentscore4 = props.studentscore[4] !== undefined && Array.isArray(props.studentscore[4]) ? props.studentscore[4]:[];\r\n\r\n   let total_score0 = [];\r\n   let tabl0 = studentscore0.map((prop, ind)=>{\r\n       total_score0.push(prop.score)\r\n       return <tr key={prop.studentid}>\r\n           <td>{ind + 1}</td>\r\n           <td>{prop.studentname}</td>\r\n           <td className=\"text-center\">{prop.classname}</td>\r\n           <td className=\"text-center\">{prop.subjectid}</td>\r\n           <td className=\"text-center\">{Number(prop.score).toFixed(2)}</td>\r\n       </tr>\r\n   })\r\n\r\n   let total_score00 = {};\r\n   studentscore0.forEach(ele=>{\r\n        let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n        if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n        {\r\n                let nm = group[0]\r\n                if(total_score00.hasOwnProperty(nm.abbrv))\r\n                {\r\n                    total_score00[nm.abbrv] = total_score00[nm.abbrv] + 1\r\n                }else\r\n                {\r\n                    total_score00[nm.abbrv] = 0;\r\n                    total_score00[nm.abbrv] = 1\r\n                } \r\n        }\r\n   })\r\n\r\n   let total_score000 = {};\r\n   studentscore0.forEach(ele=>{\r\n   let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n    \r\n    if(total_score000 !== undefined && total_score000.hasOwnProperty(ele.classid))\r\n    {\r\n        if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n        {       let nm = group[0] \r\n                if(total_score000[ele.classid].hasOwnProperty(nm.abbrv))\r\n                {\r\n                    total_score000[ele.classid][nm.abbrv] = total_score000[ele.classid][nm.abbrv] + 1\r\n                }else\r\n                {\r\n                    total_score000[ele.classid][nm.abbrv] = 1\r\n                } \r\n        }\r\n    }else\r\n    {\r\n        if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n        {\r\n            \r\n            let nm = group[0] \r\n            total_score000[ele.classid] = {};\r\n            total_score000[ele.classid][nm.abbrv] = 1;\r\n        }\r\n    }\r\n   })\r\n\r\n   let total_score0000 = {};\r\n   studentscore0.forEach(ele=>{\r\n   let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n    \r\n    if(total_score0000 !== undefined && total_score0000.hasOwnProperty(ele.claszid))\r\n    {\r\n        if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n        {       let nm = group[0] \r\n                if(total_score0000[ele.claszid].hasOwnProperty(nm.abbrv))\r\n                {\r\n                    total_score0000[ele.claszid][nm.abbrv] = total_score0000[ele.claszid][nm.abbrv] + 1\r\n                }else\r\n                {\r\n                    total_score0000[ele.claszid][nm.abbrv] = 1\r\n                } \r\n        }\r\n    }else\r\n    {\r\n        if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n        {\r\n            \r\n            let nm = group[0] \r\n            total_score0000[ele.claszid] = {};\r\n            total_score0000[ele.claszid][nm.abbrv] = 1;\r\n        }\r\n    }\r\n   })\r\n  \r\n   let total_score1 = [];\r\n   let tabl1 = studentscore1.map((prop, ind)=>{\r\n       total_score1.push(prop.score)\r\n       return <tr key={prop.classid}>\r\n           <td>{ind + 1}</td>\r\n           <td className=\"text-center\">{prop.classname}</td>\r\n           <td className=\"text-center\">{prop.studentid}</td>\r\n           <td className=\"text-center\">{Number(prop.score).toFixed(2)}</td>\r\n           {\r\n                props.gradeunits.map(pr=>{\r\n                    return <th key={`4_${pr.id}`} className=\"text-center\">\r\n                            {total_score000[prop.classid] !== undefined && total_score000[prop.classid].hasOwnProperty(pr.abbrv) ? class_toggle ? total_score000[prop.classid][pr.abbrv] : pers(total_score000[prop.classid][pr.abbrv], total_score000[prop.classid]) :'-'}\r\n                        </th>\r\n                })\r\n           }\r\n       </tr>\r\n   })\r\n   let total_score10 = {};\r\n    studentscore1.forEach(ele =>{\r\n    total_score10[ele.classname] = Number(ele.score).toFixed(2)\r\n   })\r\n\r\n   let total_score2 = [];\r\n   let tabl2 = studentscore2.map((prop, ind)=>{\r\n       total_score2.push(prop.score)\r\n       return <tr key={prop.classid}>\r\n           <td>{ind + 1}</td>\r\n           <td className=\"text-center\">{prop.classname}</td>\r\n           <td className=\"text-center\">{prop.studentid}</td>\r\n           <td className=\"text-center\">{Number(prop.score).toFixed(2)}</td>\r\n           {\r\n                props.gradeunits.map(pr=>{\r\n                    return <th key={`4_${pr.id}`} className=\"text-center\">\r\n                            {total_score0000[prop.classid] !== undefined && total_score0000[prop.classid].hasOwnProperty(pr.abbrv) ?  class_toggle ? total_score0000[prop.classid][pr.abbrv] : pers(total_score0000[prop.classid][pr.abbrv], total_score0000[prop.classid]) :'-'}\r\n                        </th>\r\n                })\r\n           }\r\n       </tr>\r\n   })\r\n   let total_score20 = {};\r\n    studentscore2.forEach(ele =>{\r\n        total_score20[ele.classname] = Number(ele.score).toFixed(2)\r\n   })\r\n   \r\n   // SORT SUBJECT CLASS SCORE POPULATION\r\n   let cla_sub1 = {}\r\n   studentscore3.forEach(ele=>{\r\n        if( cla_sub1 !== undefined && cla_sub1.hasOwnProperty(ele.classid))\r\n        {\r\n            if(cla_sub1[ele.classid].hasOwnProperty(ele.subjectid))\r\n            {\r\n                let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n                if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n                {\r\n                        let nm = group[0]\r\n                        if(cla_sub1[ele.classid][ele.subjectid].hasOwnProperty(nm.abbrv))\r\n                        {\r\n                            \r\n                            cla_sub1[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n                        }else\r\n                        {\r\n                            cla_sub1[ele.classid][ele.subjectid][nm.abbrv] = []\r\n                            cla_sub1[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n                        } \r\n                }\r\n            }else\r\n            {\r\n                cla_sub1[ele.classid][ele.subjectid] = {}\r\n                let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n                if(group !== undefined && Array.isArray(group)&& group[0] !== undefined )\r\n                {\r\n                        let nm = group[0]\r\n                        cla_sub1[ele.classid][ele.subjectid][nm.abbrv] = []\r\n                        cla_sub1[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n                }\r\n            }\r\n        }else\r\n        {\r\n            cla_sub1[ele.classid] = {}\r\n            cla_sub1[ele.classid][ele.subjectid] = {}\r\n            let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n            \r\n            if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n            {\r\n                \r\n                    let nm = group[0]\r\n                    cla_sub1[ele.classid][ele.subjectid][nm.abbrv] = []\r\n                    cla_sub1[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n            }\r\n        }\r\n\r\n   })\r\n   let tbl1 = Object.keys(all_claszunits).map((prp, ind)=>{\r\n    if(cla_sub1[prp] !== undefined && Array.isArray(Object.keys(cla_sub1[prp])))\r\n    {\r\n        let ig = 0;\r\n    return <><h3>{all_claszunits[prp]}</h3>\r\n       <table key={prp} width=\"100%\" border=\"2px solid\">\r\n           <thead>\r\n               <tr>\r\n                   <th className=\"text-center\">SN</th>\r\n                   <th className=\"text-center\">SUBJECT</th>\r\n                   <th className=\"text-center\" title='CLASS POPULATION'>POP</th>\r\n                   <th className=\"text-center\" title='CLASS SUBJECT AVERAGE'>AVG</th>\r\n                   {\r\n                       props.gradeunits.map(pr=>{\r\n                           return <th key={`1_${pr.id}`} className=\"text-center\">\r\n                               {pr.abbrv}\r\n                           </th>\r\n                       })\r\n                   }\r\n               </tr>\r\n           </thead>\r\n           <tbody>\r\n               {\r\n                   all_subject.map((pp, ir)=>{\r\n                       if(cla_sub1[prp] !== undefined  && cla_sub1[prp].hasOwnProperty(pp.id) && cla_sub1[prp][pp.id] !== undefined && Array.isArray(Object.keys(cla_sub1[prp][pp.id])))\r\n                       {\r\n                        ig = ig + 1;\r\n                        return <tr>\r\n                            <td className=\"text-center\">{ig}</td>\r\n                            <td style={{textTransform:'capitalize'}}>{all_subjects[pp.id].toUpperCase()}</td>\r\n                            <td className=\"text-center\">{sum_all(cla_sub1[prp][pp.id])}</td>\r\n                            <td className=\"text-center\">{avg_all(cla_sub1[prp][pp.id])}</td>\r\n                            {\r\n                                props.gradeunits.map(pr1=>{\r\n                                    if(pr1 !== undefined )\r\n                                    {\r\n                                    return <td key={`3_${pr1.id}`} className='text-center'>\r\n                                        {cla_sub1[prp][pp.id] !== undefined && cla_sub1[prp][pp.id].hasOwnProperty(pr1.abbrv) ? sub_toggle ? compute(cla_sub1[prp][pp.id][pr1.abbrv])  : perss(compute(cla_sub1[prp][pp.id][pr1.abbrv]) , cla_sub1[prp][pp.id]) :'-'}\r\n                                    </td>\r\n                                    }\r\n                                })\r\n                            }\r\n                        </tr>\r\n                       }\r\n                   })\r\n               }\r\n           </tbody>\r\n       </table></>\r\n    }\r\n   })\r\n    \r\n   let cla_sub = {};\r\n   studentscore4.forEach(ele=>{\r\n        if( cla_sub !== undefined && cla_sub.hasOwnProperty(ele.classid))\r\n        {\r\n            if(cla_sub[ele.classid].hasOwnProperty(ele.subjectid))\r\n            {\r\n                let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n                if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n                {\r\n                        let nm = group[0]\r\n                        if(cla_sub[ele.classid][ele.subjectid].hasOwnProperty(nm.abbrv))\r\n                        {\r\n                            \r\n                            cla_sub[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n                        }else\r\n                        {\r\n                            cla_sub[ele.classid][ele.subjectid][nm.abbrv] = []\r\n                            cla_sub[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n                        } \r\n                }\r\n            }else\r\n            {\r\n                cla_sub[ele.classid][ele.subjectid] = {}\r\n                let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n                if(group !== undefined && Array.isArray(group)&& group[0] !== undefined )\r\n                {\r\n                        let nm = group[0]\r\n                        cla_sub[ele.classid][ele.subjectid][nm.abbrv] = []\r\n                        cla_sub[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n                }\r\n            }\r\n        }else\r\n        {\r\n            cla_sub[ele.classid] = {}\r\n            cla_sub[ele.classid][ele.subjectid] = {}\r\n            let group = props.gradeunits.filter(el=>parseFloat(ele.score) > parseFloat(el.minscore)  && parseFloat(ele.score) <= parseFloat(el.maxscore)  )\r\n            \r\n            if(group !== undefined && Array.isArray(group) && group[0] !== undefined )\r\n            {\r\n                \r\n                    let nm = group[0]\r\n                    cla_sub[ele.classid][ele.subjectid][nm.abbrv] = []\r\n                    cla_sub[ele.classid][ele.subjectid][nm.abbrv].push(ele.score)\r\n            }\r\n        }\r\n   })\r\n  \r\n   let tbl = Object.keys(all_claszs).map((prp, ind)=>{\r\n    if(cla_sub[prp] !== undefined && Array.isArray(Object.keys(cla_sub[prp])))\r\n    {\r\n        let ig = 0;\r\n    return <><h3 key={ind}>{all_claszs[prp]}</h3>\r\n       <table key={prp} width=\"100%\" border=\"2px solid\">\r\n           <thead>\r\n               <tr>\r\n                   <th className=\"text-center\">SN</th>\r\n                   <th className=\"text-center\">SUBJECT</th>\r\n                   <th className=\"text-center\" title='CLASS POPULATION'>POP</th>\r\n                   <th className=\"text-center\" title='CLASS SUBJECT AVERAGE'>AVG</th>\r\n                   {\r\n                       props.gradeunits.map(pr=>{\r\n                           return <th key={`1_${pr.id}`} className=\"text-center\">\r\n                               {pr.abbrv}\r\n                           </th>\r\n                       })\r\n                   }\r\n               </tr>\r\n           </thead>\r\n           <tbody>\r\n               {\r\n                   \r\n                   all_subject.map((pp, ir)=>{\r\n                       if(cla_sub[prp] !== undefined && cla_sub[prp][pp.id] !== undefined && Array.isArray(Object.keys(cla_sub[prp][pp.id])))\r\n                       {\r\n                        ig = ig + 1;\r\n                        return <tr>\r\n                            <td className=\"text-center\">{ig}</td>\r\n                            <td style={{textTransform:'capitalize'}}>{all_subjects[pp.id].length > 0 ? all_subjects[pp.id].toUpperCase():'--'}</td>\r\n                            <td className=\"text-center\">{sum_all(cla_sub[prp][pp.id])}</td>\r\n                            <td className=\"text-center\">{avg_all(cla_sub[prp][pp.id])}</td>\r\n                            {\r\n                                props.gradeunits.map(pr1=>{\r\n                                    if(pr1 !== undefined){\r\n                                    return <td key={`3_${pr1.id}`} className='text-center'>\r\n                                        {cla_sub[prp][pp.id] !== undefined && cla_sub[prp][pp.id].hasOwnProperty(pr1.abbrv)? sub_toggle ? compute(cla_sub[prp][pp.id][pr1.abbrv])  : perss(compute(cla_sub[prp][pp.id][pr1.abbrv]) , cla_sub[prp][pp.id])  :'-'}\r\n                                    </td>\r\n                                    }\r\n                                })\r\n                            }\r\n                        </tr>\r\n                       }\r\n                   })\r\n               }\r\n           </tbody>\r\n       </table></>\r\n    }\r\n   })\r\n\r\n  return (\r\n    <>\r\n    <CRow className=\"sheet padding-5mm m-0 p-0\">\r\n       <CCol>\r\n          <CCard >\r\n            <CCardBody>\r\n            <CRow>\r\n            <CCol sm=\"5\">\r\n  <h4 id=\"traffic\" className=\"card-title mb-0\">{rep !== undefined && Object.keys(rep).length > 0 ? rep.title : 'Academic Report' }</h4>\r\n                <div className=\"small text-muted\">{moment(new Date()).format('MMMM YYYY')}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-print-none d-md-block\">\r\n              \r\n              <CButtonGroup className=\"float-right mr-3\">\r\n                {\r\n                  props.reports.map(value => (\r\n                    <CButton\r\n                      color=\"outline-dark\"\r\n                      key={value.id}\r\n                      value={JSON.stringify(value)}\r\n                      className=\"mx-0\"\r\n                      onClick={(e)=>loadreport(e.target.value)}\r\n                    >\r\n                      {value.title}\r\n                    </CButton>\r\n                  ))\r\n                }\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n\r\n              <CRow>\r\n              <CCol xs=\"12\" md=\"12\" xl=\"12\"></CCol>\r\n              </CRow>\r\n              <br />\r\n              {rep !== undefined && Object.keys(rep).length > 0 ? \r\n            <CTabs className=\"m-0 p-0\">\r\n              <CNav variant=\"tabs\" className=\"d-print-none\">\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Charts\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    School Analysis\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Class Analysis\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Subject Analysis\r\n                  </CNavLink>\r\n                </CNavItem>\r\n              </CNav>\r\n              <CTabContent>\r\n                <CTabPane>\r\n                  <CRow xs={12}>\r\n                      <CCol xs={12}>\r\n                          <CRow className=\"text-center\" xs=\"12\" sm=\"12\" md=\"12\">\r\n                                {/* school percentsge */}\r\n                                <CCol xs={6}>\r\n                                    <CRow xs={12}>\r\n                                        <CCol xs={12}><h5>SCHOOL AVERAGE</h5></CCol>\r\n                                        <CCol xs={12}><h1 style={{fontFamily:'Julius Sans One'}}>{avg(total_score0)}</h1></CCol>\r\n                                    </CRow>\r\n                                </CCol>\r\n                                <CCol xs={6}>\r\n                                    <CRow xs={12}>\r\n                                        <CCol xs={12}><h5>SCHOOL POPULATION</h5></CCol>\r\n                                        <CCol xs={12}><h1 style={{fontFamily:'Julius Sans One'}}>{cnt(total_score0)}</h1></CCol>\r\n                                    </CRow>\r\n                                </CCol>\r\n                          </CRow>\r\n                          <CRow className='text-center ' xs=\"12\" sm=\"12\" md=\"12\">\r\n                          <h4>GRADES CHART</h4>\r\n                                {/* school grading chart */}\r\n                                <CCol className=\"text-center\" xs=\"12\" sm=\"12\" md=\"12\">\r\n                                    <CCardBody style={{width:'100%'}} className=\"text-center mw-100 align-items-center\" xs=\"12\" sm=\"12\" md=\"12\">\r\n                                    <CChartLine\r\n                                        type=\"barchart\"\r\n\r\n                                        datasets={[\r\n                                            {\r\n                                            data: Object.values(total_score00),\r\n                                            label: 'student',\r\n                                            backgroundColor: 'rgba(255,99,132,0.2)',\r\n                                            borderColor: 'rgba(255,99,132,1)',\r\n                                            borderWidth: 4,\r\n                                            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                                            hoverBorderColor: 'rgba(255,99,132,1)',\r\n                                            }\r\n                                        ]}\r\n                                        labels={Object.keys(total_score00)}\r\n                                        options={{\r\n                                        tooltips: {\r\n                                            enabled: true\r\n                                        }\r\n                                        }}\r\n                                    />\r\n                                    </CCardBody>\r\n                                </CCol>\r\n                                \r\n                          </CRow>\r\n                          <CRow>\r\n                          <h4>CLASS UNIT AVERAGES</h4>\r\n                                {/* class averages chart */}\r\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                                    <CCardBody>\r\n                                    <CChartBar\r\n                                        type=\"barchart\"\r\n                                        datasets={[\r\n                                            {\r\n                                            data: Object.values(total_score10),\r\n                                            label: 'Average',\r\n                                            backgroundColor: 'rgba(0,128,128,0.4)',\r\n                                            borderColor: 'rgba(0,128,128, 1)',\r\n                                            borderWidth: 4,\r\n                                            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                                            hoverBorderColor: 'rgba(255,99,132,1)',\r\n                                            }\r\n                                        ]}\r\n                                        labels={Object.keys(total_score10)}\r\n                                        options={{\r\n                                        tooltips: {\r\n                                            enabled: true\r\n                                        }\r\n                                        }}\r\n                                    />\r\n                                    </CCardBody>\r\n                                </CCol>\r\n                          </CRow>\r\n                          <CRow>\r\n                              <h4>CLASS AVERAGES</h4>\r\n                                {/* arm averages chart */}\r\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                                    <CCardBody>\r\n                                    <CChartBar\r\n                                        type=\"barchart\"\r\n                                        datasets={[\r\n                                            {\r\n                                            data: Object.values(total_score20),\r\n                                            label: 'Average',\r\n                                            backgroundColor: 'rgba(128,0,0,0.4)',\r\n                                            borderColor: 'rgba(128,0,0,1)',\r\n                                            borderWidth: 4,\r\n                                            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                                            hoverBorderColor: 'rgba(255,99,132,1)',\r\n                                            }\r\n                                        ]}\r\n                                        labels={Object.keys(total_score20)}\r\n                                        options={{\r\n                                        tooltips: {\r\n                                            enabled: true\r\n                                        }\r\n                                        }}\r\n                                    />\r\n                                    </CCardBody>\r\n                                </CCol>\r\n                          </CRow>\r\n                      </CCol>\r\n                  </CRow>\r\n                </CTabPane>\r\n                <CTabPane>\r\n                <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                <CCardBody>\r\n                    <table width=\"100%\" border=\"2px solid\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\">SN</th>\r\n                                <th className=\"text-center\">STUDENT NAME</th>\r\n                                <th className=\"text-center\">CLASS</th>\r\n                                <th className=\"text-center\">SUBJECTS</th>\r\n                                <th className=\"text-center\">STUDENT <br/>AVERAGE</th>                                          \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tabl0}\r\n                        </tbody>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>SN</th>\r\n                                <th>SCHOOL AVERAGE</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th className=\"text-center\">{avg(total_score0)}</th>\r\n                            </tr>\r\n                        </thead>\r\n                    </table>\r\n                \r\n                </CCardBody>\r\n              </CCol>             \r\n                </CTabPane>\r\n                <CTabPane>\r\n                <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                <CRow>\r\n                    <CCol sm=\"9\">\r\n                        <h4 id=\"traffic\" className=\"card-title mb-0\">Class Analysis (Students Performance)</h4>\r\n                        <div className=\"small text-muted\">{class_toggle  ? ' Population' : ' Percentage' }</div>\r\n                    </CCol>\r\n                    <CCol sm=\"3\" className=\"d-none d-md-block d-print-none\">\r\n                    <CTooltip content='Toggle between propulation and percentages' >\r\n                    <CButton color=\"primary\" className=\"float-right\" onClick={()=>setclass_toggle(prev=>!prev)}>\r\n                        <CIcon name=\"cil-loop\"/>\r\n                    </CButton>\r\n                    </CTooltip>\r\n                    </CCol>\r\n                </CRow>\r\n\r\n                <CCardBody>\r\n                    <CCardHeader>\r\n                        {\r\n                             props.gradeunits.map(pr=>{\r\n                                return <th key={`5_${pr.id}`} className=\"text-center\">\r\n                                    <span className=\"badge badge-secondary\">{`${pr.abbrv}- > ${pr.name} (${Number(pr.minscore).toFixed(0)}-${pr.maxscore})`}</span>\r\n                                </th>\r\n                            })\r\n                        }\r\n                    </CCardHeader>\r\n                    <table width=\"100%\" border=\"2px solid\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"text-center\">SN</th>\r\n                                    <th className=\"text-center\">CLASS NAME</th>\r\n                                    <th className=\"text-center\">POP.</th>\r\n                                    <th className=\"text-center\">AVERAGE</th>\r\n                                    {\r\n                                        props.gradeunits.map(pr=>{\r\n                                            return <th key={`5_${pr.id}`} className=\"text-center\">\r\n                                                {pr.abbrv}\r\n                                            </th>\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {tabl1}\r\n                            </tbody>\r\n                        \r\n                        </table>\r\n                </CCardBody>\r\n              </CCol>   \r\n              <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n              <CCardBody>\r\n              <CCardHeader>\r\n                        {\r\n                             props.gradeunits.map(pr=>{\r\n                                return <th key={`5_${pr.id}`} className=\"text-center\">\r\n                                    <span className=\"badge badge-secondary\">{`${pr.abbrv}- > ${pr.name} (${Number(pr.minscore).toFixed(0)}-${pr.maxscore})`}</span>\r\n                                </th>\r\n                            })\r\n                        }\r\n                    </CCardHeader>\r\n                    <table width=\"100%\" border=\"2px solid\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\">SN</th>\r\n                                <th className=\"text-center\">CLASS NAME</th>\r\n                                <th className=\"text-center\">POP.</th>\r\n                                <th className=\"text-center\">AVERAGE</th>\r\n                                {\r\n                                    props.gradeunits.map(pr=>{\r\n                                        return <th key={`5_${pr.id}`} className=\"text-center\">\r\n                                            {pr.abbrv}\r\n                                        </th>\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tabl2}\r\n                        </tbody>\r\n                        \r\n                    </table>\r\n                \r\n                </CCardBody>\r\n              </CCol>                             \r\n                </CTabPane>\r\n                <CTabPane>\r\n                <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                <CRow>\r\n                    <CCol sm=\"9\">\r\n                        <h4 id=\"traffic\" className=\"card-title mb-0\">Class Analysis (Subjects Performance)</h4>\r\n                        <div className=\"small text-muted\">{sub_toggle  ? ' Population' : ' Percentage' }</div>\r\n                    </CCol>\r\n                    <CCol sm=\"3\" className=\"d-none d-md-block d-print-none\">\r\n                    <CTooltip content='Toggle between propulation and percentages' >\r\n                    <CButton color=\"primary\" className=\"float-right\" onClick={()=>setsub_toggle(prev=>!prev)}>\r\n                        <CIcon name=\"cil-loop\"/>\r\n                    </CButton>\r\n                    </CTooltip>\r\n                    </CCol>\r\n                </CRow>\r\n               </CCol>\r\n              <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                  <CCardBody>\r\n                      {tbl}      \r\n                  </CCardBody>\r\n                  <CCardFooter>\r\n                        {\r\n                             props.gradeunits.map(pr=>{\r\n                                return <th key={`5_${pr.id}`} className=\"text-center\">\r\n                                    <span className=\"badge badge-secondary\">{`${pr.abbrv}- > ${pr.name} (${Number(pr.minscore).toFixed(0)}-${pr.maxscore})`}</span>\r\n                                </th>\r\n                            })\r\n                        }\r\n                    </CCardFooter>\r\n               </CCol>\r\n               <CCol xs=\"12\" sm=\"12\" md=\"12\">\r\n                  <CCardBody>\r\n                      {tbl1}\r\n                  </CCardBody>\r\n                  <CCardFooter>\r\n                        {\r\n                             props.gradeunits.map(pr=>{\r\n                                return <th key={`5_${pr.id}`} className=\"text-center\">\r\n                                    <span className=\"badge badge-secondary\">{`${pr.abbrv}- > ${pr.name} (${Number(pr.minscore).toFixed(0)}-${pr.maxscore})`}</span>\r\n                                </th>\r\n                            })\r\n                        }\r\n                    </CCardFooter>\r\n                </CCol>\r\n            \r\n                </CTabPane>\r\n              </CTabContent>\r\n            </CTabs>\r\n         \r\n      \r\n         :'' }\r\n             </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n    \r\n    </CRow>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    reports: state.reportReducer.reports,\r\n    user: state.userReducer,\r\n    studentscore : state.studentscoreReducer.studentscoresummary,\r\n    gradeunits:state.gradeunitReducer.gradeunits,\r\n    subjects:state.subjectReducer.subjects,\r\n    claszs:state.claszReducer.claszs,\r\n    claszunits:state.claszunitReducer.claszunits\r\n  })\r\nexport default connect(mapStateToProps,\r\n    {\r\n    getReports, \r\n    getStudentscoreSummary, \r\n    getGradeunits,\r\n    getClaszunits,\r\n    getClaszs,\r\n    getSubjects\r\n})(Dashboards)\r\n  \r\n  \r\n","\r\nimport React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { getUserDatas, getUserSchools, getUserTerms, getUserdropdowns, settSchool, settTerm} from './../../actions/user'\r\nimport StaffDashboardMenu from './StaffDashboardMenu';\r\nimport StaffDashboardSchool from './StaffDashboardSchool';\r\nimport StaffDashboardSession from './StaffDashboardSession';\r\nimport Birthdays from \"./Birthdays\"\r\nimport Notice from \"./Notice\"\r\nimport SchoolData from \"./../setting/SchoolData\"\r\nimport Search from './Search';\r\nimport ClassPopulation from './Dasboard/ClassPopulation';\r\nimport Staffsubject from './../setting/Stage/Staffsubject1'\r\nimport Themes from './Subjects/Theme'\r\nimport ClassFee from './Dasboard/ClassFee';\r\nimport { \r\n  CCol, \r\n  CCollapse, \r\n  CRow,\r\n  CBadge,\r\n  CCard,\r\n  CCardHeader,\r\n  CTabs,\r\n  CTabPane,\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CCardBody\r\n} from '@coreui/react';\r\nimport ClassAttendance from './Dasboard/ClassAttendance';\r\nimport ClassAcademics from './Dasboard/ClassAcademics';\r\nconst Dashboard = (props) => {\r\n  const [schools, setSchools] = useState({})\r\n  const [showmenu, setShowmenu] = useState(false)\r\n\r\nuseEffect(() => {\r\n  //load dropdowns\r\n  let did = props.user.activeschool !== undefined && props.user.activeschool.hasOwnProperty('id') && parseInt(props.user.activeschool.id) > 0 ? props.user.activeschool.id :'null'\r\n  let tid = props.user.activeschool !== undefined && props.user.activeschool.hasOwnProperty('typeid') && parseInt(props.user.activeschool.typeid) > 0 ? props.user.activeschool.typeid :'null'\r\n  \r\n  let params = {\r\n    data:JSON.stringify(\r\n    {\r\n        'schoolid':did,\r\n        'typeid':tid\r\n    }),\r\n    cat:'dropdowns',\r\n    table:'access',\r\n    narration:'get all dropdowns'\r\n    }\r\n    props.getUserdropdowns(params)\r\n  let params1 = {\r\n      data:JSON.stringify(\r\n      {\r\n          'schoolid':did\r\n      }),\r\n      cat:'accessterms',\r\n      table:'access',\r\n      narration:'get current term'\r\n      }\r\n      props.getUserTerms(params1)\r\n    \r\n}, [props.user.mid, props.user.activeschool.id, props.user.activeschool.typeid ])\r\n\r\nuseEffect(() => {\r\n  //load staff schools\r\n  let params = {\r\n    data:JSON.stringify(\r\n    {\r\n        'schools':props.user.myschools.join(',')\r\n    }),\r\n    cat:'schoolaccess',\r\n    table:'schools',\r\n    narration:'get all schools'\r\n    }\r\n    props.getUserSchools(params)\r\n}, [props.user.mid, props.user.myschools])\r\n\r\nuseEffect(() => {\r\n  //load staff subjects and class\r\n  let params = {\r\n    data:JSON.stringify(\r\n    {\r\n        'sessionid':props.user.activeterm.sessionid,\r\n        'termid':props.user.activeterm.termid,\r\n        'staffid':props.user.mid\r\n    }),\r\n    cat:'dataaccess',\r\n    table:'access',\r\n    narration:'get all schools'\r\n    }\r\n    getUserDatas(params)\r\n  \r\n    \r\n}, [props.user.mid, props.user.activeterm.termid, props.user.activeterm.sessionid]);\r\n\r\nlet dt = props.user.dropdowns && Array.isArray(props.user.dropdowns) ? props.user.dropdowns : [[], []];\r\n\r\nconst changeSchool = (data) =>{\r\n      props.settSchool(data)\r\n}\r\nconst changeTerm = (data) =>{\r\n      props.settTerm(data)\r\n}\r\nconst changeMenu = () =>{\r\n      setShowmenu(prev=>!prev);\r\n}\r\n//IF NO SCHOOL IS SET SET ACTIVE SCHOOL AUTOMATICALY\r\nif(!props.user.activeschool.hasOwnProperty('id') ||  props.user.activeschool === undefined )\r\n{\r\n  let myCurrentSchool = props.user.user !== undefined && props.user.user !== null && props.user.user.hasOwnProperty('schoolid') && parseInt(props.user.user.schoolid) > 0 ? props.user.user.schoolid :'null'\r\n  if(parseInt(myCurrentSchool) > 0)\r\n  {\r\n      let sd = props.user.mySchoolData !== null && props.user.user !== undefined && Array.isArray(props.user.mySchoolData) ? props.user.mySchoolData.filter(rw =>rw !== null).filter(rw=>parseInt(rw.id) === parseInt(myCurrentSchool)):[]\r\n      if(sd.length > 0)\r\n      {\r\n        changeSchool(sd[0])\r\n      }\r\n  }else\r\n  {\r\n    //changeSchool(props.user.mySchoolData[0])\r\n  }\r\n}\r\nlet schdata = props.user.mySchoolData !== undefined && Array.isArray(props.user.mySchoolData) ? props.user.mySchoolData :[]\r\n\r\nreturn (\r\n    <>\r\n    <CRow>\r\n    <CCol  className=\"print A4\">\r\n    <StaffDashboardSession \r\n        activeterm={props.user.activeterm}\r\n        activeschool={props.user.activeschool}\r\n        schools={schdata}\r\n        changeSchool={(data)=>changeSchool(data)}\r\n        toggleMenu={changeMenu}\r\n      />  \r\n    <CCollapse\r\n      show={showmenu}\r\n      >\r\n      <StaffDashboardSchool \r\n          schools={schdata}\r\n          changeSchool={(data)=>changeSchool(data)}\r\n      />\r\n      <StaffDashboardMenu \r\n        dropdowns={dt}\r\n        schools={schdata}\r\n        changeSchool={(data)=>changeSchool(data)}\r\n        changeTerm={(data)=>changeTerm(data)}\r\n      />\r\n      </CCollapse>\r\n    \r\n    <CRow>\r\n    <CCol xs=\"12\" md=\"12\" className=\"mb-4 d-print\">\r\n        <CCard className=\"m-0 p-0\">\r\n          <CCardBody className=\"m-0 p-0\">\r\n            <CTabs className=\"d-print-none\">\r\n              <CNav variant=\"tabs\" className=\"d-print-none\">\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Home\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Class\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Fee\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Attendance\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Academics\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Scheme\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Class Allocation\r\n                  </CNavLink>\r\n                </CNavItem>\r\n              </CNav>\r\n              <CTabContent>\r\n                <CTabPane>\r\n                    <SchoolData school={props.user.activeschool} />\r\n                </CTabPane>\r\n                <CTabPane>\r\n                  <ClassPopulation \r\n                      sessionid={props.user.activeterm.sessionid} \r\n                      termid={props.user.activeterm.termid}/>\r\n                </CTabPane>\r\n                <CTabPane>\r\n                  <ClassFee \r\n                    sessionid={props.user.activeterm.sessionid} \r\n                    termid={props.user.activeterm.termid}/>\r\n                </CTabPane>\r\n                <CTabPane>\r\n                  <ClassAttendance\r\n                    sessionid={props.user.activeterm.sessionid} \r\n                    termid={props.user.activeterm.termid}/>\r\n\r\n                </CTabPane>\r\n                <CTabPane className=\"m-0 p-0 \">\r\n                  <ClassAcademics\r\n                    sessionid={props.user.activeterm.sessionid} \r\n                    termid={props.user.activeterm.id} />\r\n                </CTabPane>\r\n                <CTabPane>\r\n                  <Themes />\r\n                </CTabPane>\r\n                <CTabPane>\r\n                  <Staffsubject\r\n                      pid={1}\r\n                      para={{'icon':process.env.PUBLIC_URL + '/icons/subject.png'}}\r\n                      title={props.user.activeterm}\r\n                      school={props.user.activeschool} \r\n                      termid={props.user.activeterm.termid}\r\n                      sessionid={props.user.activeterm.sessionid}\r\n                      clientid={props.user.user.id}\r\n                      subject={[]}\r\n                    />\r\n                </CTabPane>\r\n              </CTabContent>\r\n            </CTabs>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n      </CCol>\r\n      <CCol  sm={12} sm={3} className=\"d-print-none d-xs-none\">\r\n        <Search />\r\n        <Birthdays />\r\n        <Notice />\r\n      </CCol>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  activeTerm : state.termReducer.activeTerm,\r\n  user : state.userReducer,\r\n\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getUserDatas,\r\n  getUserSchools,\r\n  getUserTerms,\r\n  getUserdropdowns,\r\n  settSchool,\r\n  settTerm\r\n\r\n})(Dashboard)","import axios from 'axios';\r\nimport {\r\n    STUDENTSCORE_GET_ONE,\r\n    STUDENTSCORE_GET_MULTIPLE,\r\n    STUDENTSCORE_GET_MULTIPLE_CA,\r\n    STUDENTSCORE_DELETE_CA,\r\n    STUDENTSCORE_GET_SUMMARY,\r\n    STUDENTSCORE_GET_SINGLE,\r\n    STUDENTSCORE_REGISTER_SUCCESS,\r\n    STUDENTSCORE_REGISTER_FAIL,\r\n    STUDENTSCORE_REGISTER_CA,\r\n    STUDENTSCORE_REGISTER_CA_FAIL,\r\n    STUDENTSCORE_LOADING,\r\n    STUDENTSCORE_LOADING_ERROR,\r\n    STUDENTSCORE_UPDATE_SUCCESS,\r\n    STUDENTSCORE_SET_SUCCESS,\r\n    STUDENTSCORE_SET_FAIL,\r\n    STUDENTSCORE_SET_LOAD,\r\n    STUDENTSCORE_UPDATE_FAIL,\r\n    STUDENTSCORE_DELETE_SUCCESS,\r\n    STUDENTSCORE_DELETE_FAIL\r\n} from \"./../../types/student/studentscore\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL STUDENTSCORE \r\nexport const getStudentscores = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTSCORE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTSCORE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTSCORE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTSCORE \r\nexport const getStudentscorecas = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n        params.token = MAIN_TOKEN;\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTSCORE_GET_MULTIPLE_CA,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTSCORE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTSCORE \r\nexport const getStudentscoreSummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTSCORE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTSCORE_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTSCORE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTSCORE \r\nexport const getStudentscoresSingle = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTSCORE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTSCORE_GET_SINGLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTSCORE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENTSCORE \r\nexport const getStudentscore = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTSCORE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENTSCORE DELETE\r\nexport const deleteStudentscore = (params, id) => (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTSCORE_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTSCORE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTSCORE REGISTER\r\nexport const registerStudentscore = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTSCORE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTSCORE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STUDENTSCORE REGISTER\r\nexport const insertStudentca = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTSCORE_REGISTER_CA,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTSCORE_REGISTER_CA_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STUDENTSCORE REGISTER\r\nexport const deleteStudentca = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTSCORE_DELETE_CA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTSCORE_REGISTER_CA_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENTSCORE UPDATE\r\nexport const updateStudentscore = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTSCORE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTSCORE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STUDENTSCORE UPDATE\r\nexport const setStudentscore = (data) => (dispatch, getState) => {\r\n    //body\r\n    dispatch({type : STUDENTSCORE_SET_LOAD});\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTSCORE_SET_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTSCORE_SET_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};","import axios from 'axios';\r\nimport {\r\n    STUDENTCLASS_GET_ONE,\r\n    STUDENTCLASS_GET_MULTIPLE,\r\n    STUDENTCLASS_GET_SUMMARY,\r\n    STUDENTCLASS_REGISTER_SUCCESS,\r\n    STUDENTCLASS_REGISTER_FAIL,\r\n    STUDENTCLASS_LOADING,\r\n    STUDENTCLASS_LOADING_ERROR,\r\n    STUDENTCLASS_UPDATE_SUCCESS,\r\n    STUDENTCLASS_UPDATE_FAIL,\r\n    STUDENTCLASS_DELETE_SUCCESS,\r\n    STUDENTCLASS_DELETE_FAIL\r\n} from \"./../../types/student/studentclass\";\r\n\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL STUDENTCLASS \r\nexport const getStudentclasss = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTCLASS_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTCLASS_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTCLASS_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\n//GET ALL STUDENTCLASS \r\nexport const getStudentclassSummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTCLASS_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTCLASS_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTCLASS_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENTCLASS \r\nexport const getStudentclass = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTCLASS_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENTCLASS DELETE\r\nexport const deleteStudentclass = (params, id) => (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTCLASS_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTCLASS_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTCLASS REGISTER\r\nexport const registerStudentclass = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTCLASS_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTCLASS_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENTCLASS UPDATE\r\nexport const updateStudentclass = (data) => (dispatch, getState) => {\r\n    //body\r\n    console.log(data)\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTCLASS_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTCLASS_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STUDENTFEE_GET_ONE,\r\n    STUDENTFEE_GET_MULTIPLE,\r\n    STUDENTFEE_GET_SUMMARY,\r\n    STUDENTFEE_GET_SINGLE,\r\n    STUDENTFEE_REGISTER_SUCCESS,\r\n    STUDENTFEE_REGISTER_FAIL,\r\n    STUDENTFEE_LOADING,\r\n    STUDENTFEE_LOADING_ERROR,\r\n    STUDENTFEE_UPDATE_SUCCESS,\r\n    STUDENTFEE_SET_SUCCESS,\r\n    STUDENTFEE_SET_FAIL,\r\n    STUDENTFEE_SET_LOAD,\r\n    STUDENTFEE_UPDATE_FAIL,\r\n    STUDENTFEE_DELETE_SUCCESS,\r\n    STUDENTFEE_DELETE_FAIL\r\n} from \"./../../types/student/studentfee\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL STUDENTFEE \r\nexport const getStudentfees = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTFEE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTFEE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTFEE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTFEE \r\nexport const getStudentfeeSummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTFEE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTFEE_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTFEE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTFEE \r\nexport const getStudentfeesSingle = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTFEE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTFEE_GET_SINGLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTFEE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENTFEE \r\nexport const getStudentfee = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTFEE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENTFEE DELETE\r\nexport const deleteStudentfee = (params, id) => (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTFEE_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTFEE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTFEE REGISTER\r\nexport const registerStudentfee = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTFEE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTFEE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENTFEE UPDATE\r\nexport const updateStudentfee = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTFEE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTFEE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STUDENTFEE UPDATE\r\nexport const setStudentfee = (data) => (dispatch, getState) => {\r\n    //body\r\n    dispatch({type : STUDENTFEE_SET_LOAD});\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTFEE_SET_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTFEE_SET_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};","import axios from 'axios';\r\nimport {\r\n    STUDENTATTENDANCE_GET_ONE,\r\n    STUDENTATTENDANCE_GET_MULTIPLE,\r\n    STUDENTATTENDANCE_GET_DAILY,\r\n    STUDENTATTENDANCE_REGISTER_SUCCESS,\r\n    STUDENTATTENDANCE_REGISTER_DAILY,\r\n    STUDENTATTENDANCE_REGISTER_FAIL,\r\n    STUDENTATTENDANCE_LOADING,\r\n    STUDENTATTENDANCE_LOADING_ERROR,\r\n    STUDENTATTENDANCE_UPDATE_SUCCESS,\r\n    STUDENTATTENDANCE_UPDATE_DAILY,\r\n    STUDENTATTENDANCE_UPDATE_FAIL,\r\n    STUDENTATTENDANCE_DELETE_SUCCESS,\r\n    STUDENTATTENDANCE_DELETE_DAILY,\r\n    STUDENTATTENDANCE_DELETE_FAIL,\r\n    STUDENTATTENDANCE_GET_SUMMARY\r\n} from \"./../../types/student/studentattendance\";\r\nimport { MAIN_TOKEN, API_PATH_STUDENT, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STUDENT;\r\n\r\n//GET ALL STUDENTATTENDANCE \r\nexport const getStudentattendances = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTATTENDANCE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTATTENDANCE \r\nexport const getStudentattendanceSummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTATTENDANCE_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTATTENDANCE \r\nexport const getStudentattendancedailys = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTATTENDANCE_GET_DAILY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENTATTENDANCE \r\nexport const getStudentattendance = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTATTENDANCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//GET SINGLE STUDENTATTENDANCE \r\nexport const getStudentattendancedaily = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTATTENDANCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENTATTENDANCE DELETE\r\nexport const deleteStudentattendance = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTATTENDANCE DELETE\r\nexport const deleteStudentattendancedaily = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_DELETE_DAILY,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTATTENDANCE REGISTER\r\nexport const registerStudentattendance = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STUDENTATTENDANCE REGISTER\r\nexport const registerStudentattendancedaily = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_REGISTER_DAILY,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENTATTENDANCE UPDATE\r\nexport const updateStudentattendance = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\nexport const updateStudentattendancedaily = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_UPDATE_DAILY,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n"],"sourceRoot":""}