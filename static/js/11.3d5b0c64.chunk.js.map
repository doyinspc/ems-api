{"version":3,"sources":["actions/staff/staffexperience.js","actions/staff/staffprofessional.js","actions/staff/staffeducation.js","views/staff/StaffBio.js","views/staff/StaffLog.js","actions/staff/stafflog.js","views/staff/StaffAccess.js","views/staff/StaffReport.js","views/staff/StaffClassReport.js","views/staff/StaffSubjectReport.js","views/staff/StaffLessonPlan.js","views/staff/TheHeaderDropdown.js","actions/staff/staffleave.js","views/staff/FormLeave.js","views/staff/StaffLeave.js","actions/staff/staffjob.js","views/staff/FormLog.js","views/staff/StaffJob.js","views/staff/FormExperience.js","views/staff/StaffExperience.js","views/staff/FormProfessional.js","views/staff/StaffProfessional.js","views/staff/FormEducation.js","views/staff/StaffEducation.js"],"names":["path","API_PATH_STAFF","getStaffexperiences","params","dispatch","getState","token","MAIN_TOKEN","type","STAFFEXPERIENCE_LOADING","axios","get","axiosConfig","then","res","STAFFEXPERIENCE_GET_MULTIPLE","payload","data","catch","err","STAFFEXPERIENCE_LOADING_ERROR","deleteStaffexperience","id","post","axiosConfig1","STAFFEXPERIENCE_DELETE_SUCCESS","STAFFEXPERIENCE_DELETE_FAIL","registerStaffexperience","STAFFEXPERIENCE_REGISTER_SUCCESS","STAFFEXPERIENCE_REGISTER_FAIL","updateStaffexperience","STAFFEXPERIENCE_UPDATE_SUCCESS","STAFFEXPERIENCE_UPDATE_FAIL","getStaffprofessionals","STAFFPROFESSIONAL_LOADING","STAFFPROFESSIONAL_GET_MULTIPLE","STAFFPROFESSIONAL_LOADING_ERROR","deleteStaffprofessional","STAFFPROFESSIONAL_DELETE_SUCCESS","STAFFPROFESSIONAL_DELETE_FAIL","registerStaffprofessional","STAFFPROFESSIONAL_REGISTER_SUCCESS","STAFFPROFESSIONAL_REGISTER_FAIL","updateStaffprofessional","STAFFPROFESSIONAL_UPDATE_SUCCESS","STAFFPROFESSIONAL_UPDATE_FAIL","getStaffeducations","STAFFEDUCATION_LOADING","STAFFEDUCATION_GET_MULTIPLE","STAFFEDUCATION_LOADING_ERROR","deleteStaffeducation","STAFFEDUCATION_DELETE_SUCCESS","STAFFEDUCATION_DELETE_FAIL","registerStaffeducation","STAFFEDUCATION_REGISTER_SUCCESS","STAFFEDUCATION_REGISTER_FAIL","updateStaffeducation","STAFFEDUCATION_UPDATE_SUCCESS","STAFFEDUCATION_UPDATE_FAIL","User","props","match","staff","title","firstname","employment_no","surname","middlename","phone1","phone2","email","address","dob","doe","dol","lga","soo","photo","nationality","officename","departmentname","designation","schoolname","gender","reason","is_active","kin1_name","kin2_name","kin1_phone1","kin1_phone2","kin2_phone1","kin2_phone2","kin1_email","kin2_email","kin1_address","kin2_address","kin1_rel","kin2_rel","nin","tin","pen","penmanagerid","className","xs","sm","md","height","width","src","process","alt","onError","e","target","onerror","style","textTransform","moment","format","parseInt","connect","state","stafflogReducer","stafflogs","user","userReducer","getStafflogs","deleteStafflog","staffid","sid","usercontrol","userview","useEffect","JSON","stringify","cat","table","narration","lg","Array","isArray","length","filter","rw","map","prop","index","date_created","locates","STAFFLOG_LOADING","STAFFLOG_GET_MULTIPLE","STAFFLOG_LOADING_ERROR","POST","STAFFLOG_DELETE_SUCCESS","STAFFLOG_DELETE_FAIL","school","schoolReducer","department","departmentReducer","getStaffs","updateStaff","getSchools","getDepartments","useState","setId","accs","setAccs","activeSchool","setActiveschool","page","setPage","setCollapser","schoolid","undefined","access","parse","handleSubmit","fd","FormData","append","loadDatax","sub","num","cl","document","getElementsByClassName","forEach","element","getElementsByTagName","ele","v","value","loadSubDataxx","checked","loadSubDatax","family","ac","console","log","schs","mySchoolData","activeSchoolNameArray","activeSchoolName","border","chk1","hasOwnProperty","key","valign","color","name","size","defaultChecked","labelOn","labelOff","onChange","sch","el1","vnut","num1","cl1","el","vv","loadSchool","on","onClick","loadPage","controls","Object","keys","pro","pdata","sl","show","pp","ii","d","addx","addy","StaffLeave","updateStaffleave","STAFFLEAVE_UPDATE_SUCCESS","STAFFLEAVE_UPDATE_FAIL","registerStaffleave","STAFFLEAVE_REGISTER_SUCCESS","STAFFLEAVE_REGISTER_FAIL","useHistory","editid","refid","setRefid","setReason","started","setStarted","ended","setEnded","rowid","notes","htmlFor","row","column","defaultValue","placeholder","handleClose","staffleaveReducer","staffleaves","getStaffleaves","STAFFLEAVE_LOADING","STAFFLEAVE_GET_MULTIPLE","STAFFLEAVE_LOADING_ERROR","deleteStaffleave","STAFFLEAVE_DELETE_SUCCESS","STAFFLEAVE_DELETE_FAIL","status","setStatus","closed","setClosed","active","setActive","editerid","setEditerid","editerdata","setEditerdata","setEdit","showCont","loadClosed","FormLeave","prev","onMouseLeave","onMouseEnter","onMouseOver","approval","pr","ind","approved","username","Date","dateapproved","onEdit","onDelete","block","placement","variant","custom","arrr","userid","app","findIndex","push","registerStaffjob","STAFFJOB_REGISTER_SUCCESS","STAFFJOB_REGISTER_FAIL","updateStaffjob","STAFFJOB_UPDATE_SUCCESS","STAFFJOB_UPDATE_FAIL","job","setJob","edit","FormLog","onMouseLog","organisation","setOrganisation","position","setPosition","staffexperienceReducer","staffexperiences","FormExperience","instituition","setInstituition","level","setLevel","issued","setIssued","links","setLinks","evt","files","staffprofessionalReducer","staffprofessionals","FormProfessional","imgx","checkImage","href","setSchool","course","setCourse","grade","setGrade","result","setResult","linked","setLinked","setElement","starray","lgarray","staffeducationReducer","staffeducations","FormEducation"],"mappings":"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","file":"static/js/11.3d5b0c64.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    STAFFEXPERIENCE_GET_ONE,\r\n    STAFFEXPERIENCE_GET_MULTIPLE,\r\n    STAFFEXPERIENCE_REGISTER_SUCCESS,\r\n    STAFFEXPERIENCE_REGISTER_FAIL,\r\n    STAFFEXPERIENCE_LOADING,\r\n    STAFFEXPERIENCE_LOADING_ERROR,\r\n    STAFFEXPERIENCE_UPDATE_SUCCESS,\r\n    STAFFEXPERIENCE_UPDATE_FAIL,\r\n    STAFFEXPERIENCE_DELETE_SUCCESS,\r\n    STAFFEXPERIENCE_DELETE_FAIL\r\n} from \"./../../types/staff/staffexperience\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFEXPERIENCE \r\nexport const getStaffexperiences = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFEXPERIENCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFEXPERIENCE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFEXPERIENCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFEXPERIENCE \r\nexport const getStaffexperience = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFEXPERIENCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFEXPERIENCE DELETE\r\nexport const deleteStaffexperience = (params, id) => (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFEXPERIENCE_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFEXPERIENCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFEXPERIENCE REGISTER\r\nexport const registerStaffexperience = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFEXPERIENCE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFEXPERIENCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFEXPERIENCE UPDATE\r\nexport const updateStaffexperience = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFEXPERIENCE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFEXPERIENCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STAFFPROFESSIONAL_GET_ONE,\r\n    STAFFPROFESSIONAL_GET_MULTIPLE,\r\n    STAFFPROFESSIONAL_REGISTER_SUCCESS,\r\n    STAFFPROFESSIONAL_REGISTER_FAIL,\r\n    STAFFPROFESSIONAL_LOADING,\r\n    STAFFPROFESSIONAL_LOADING_ERROR,\r\n    STAFFPROFESSIONAL_UPDATE_SUCCESS,\r\n    STAFFPROFESSIONAL_UPDATE_FAIL,\r\n    STAFFPROFESSIONAL_DELETE_SUCCESS,\r\n    STAFFPROFESSIONAL_DELETE_FAIL\r\n} from \"./../../types/staff/staffprofessional\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFPROFESSIONAL \r\nexport const getStaffprofessionals = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFPROFESSIONAL_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFPROFESSIONAL_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFPROFESSIONAL_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFPROFESSIONAL \r\nexport const getStaffprofessional = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFPROFESSIONAL_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFPROFESSIONAL DELETE\r\nexport const deleteStaffprofessional = (params, id) => (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFPROFESSIONAL_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFPROFESSIONAL_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFPROFESSIONAL REGISTER\r\nexport const registerStaffprofessional = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFPROFESSIONAL_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFPROFESSIONAL_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFPROFESSIONAL UPDATE\r\nexport const updateStaffprofessional = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFPROFESSIONAL_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFPROFESSIONAL_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STAFFEDUCATION_GET_ONE,\r\n    STAFFEDUCATION_GET_MULTIPLE,\r\n    STAFFEDUCATION_REGISTER_SUCCESS,\r\n    STAFFEDUCATION_REGISTER_FAIL,\r\n    STAFFEDUCATION_LOADING,\r\n    STAFFEDUCATION_LOADING_ERROR,\r\n    STAFFEDUCATION_UPDATE_SUCCESS,\r\n    STAFFEDUCATION_UPDATE_FAIL,\r\n    STAFFEDUCATION_DELETE_SUCCESS,\r\n    STAFFEDUCATION_DELETE_FAIL\r\n} from \"./../../types/staff/staffeducation\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFEDUCATION \r\nexport const getStaffeducations = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFEDUCATION_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFEDUCATION_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFEDUCATION_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFEDUCATION \r\nexport const getStaffeducation = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFEDUCATION_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFEDUCATION DELETE\r\nexport const deleteStaffeducation = (params, id )=> (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFEDUCATION_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFEDUCATION_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFEDUCATION REGISTER\r\nexport const registerStaffeducation = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFEDUCATION_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFEDUCATION_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFEDUCATION UPDATE\r\nexport const updateStaffeducation = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFEDUCATION_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFEDUCATION_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport moment from 'moment';\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CDropdownDivider, CContainer, CCardFooter } from '@coreui/react';\r\nimport { getStaff } from './../../actions/staff/staff';\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\n\r\nconst User = (props, {match}) => {\r\n  const {\r\n    id,\r\n    title,\r\n    employment_no,\r\n    firstname,\r\n    surname,\r\n    middlename,\r\n    phone1,\r\n    phone2,\r\n    email,\r\n    address,\r\n    dob,\r\n    doe,\r\n    dol,\r\n    lga,\r\n    soo,\r\n    photo,\r\n    nationality,\r\n    officename,\r\n    designation,\r\n    departmentname,\r\n    schoolname,\r\n    gender,\r\n    reason,\r\n    is_active,\r\n    kin1_name,\r\n    kin2_name,\r\n    kin1_phone1,\r\n    kin1_phone2,\r\n    kin2_phone1,\r\n    kin2_phone2,\r\n    kin1_email,\r\n    kin2_email,\r\n    kin1_address,\r\n    kin2_address,\r\n    kin1_rel,\r\n    kin2_rel,\r\n    nin,\r\n    tin,\r\n    pen,\r\n    penmanagerid\r\n    } = props.staff || {};\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardBody>\r\n              <CRow>\r\n                <CCol className='text-center' xs={12} sm={6} md={3}>\r\n                  <img\r\n                    height='250px'\r\n                    width='200px'\r\n                    src={process.env.REACT_APP_SERVER_URL+ photo} \r\n                    alt={surname}\r\n                    onError={(e)=>{e.target.onerror=null; e.target.src='icons/profile_2.png'} }\r\n                  />\r\n                </CCol >\r\n                <CCol className='text-center' xs={12} sm={6} md={9}>\r\n                  <CRow xs={12}>\r\n                  <CCol xs={12}>\r\n                    <CContainer className=\"table  table-hover text-left\">\r\n                      <CRow><CCol>\r\n                        <CRow className='p-2'><CCol xs={4}><i className='fa fa-user-circle'></i> Fullname</CCol><CCol><strong style={{textTransform:'capitalize'}}>{`${title} ${surname} ${firstname} ${middlename}`}</strong></CCol></CRow>\r\n                        <CRow className='p-2'><CCol xs={4}><i className='fa fa-calendar-o'></i> Date of Birth</CCol><CCol><strong>{`${moment(dob).format('MMM DD, YYYY') !== 'Invalid date'? moment(dob).format('MMM DD, YYYY'):'--.--.--' }`}</strong></CCol></CRow>\r\n                        <CRow className='p-2'><CCol xs={4}><i className='fa fa-street-view'></i> Gender</CCol><CCol><strong style={{textTransform:'capitalize'}}>{`${gender}`}</strong></CCol></CRow>\r\n                        <CRow className='p-2'><CCol xs={4}><i className='fa fa-map'></i> Origin</CCol><CCol><strong style={{textTransform:'capitalize'}}>{`${lga} ${soo} ${nationality}`}</strong></CCol></CRow>\r\n                        <CRow className='p-2'><CCol xs={4}><i className='fa fa-phone'></i> Contact</CCol><CCol><strong >{`${phone1} ${phone2} ${email}`}</strong></CCol></CRow>\r\n                        <CRow className='p-2'><CCol xs={4}><i className='fa fa-map-marker'></i> Address</CCol><CCol><strong style={{textTransform:'capitalize'}}>{`${address}`}</strong></CCol></CRow> \r\n                        </CCol></CRow>\r\n                    </CContainer>\r\n                </CCol>\r\n                </CRow>\r\n               </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol>\r\n                  <table className=\"table table-hover text-left\">\r\n                    <tbody>\r\n                      <tr><td><i className='fa fa-university'></i> School</td><td><strong>{schoolname}</strong></td></tr>\r\n                      <tr><td><i className='fa fa-id-badge'></i> Department</td><td><strong>{departmentname}</strong></td></tr>\r\n                      <tr><td><i className='fa fa-fax'></i> Level</td><td><strong>{officename}</strong></td></tr>\r\n                      <tr><td><i className='fa fa-calendar-o'></i> Date of Employment</td><td><strong>{`${moment(doe).format('MMM DD, YYYY')}`}</strong></td></tr>\r\n                      <tr><td><i className='fa fa-pied-piper-alt'></i> Status</td><td>{parseInt(is_active) === 0 ? <strong className='text-success'>IN ACTIVE SERVICE</strong> : <strong className='text-danger'>{`${reason} ${moment(dol).format('MMM DD, YYYY')}`}</strong>}</td></tr>\r\n                      <tr><td><i className='fa fa-address-card'></i> National Ident. Number</td><td><strong>{nin}</strong></td></tr>\r\n                      <tr><td><i className='fa fa-address-card-o'></i> Tax Identifi. Number</td><td><strong>{tin}</strong></td></tr>\r\n                      <tr><td><i className='fa fa-fax'></i> Pension Manager</td><td><strong>{penmanagerid}{\" (\"}{pen})</strong></td></tr>\r\n                   \r\n                    </tbody>\r\n                  </table>\r\n                </CCol>\r\n              </CRow>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <CRow>\r\n      <CCol md={6} sm={6}>\r\n        <CCard  >\r\n          <CCardHeader>\r\n            <strong><i className='fa fa-users'></i>  Next of Kins</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n              <CContainer>\r\n                <CRow>\r\n                  <CCol>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-user'></i> </CCol><CCol>{kin1_name}</CCol></CRow>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-cubes'></i> </CCol><CCol>{kin1_rel}</CCol></CRow>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-phone'></i> </CCol><CCol>{kin1_phone1} {kin1_phone2}</CCol></CRow>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-envelope'></i> </CCol><CCol>{kin1_email}</CCol></CRow>    \r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-map-marker'></i> </CCol><CCol>{kin1_address}</CCol></CRow>  \r\n                  </CCol>\r\n                  </CRow>\r\n               </CContainer> \r\n          </CCardBody>\r\n          <CCardFooter>\r\n          </CCardFooter>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol md={6} sm={6}>\r\n        <CCard  >\r\n          <CCardHeader>\r\n            <strong><i className='fa fa-users'></i>  Alternative Next of Kins</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n              <CContainer>\r\n                  <CCol md={6} sm={12}>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-user'></i> </CCol><CCol>{kin2_name}</CCol></CRow>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-cubes'></i> </CCol><CCol>{kin2_rel}</CCol></CRow>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-phone'></i> </CCol><CCol>{kin2_phone1} {kin2_phone2}</CCol></CRow>\r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-envelope'></i> </CCol><CCol>{kin2_email}</CCol></CRow>    \r\n                    <CRow xs={12}><CCol xs={2}><i className='fa fa-map-marker'></i> </CCol><CCol>{kin2_address}</CCol></CRow>  \r\n                  </CCol>\r\n              </CContainer>\r\n          </CCardBody>\r\n          <CCardFooter>\r\n          </CCardFooter>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton\r\n } from '@coreui/react';\r\nimport { getStafflogs, deleteStafflog } from './../../actions/staff/stafflog';\r\n\r\n\r\n\r\nconst StaffLog = (props, {match}) => {\r\n  const staffid = props.sid\r\n  const usercontrol = props.usercontrol\r\n  const userview = props.userview\r\n  const data = props.data\r\n  \r\n\r\n  useEffect(() => {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'staffid':staffid\r\n        }),\r\n        cat:'selectes',\r\n        \r\n        table:'stafflogs',\r\n        narration:`get all staff log with id ${staffid}`\r\n      }\r\n      props.getStafflogs(params);\r\n      \r\n  }, [staffid, props.user])\r\n\r\n  \r\n \r\n  return (\r\n    <>\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Audit History <small></small></h5>\r\n              </CCol>\r\n             \r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%'>\r\n                    {\r\n                        data && Array.isArray(data) && data.length > 0 ? data.filter(rw=>rw !==null).map((prop, index)=>{\r\n                            return (\r\n                                <tr\r\n                                > \r\n                                    <td>\r\n                                        {moment(prop.date_created).format('MMM DD, YYYY H:M:S')} \r\n                                    </td>\r\n                                    <td>\r\n                                        {prop.locates}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                </table>\r\n            </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    data : state.stafflogReducer.stafflogs,\r\n    user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, { getStafflogs, deleteStafflog})(StaffLog)\r\n","import axios from 'axios';\r\nimport {\r\n    STAFFLOG_GET_ONE,\r\n    STAFFLOG_GET_MULTIPLE,\r\n    STAFFLOG_REGISTER_SUCCESS,\r\n    STAFFLOG_REGISTER_FAIL,\r\n    STAFFLOG_LOADING,\r\n    STAFFLOG_LOADING_ERROR,\r\n    STAFFLOG_UPDATE_SUCCESS,\r\n    STAFFLOG_UPDATE_FAIL,\r\n    STAFFLOG_DELETE_SUCCESS,\r\n    STAFFLOG_DELETE_FAIL\r\n} from \"./../../types/staff/stafflog\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFLOG \r\nexport const getStafflogs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFLOG_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFLOG_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFLOG_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFLOG \r\nexport const getStafflog = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFLOG_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFLOG DELETE\r\nexport const deleteStafflog = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFLOG_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFLOG_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFLOG REGISTER\r\nexport const registerStafflog = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFLOG_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFLOG_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFLOG UPDATE\r\nexport const updateStafflog = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFLOG_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFLOG_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton,\r\n    CInputCheckbox,\r\n    CInputRadio,\r\n    CCollapse,\r\n    CSwitch,\r\n    CCardFooter\r\n } from '@coreui/react';\r\nimport { getStaffs,  updateStaff } from './../../actions/staff/staff';\r\nimport { getSchools } from './../../actions/setting/school';\r\nimport { getDepartments } from './../../actions/setting/department';\r\nimport { controls } from '../../actions/common';\r\n\r\n\r\nconst Staff = (props, {match}) => {\r\n\r\n  const [id, setId] = useState(null)\r\n  const [accs, setAccs] = useState({})\r\n  const [activeSchool, setActiveschool] = useState(0)\r\n  const [page , setPage] = useState(1)\r\n  const [collapser, setCollapser] = useState({})\r\n\r\n  useEffect(() => {\r\n    let params = {\r\n      data:JSON.stringify({}),\r\n      cat:'all',\r\n      table:'schools',\r\n      narration:`get all schools for access control`\r\n    }\r\n    props.getSchools(params);\r\n    \r\n}, [])\r\nuseEffect(() => {\r\n    let params = {\r\n      data:JSON.stringify({\r\n          schoolid:activeSchool\r\n      }),\r\n      cat:'select',\r\n      table:'departments',\r\n      narration:`pull all schools department`\r\n    }\r\n    props.getDepartments(params);\r\n    \r\n}, [activeSchool])\r\n\r\nuseEffect(() => {\r\n    if(props.data !== undefined  && props.data !== null && 'id' in props.data && parseInt(props.data.id) > 0 )\r\n    {\r\n        setId(props.data.id)\r\n        if(props.data.access !== undefined && props.data.access.length > 0 ){ setAccs(JSON.parse(props.data.access))}else{setAccs({})}\r\n    }else{\r\n        setAccs({})\r\n    }\r\n}, [props.data])\r\n\r\nconst handleSubmit = () =>{\r\n    let fd = new FormData()\r\n    fd.append('id', id);\r\n    fd.append('access', JSON.stringify(accs))\r\n    fd.append('cat', 'update');\r\n    fd.append('table', 'staffs');\r\n    fd.append('narration', 'Change Staff access level')\r\n    props.updateStaff(fd)\r\n\r\n} \r\nconst loadSchool = (e, school, num) =>{\r\n    //\r\n    let sch = num;\r\n    let ac = {...accs};\r\n    if(parseInt(sch) === 0)\r\n    {\r\n \r\n        //setCollapser({})\r\n        console.log(e.target.checked)\r\n        if(e.target.checked){\r\n        let cl = 'allcl_'+school;  //get all sub category name\r\n        let al = document.getElementsByClassName(cl);// pull all calsses\r\n        al.forEach(element => {\r\n            let e1 = element.getElementsByTagName('input'); //get the input tag\r\n            e1.forEach(el1 => {\r\n            let vnut = JSON.parse(el1.value) //extract value\r\n            let sub = parseInt(vnut[0])\r\n            let num1 = vnut[1]\r\n            let cl1 = 'mycl_'+sub+\"_\"+num1;\r\n            let al1 = document.getElementsByClassName(cl1);\r\n            al1.forEach(ele => {\r\n                let el1 = ele.getElementsByTagName('input');\r\n                el1.forEach(el => {\r\n                    let vv = el.value\r\n                    \r\n                    loadSubDataxx(e.target.checked, vv, sub, school, num1 )\r\n                    \r\n                });\r\n            \r\n            })\r\n        })\r\n        });\r\n         }else{\r\n             \r\n              delete ac[school];\r\n            \r\n         }\r\n        setActiveschool(school)\r\n        \r\n    }\r\n    else if(parseInt(sch) === 1)\r\n    {\r\n        //no school access \r\n        //remove school\r\n        if(sch in ac)\r\n        {\r\n            delete ac[school];\r\n        }\r\n        setAccs(ac)\r\n        setActiveschool(0)\r\n        setCollapser({})\r\n    }\r\n    else if(parseInt(sch) === 2)\r\n    {\r\n        //no school access \r\n        //remove school\r\n        ac[school] = {};\r\n        setAccs(ac)\r\n        setActiveschool(school)\r\n        setCollapser({})\r\n    }\r\n}\r\nconst loadDatax = (e, sub, school, num) =>{\r\n    let cl = 'mycl_'+sub+\"_\"+num;\r\n    //console.log(cl)\r\n    let al = document.getElementsByClassName(cl);\r\n    al.forEach(element => {\r\n        let e1 = element.getElementsByTagName('input');\r\n        e1.forEach(ele => {\r\n            let v = ele.value\r\n            loadSubDataxx(e.target.checked, v, sub, school, num )\r\n           //ele.checked = e.target.checked\r\n        })\r\n    });\r\n}\r\nconst loadSubDatax = (e, sub, family, id, num) =>{\r\n    let ac = {...accs};\r\n    if(e.target.checked)\r\n    {\r\n        if(id in ac)\r\n        {\r\n            if(family in ac[id])\r\n            {\r\n                if(sub in ac[id][family])\r\n                {\r\n                    if(num in ac[id][family][sub])\r\n                    {\r\n\r\n                    }else\r\n                    {\r\n                        ac[id][family][sub][num] = num\r\n                    }\r\n                   // ac[id][family][sub] = sub\r\n                }else\r\n                {\r\n                    ac[id][family][sub] = {}\r\n                    ac[id][family][sub][num] = num\r\n                }\r\n\r\n            }else\r\n            {\r\n                ac[id][family] = {}\r\n                ac[id][family][sub] = {}\r\n                ac[id][family][sub][num] = num\r\n            }\r\n\r\n        }else{\r\n            ac[id] = {}\r\n            ac[id][family] = {}\r\n            ac[id][family][sub] = {}\r\n            ac[id][family][sub][num] = num\r\n        }\r\n    }else\r\n    {\r\n        if(id in ac && family in ac[id] && sub in ac[id][family] && num in ac[id][family][sub])\r\n        {\r\n            delete(ac[id][family][sub][num])\r\n        }\r\n    }\r\n    setAccs(ac)\r\n    console.log(ac)\r\n}\r\nconst loadSubDataxx = (e, sub, family, id, num) =>{\r\n    \r\n    let ac = {...accs};\r\n    if(e)\r\n    {\r\n        if(id in ac)\r\n        {\r\n            if(family in ac[id])\r\n            {\r\n                if(sub in ac[id][family])\r\n                {\r\n                    if(num in ac[id][family][sub])\r\n                    {\r\n\r\n                    }else\r\n                    {\r\n                        ac[id][family][sub][num] = num\r\n                    }\r\n                   // ac[id][family][sub] = sub\r\n                }else\r\n                {\r\n                    ac[id][family][sub] = {}\r\n                    ac[id][family][sub][num] = num\r\n                }\r\n\r\n            }else\r\n            {\r\n                ac[id][family] = {}\r\n                ac[id][family][sub] = {}\r\n                ac[id][family][sub][num] = num\r\n            }\r\n\r\n        }else{\r\n            ac[id] = {}\r\n            ac[id][family] = {}\r\n            ac[id][family][sub] = {}\r\n            ac[id][family][sub][num] = num\r\n        }\r\n    }else\r\n    {\r\n        if(id in ac && family in ac[id] && sub in ac[id][family] && num in ac[id][family][sub])\r\n        {\r\n            delete(ac[id][family][sub][num])\r\n        }\r\n    }\r\n    setAccs(ac)\r\n}\r\nconst loadPage = (id) =>{\r\n    setActiveschool(id)\r\n    setPage(2)\r\n}\r\nlet schs = props.user.mySchoolData ;\r\nlet activeSchoolNameArray = schs.filter(rw=>rw.id === activeSchool);\r\nlet activeSchoolName = activeSchoolNameArray && activeSchoolNameArray.length > 0 ?activeSchoolNameArray[0]:'No School'\r\n \r\nreturn (\r\n    <>\r\n    {page === 1 ?\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Access  <small></small></h5>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%' border='1px solid black'>\r\n                    <thead>\r\n                        <tr>             \r\n                            <th width='5%' className='text-center'>FULL</th>\r\n                            <th>SCHOOL NAME</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        schs && Array.isArray(schs) && schs.length > 0 ? schs.map((prop, index)=>{\r\n                            let chk1 = accs.hasOwnProperty(prop.id) ? true : false;\r\n                             return (\r\n                                <tr key={index}> \r\n                                <td width='5%' valign='middle' >\r\n                                        <CSwitch \r\n                                            className={'mx-1'} \r\n                                            color={'danger'} \r\n                                            name='rw'\r\n                                            size='sm'\r\n                                            defaultChecked={chk1}\r\n                                            labelOn={'\\u2713'} \r\n                                            labelOff={'\\u2715'} \r\n                                            onChange={(e)=>loadSchool(e, prop.id, 0, 1)}\r\n                                        /></td>\r\n                                    <td>\r\n                             <span style={{textTransform:'uppercase'}}><a on>{prop.name}</a></span><br/>\r\n                                    </td>\r\n                                    <td><a onClick={()=>loadPage(prop.id)}>NEXT</a></td>\r\n                                    \r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </CCardBody>\r\n            <CCardFooter>\r\n                <button onClick={handleSubmit} className='btn btn-lg btn-block'>Save</button>\r\n            </CCardFooter>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n    :''}\r\n    \r\n    {page === 2 && parseInt(activeSchool) > 0 ?\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>MODIFY : {activeSchoolName.name}  <small></small></h5>\r\n              </CCol>\r\n              <CCol xs={2}>\r\n                  <button onClick={()=>setPage(1)} className='btn btn-icon btn-primary'><i className='fa fa-backward'></i> BACK </button>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n                    {\r\n                        controls  ? Object.keys(controls).map((pro, index)=>{\r\n                            let prop = controls[pro]\r\n                            let pdata = controls[pro].data\r\n                            let sl = 'allcl_'+activeSchool\r\n                            return (\r\n                                <>\r\n                                <CCardBody>\r\n                                <table width='100%'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th width='5%' className='text-center'>VEIW</th>\r\n                                        <th width='5%' className='text-center'>MANAGE</th>\r\n                                        <th className='text-left'>SECTION</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                 <tbody>\r\n                                <tr className='bg-dark p-10 m-4' key={{index}}> \r\n                                <td width='5%' valign='middle' >\r\n                                        <CSwitch \r\n                                            className={`mx-1 ${sl}`} \r\n                                            color={'success'} \r\n                                            name='rw1'\r\n                                            size='sm'\r\n                                            value={JSON.stringify([pro, 1])}\r\n                                            labelOn={'\\u2713'} \r\n                                            labelOff={'\\u2715'} \r\n                                            onChange={(e)=>loadDatax(e, pro, activeSchool, 1)}\r\n                                        /></td>\r\n                                    <td width='5%' valign='middle' >\r\n                                        <CSwitch \r\n                                            className={`mx-1 ${sl}`} \r\n                                            color={'primary'} \r\n                                            size='sm'\r\n                                            value={JSON.stringify([pro, 2])}\r\n                                            labelOn={'\\u2713'} \r\n                                            labelOff={'\\u2715'} \r\n                                            onChange={(e)=>loadDatax(e, pro, activeSchool, 2)}\r\n                                        /></td>\r\n                                    <td>\r\n                                        <strong style={{textTransform:'uppercase'}}>{prop.name}{\" : \"}{pro}{\" --\"}</strong><br/>\r\n                                    </td>\r\n                                    \r\n                                </tr>\r\n                                </tbody>\r\n                                </table>\r\n                    <CCollapse show={true }>\r\n                               <table width='100%' className=''>\r\n                               \r\n                    { pdata !== undefined && Array.isArray(Object.keys(pdata)) ? Object.keys(pdata).map((pp, ii)=>{\r\n                                  let d = pdata[pp]\r\n                                  let addx = activeSchool in accs && pro in accs[activeSchool] && pp in accs[activeSchool][pro]  && 1 in accs[activeSchool][pro][pp] ? true : false;\r\n                                  let addy = activeSchool in accs && pro in accs[activeSchool] && pp in accs[activeSchool][pro]  && 2 in accs[activeSchool][pro][pp] ? true : false\r\n                                  let cl = 'mycl_'+pro\r\n                                  \r\n                                   return  <tr key={ii}> \r\n                                        <td width='5%' valign='middle' >\r\n                                        <CSwitch \r\n                                            className={`mx-1 ${cl}_1 `} \r\n                                            color={'success'} \r\n                                            size='sm' \r\n                                            value={pp}\r\n                                            sub={pro}\r\n                                            cat={1}\r\n                                            checked={addx}\r\n                                            labelOn={'\\u2713'} \r\n                                            labelOff={'\\u2715'} \r\n                                            onChange={(e)=>loadSubDatax(e, pp, pro, activeSchool, 1)}\r\n                                        />\r\n                                        </td>\r\n                                        <td width='5%' className='text-center' >\r\n                                       <CSwitch \r\n                                           className={`mx-1 ${cl}_2 `} \r\n                                           color={'primary'} \r\n                                           size='sm'\r\n                                           value={pp}\r\n                                           sub={pro}\r\n                                           cat={2}\r\n                                           checked={addy}\r\n                                           labelOn={'\\u2713'} \r\n                                           labelOff={'\\u2715'} \r\n                                           onChange={(e)=>loadSubDatax(e, pp, pro, activeSchool, 2)}\r\n                                       />\r\n                                       </td>\r\n                                        \r\n                                        <td> <i className=\"m-auto pb-8\" style={{textTransform:'uppercase' }}>\r\n                                             {d.name}{/* {\" -- \"}{activeSchool}{\" -- \"}{pro}{\" -- \"}{pp} */}</i>\r\n                                        </td>\r\n                                       \r\n                                        \r\n                                           </tr>\r\n                                    \r\n                               }):''}\r\n                               </table>\r\n                               </CCollapse>\r\n                               \r\n                            </CCardBody>\r\n                            \r\n                                </>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n        <CCardFooter>\r\n            <button className='btn btn-block btn-primary' onClick={()=>handleSubmit()}> SAVE</button>\r\n        </CCardFooter>   \r\n        </CCard>\r\n        </CCol>\r\n    </CRow>:''\r\n\r\n    }\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    user : state.userReducer,\r\n    school: state.schoolReducer,\r\n    department: state.departmentReducer,\r\n})\r\nexport default connect(mapStateToProps, \r\n    { \r\n        getStaffs, \r\n        updateStaff, \r\n        getSchools,\r\n        getDepartments\r\n    })(Staff)\r\n","import React, {useEffect, useState} from 'react'\r\nimport moment from 'moment';\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CDropdownDivider, CContainer, CCardFooter } from '@coreui/react';\r\nimport { getStaff } from './../../actions/staff/staff';\r\n\r\n\r\n\r\n\r\nconst StaffLeave = (props, {match}) => {\r\n  const data = props.data\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n        <table width='100%'>\r\n            {\r\n                data.map((prop, index)=>{\r\n                    return (\r\n                        <tr>\r\n\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n        </table>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\n\r\nexport default StaffLeave\r\n","import React, {useEffect, useState} from 'react'\r\nimport moment from 'moment';\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CDropdownDivider, CContainer, CCardFooter } from '@coreui/react';\r\nimport { getStaff } from './../../actions/staff/staff';\r\n\r\n\r\n\r\n\r\nconst StaffLeave = (props, {match}) => {\r\n  const data = props.data\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n        <table width='100%'>\r\n            {\r\n                data.map((prop, index)=>{\r\n                    return (\r\n                        <tr>\r\n\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n        </table>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\n\r\nexport default StaffLeave\r\n","import React, {useEffect, useState} from 'react'\r\nimport moment from 'moment';\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CDropdownDivider, CContainer, CCardFooter } from '@coreui/react';\r\n\r\n\r\n\r\n\r\nconst StaffLeave = (props, {match}) => {\r\n  const data = props.data\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n        <table width='100%'>\r\n            {\r\n                data.map((prop, index)=>{\r\n                    return (\r\n                        <tr>\r\n\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n        </table>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\n\r\nexport default StaffLeave\r\n","import React, {useEffect, useState} from 'react'\r\nimport moment from 'moment';\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CDropdownDivider, CContainer, CCardFooter } from '@coreui/react';\r\nimport { getStaff } from './../../actions/staff/staff';\r\n\r\n\r\n\r\n\r\nconst StaffLeave = (props, {match}) => {\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n        <table width='100%'>\r\n           \r\n        </table>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\n\r\nexport default StaffLeave\r\n","import React from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CImg\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nconst TheHeaderDropdown = (props) => {\n  return (\n    <CDropdown\n      inNav\n      className=\"c-header-nav-items mx-2\"\n      direction=\"down\"\n    >\n      <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\n        <div className=\"c-avatar\">\n          <CImg\n            src={process.env.REACT_APP_SERVER_URL+ props.user.photo} \n            className=\"c-avatar-img\"\n            alt={props.username}\n            onError={(e)=>{e.target.onerror=null; e.target.src='icons/profile_4.png'} }\n          />\n        </div>\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownItem\n          header\n          tag=\"div\"\n          color=\"light\"\n          className=\"text-center\"\n        >\n          <strong>Account</strong>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-bell\" className=\"mfe-2\" /> \n          Updates\n          <CBadge color=\"info\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-envelope-open\" className=\"mfe-2\" /> \n          Messages\n          <CBadge color=\"success\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-task\" className=\"mfe-2\" /> \n          Tasks\n          <CBadge color=\"danger\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-comment-square\" className=\"mfe-2\" /> \n          Comments\n          <CBadge color=\"warning\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem\n          header\n          tag=\"div\"\n          color=\"light\"\n          className=\"text-center\"\n        >\n          <strong>Settings</strong>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-user\" className=\"mfe-2\" />Profile\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-settings\" className=\"mfe-2\" /> \n          Settings\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-credit-card\" className=\"mfe-2\" /> \n          Payments\n          <CBadge color=\"secondary\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-file\" className=\"mfe-2\" /> \n          Projects\n          <CBadge color=\"primary\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem divider />\n        <CDropdownItem>\n          <CIcon name=\"cil-lock-locked\" className=\"mfe-2\" /> \n          Lock Account\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default TheHeaderDropdown\n","import axios from 'axios';\r\nimport {\r\n    STAFFLEAVE_GET_ONE,\r\n    STAFFLEAVE_GET_MULTIPLE,\r\n    STAFFLEAVE_REGISTER_SUCCESS,\r\n    STAFFLEAVE_REGISTER_FAIL,\r\n    STAFFLEAVE_LOADING,\r\n    STAFFLEAVE_LOADING_ERROR,\r\n    STAFFLEAVE_UPDATE_SUCCESS,\r\n    STAFFLEAVE_UPDATE_FAIL,\r\n    STAFFLEAVE_DELETE_SUCCESS,\r\n    STAFFLEAVE_DELETE_FAIL\r\n} from \"./../../types/staff/staffleave\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFLEAVE \r\nexport const getStaffleaves = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFLEAVE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFLEAVE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFLEAVE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFLEAVE \r\nexport const getStaffleave = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFLEAVE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFLEAVE DELETE\r\nexport const deleteStaffleave = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFLEAVE_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFLEAVE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFLEAVE REGISTER\r\nexport const registerStaffleave = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFLEAVE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFLEAVE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFLEAVE UPDATE\r\nexport const updateStaffleave = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFLEAVE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFLEAVE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { registerStaffleave, updateStaffleave, deleteStaffleave } from './../../actions/staff/staffleave';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCardHeader,\r\n  CCard,\r\n  CCardBody,\r\n  CButton,\r\n  CFormGroup,\r\n  CInput,\r\n  CSelect,\r\n  CLabel,\r\n  CCardFooter,\r\n  CTextarea,\r\n  CAlert\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { gradesjson, SERVER_URL, setElement } from '../../actions/common';\r\n\r\nconst Staffleaves = (props) => {\r\n    const history = useHistory()\r\n    const sid = props.sid\r\n    const [editid, setEditid] = useState(props.editid)\r\n    const [id, setId] = useState(null)\r\n    \r\n    //LEAVE\r\n    const [refid, setRefid] = useState('')\r\n    const [reason, setReason] = useState('')\r\n    const [started, setStarted] = useState('')\r\n    const [ended, setEnded] = useState('')\r\n  \r\n    useEffect(() => {\r\n      if(parseInt(props.rowid) > 0)\r\n      {\r\n        let data = props.data; \r\n        setId(data.id)\r\n        setReason(data.reason)\r\n        setRefid(data.notes)\r\n        setStarted(data.started)\r\n        setEnded(data.ended)\r\n      }\r\n    }, [props.data, props.rowid, sid])\r\n    \r\n    const handleSubmit = () =>{\r\n\r\n        let fd = new FormData();\r\n        fd.append('reason', reason);\r\n        fd.append('notes', refid);\r\n        fd.append('started', started);\r\n        fd.append('ended', ended);\r\n        fd.append('table', 'staffleaves');\r\n\r\n        if(id && parseInt(id) > 0)\r\n        {\r\n            fd.append('id', id);\r\n            fd.append('cat', 'update');\r\n            fd.append('narration', 'Updating leave record');\r\n            props.updateStaffleave(fd)\r\n        }else\r\n        {\r\n            fd.append('cat', 'insert');\r\n            fd.append('narration', 'inserting leave record');\r\n            fd.append('staffid', sid);\r\n            fd.append('approval', JSON.stringify([]));\r\n            props.registerStaffleave(fd)  \r\n        }\r\n    }\r\n    \r\n   \r\n  return (\r\n    <>\r\n    <CRow className='align-center mx-auto d-flex ' sm={12}>\r\n    <CCol sm=\"6\" md=\"6\" className='mx-auto'>\r\n                    <CCard>\r\n                      <CCardHeader>\r\n                        <h4>{parseInt(id) > 0 ? 'Edit Application':'Leave Application'}</h4>\r\n                      </CCardHeader>\r\n                        <CCardBody>\r\n                       <CRow>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Reason\">Reason for Absence (Explain clearly)</CLabel>\r\n                                <CTextarea\r\n                                    id=\"Reason\" \r\n                                    name='text'\r\n                                    row={20}\r\n                                    column={2}\r\n                                    defaultValue={reason}\r\n                                    placeholder=\"Type or paste here....\"\r\n                                    onChange={(e)=>setReason(e.target.value)} \r\n                                    >\r\n                                </CTextarea>\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm='6'>\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"started\">Start From</CLabel>\r\n                                <CInput \r\n                                    id=\"started\" \r\n                                    type='date'\r\n                                    defaultValue={started}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setStarted(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm='6'>\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ended\">Resume On</CLabel>\r\n                                <CInput \r\n                                    id=\"ended\" \r\n                                    type='date'\r\n                                    defaultValue={ended}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setEnded(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"refid\">Forward this request to</CLabel>\r\n                                <CInput\r\n                                    id=\"refid\" \r\n                                    name='refid'\r\n                                    defaultValue={refid}\r\n                                    placeholder=\"Type or paste here....\"\r\n                                    onChange={(e)=>setRefid(e.target.value)} \r\n                                    />\r\n                         \r\n                            </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow>\r\n                          <CAlert>\r\n                            Note : You can not make any changes or delete \r\n                            this application once it has been approved or denied\r\n                          </CAlert>\r\n                        </CRow>\r\n                        </CCardBody>\r\n                        <CCardFooter>\r\n                            <CButton type=\"button\" size=\"sm\" color=\"primary\" onClick={handleSubmit}><CIcon name=\"cil-scrubber\" /> Submit</CButton>\r\n                            <CButton type=\"button\" size=\"sm\" color=\"danger\" onClick={()=>props.handleClose()}><CIcon name=\"cil-ban\" /> Close</CButton>\r\n                        </CCardFooter>\r\n                    </CCard>\r\n                    </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    user : state.userReducer\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    registerStaffleave,\r\n    updateStaffleave,\r\n    \r\n  })(Staffleaves)\r\n  \r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton,\r\n    CDropdown,\r\n    CDropdownItem,\r\n    CDropdownMenu,\r\n    CDropdownToggle,\r\n    CForm,\r\n    CFormGroup,\r\n    CLabel,\r\n    CInput,\r\n    CInputCheckbox,\r\n    CDropdownDivider,\r\n    CTextarea,\r\n    CSelect\r\n } from '@coreui/react';\r\nimport {updateStaffleave, getStaffleaves, deleteStaffleave } from './../../actions/staff/staffleave';\r\nimport FormLeave from './FormLeave';\r\n\r\n\r\nconst StaffLeave = (props, {match}) => {\r\n  const staffid = props.sid\r\n  const usercontrol = props.usercontrol\r\n  const userview = props.userview\r\n  const data = props.data\r\n  const [reason, setReason] = useState('')\r\n  const [status, setStatus] = useState(0)\r\n  const [closed, setClosed] = useState(0)\r\n  const [forward, setForward] = useState('')\r\n  const [active, setActive] = useState(false)\r\n  const [editerid, setEditerid] = useState(null)\r\n  const [editerdata, setEditerdata] = useState({})\r\n\r\n  const [edit, setEdit] = useState('')\r\n\r\n  useEffect(() => {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'staffid':staffid\r\n        }),\r\n        cat:'selectes',\r\n        \r\n        table:'staffleaves',\r\n        narration:`get all staff leave with id ${staffid}`\r\n      }\r\n      props.getStaffleaves(params);\r\n      \r\n  }, [staffid, props.user])\r\n\r\n  const showCont = (num, id)=>{\r\n        if(num === 0)\r\n        {\r\n            setEdit(id)\r\n        }\r\n        else if(num === 1){\r\n            setEdit(null)\r\n        }\r\n  }\r\n const onEdit = (data) =>{\r\n    setEditerid(data.id)\r\n    setEditerdata(data)\r\n    setActive(true)\r\n }\r\n const onAdd = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive((prev)=>!prev)\r\n }\r\n const onDelete = (data) =>{\r\n    props.deleteStaffleave(data)\r\n }\r\n const onClose = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive(false)\r\n}\r\nconst loadClosed = (e) =>{\r\n    if(e.target.checked)\r\n    {\r\n        setClosed(1)\r\n    }else{\r\n        setClosed(0)\r\n    }\r\n}\r\nconst handleSubmit= (data)=>{\r\n    let arrr = {}\r\n    arrr['approved'] = status;\r\n    arrr['reason'] = reason;\r\n    arrr['dateapproved'] = new Date();\r\n    arrr['username'] = props.user.username;\r\n    arrr['userid'] = props.user.userid;\r\n    let app = []\r\n    if(data.approval && data.approval.length > 0 && Array.isArray(JSON.parse(data.approval)))\r\n    {\r\n        app = JSON.parse(data.approval)\r\n    }\r\n    let findIndex = app.findIndex((rw)=>rw.userid === 1);\r\n    if(findIndex > -1)\r\n    {\r\n        app[findIndex] = arrr;\r\n    }else{\r\n        app.push(arrr)\r\n    }\r\n    \r\n    let fd = new FormData()\r\n    fd.append('id', data.id)\r\n    fd.append('approval', JSON.stringify(app))\r\n    fd.append('notes', closed)\r\n    fd.append('cat', 'update')\r\n    fd.append('table', 'staffleaves')\r\n\r\n    props.updateStaffleave(fd)\r\n\r\n    \r\n}\r\n  return (\r\n    <>\r\n    {active ?\r\n    <FormLeave\r\n        data={editerdata}\r\n        rowid={editerid}\r\n        sid={staffid}\r\n        handleClose={onClose}\r\n    />:''}\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Leave History <small></small></h5>\r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group text-right\">\r\n              <CButton  \r\n                  color={active ? \"danger\" :\"primary\" }\r\n                  onClick={onAdd}\r\n                  className=\"\"\r\n                  >\r\n                <i className={active ? \"fa fa-close\" :\"fa fa-plus\" }></i>\r\n              </CButton>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%'>\r\n                    {\r\n                        data && Array.isArray(data) && data.length > 0 ? data.filter(rw=>rw !==null).map((prop, index)=>{\r\n                            return (\r\n                                <tr\r\n                                    onMouseLeave={()=>showCont(1, prop.id)}\r\n                                    onMouseEnter={()=>showCont(0, prop.id)}onMouseOver\r\n                                > \r\n                                    <td>\r\n                                        <strong style={{textTransform:'uppercase'}}>{moment(prop.started).format('MMM DD, YYYY')}{\" - \"}{moment(prop.ended).format('MMM DD, YYYY')}</strong><br/>\r\n                                        {prop.reason}   \r\n                                        <CRow>\r\n                                            {prop.approval && prop.approval.length > 0 && Array.isArray(JSON.parse(prop.approval)) ? JSON.parse(prop.approval).map((pr, ind)=>{\r\n                                            return <CCol md={4} sm={6} xs={12}>\r\n                                                <CRow xs={12}>\r\n                                                    <CCol xs={3}>\r\n                                                        <i className={parseInt(pr.approved) === 0 ? 'fa fa-certificate fa-4x text-success' : 'fa fa-thumbs-down fa-4x text-danger'}></i>\r\n                                                    </CCol>\r\n                                                    <CCol xs={9}>\r\n                                                        <CRow xs={12}>\r\n                                                            <strong>{pr.username}</strong>\r\n                                                        </CRow>\r\n                                                        <CRow xs={12}>\r\n                                                            <strong><h6 className={parseInt(pr.approved) === 0 ? 'text-success': 'text-danger'}>{parseInt(pr.approved) === 0 ? 'APPROVED': 'DENIED'}</h6></strong>\r\n                                                        </CRow>\r\n                                                        <CRow xs={12}>\r\n                                                            {moment(new Date(pr.dateapproved)).format('DD MM YYYY hh:mm:sm a')}\r\n                                                        </CRow>\r\n                                                        <CRow xs={12}>\r\n                                                            <i><small>{pr.reason}</small></i>\r\n                                                        </CRow>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                            </CCol>\r\n                                            }):''}\r\n                                        {parseInt(prop.notes) > 0 ?<>\r\n                                        <CCol md={4} sm={6} xs={12}>\r\n                                        {prop.approval && prop.approval.length > 0 && Array.isArray(JSON.parse(prop.approval)) && JSON.parse(prop.approval).length > 0 ? '':<>\r\n                                        <button onClick={()=>onEdit(prop)} className='btn btn-link'><i className='fa fa-edit '></i></button>\r\n                                        <button onClick={()=>onDelete(prop.id)} className='btn btn-link'><i className='fa fa-trash '></i></button></>}\r\n                                        {parseInt(prop.notes) === parseInt(prop.user.id) ? \r\n                                        <CDropdown className=\"m-1\">\r\n                                            <CDropdownToggle color=\"info\" size='sm' block={true}>\r\n                                                Approval\r\n                                            </CDropdownToggle>\r\n                                            <CDropdownMenu  placement=\"right\">\r\n                                                <CForm className=\"px-4 py-3\" >\r\n                                                <CFormGroup>\r\n                                                    <CLabel htmlFor=\"status\">Status</CLabel>\r\n                                                    <CSelect \r\n                                                        className=\"form-control\" \r\n                                                        id=\"status\" \r\n                                                        onChange={(e)=>setStatus(e.target.value)}\r\n                                                        >\r\n                                                            <option value='0'>Approved</option>\r\n                                                            <option value='1'>Denied</option>\r\n                                                    </CSelect>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup>\r\n                                                    <CLabel htmlFor=\"reason\">Comment / Reason</CLabel>\r\n                                                    <CTextarea \r\n                                                        className=\"form-control\" \r\n                                                        id=\"reason\" \r\n                                                        defaultValue={reason}\r\n                                                        placeholder=\"any reason for your decision\" \r\n                                                        onChange={(e)=>setReason(e.target.value)}\r\n                                                        >\r\n                                                    </CTextarea>\r\n                                                </CFormGroup>\r\n                                                \r\n                                                <CFormGroup variant=\"custom-checkbox\" className=\"form-group\">\r\n                                                    <CInputCheckbox \r\n                                                        custom \r\n                                                        id=\"closed\" \r\n                                                        defaultChecked={closed === 0 ? false : true}\r\n                                                        value={1}\r\n                                                        onChange={loadClosed}\r\n                                                        />\r\n                                                    <CLabel \r\n                                                        variant=\"custom-checkbox\" \r\n                                                        htmlFor=\"closed\"\r\n                                                        >Close</CLabel>\r\n                                                </CFormGroup>\r\n                                                {closed === 0 ?\r\n                                                <CFormGroup>\r\n                                                    <CLabel htmlFor=\"nex\">Forward To.</CLabel>\r\n                                                    <CSelect \r\n                                                        className=\"form-control\" \r\n                                                        id=\"nex\" \r\n                                                        >\r\n                                                            <option value='0'>Approved</option>\r\n                                                            <option value='1'>Denied</option>\r\n                                                    </CSelect>\r\n                                                </CFormGroup>\r\n                                                :''}\r\n                                                <CFormGroup className=\"mt-2\">\r\n                                                    <CButton color=\"primary\" type=\"submit\" onClick={()=>handleSubmit(prop)}>Submit</CButton>\r\n                                                </CFormGroup>\r\n                                                </CForm>\r\n                                                \r\n                                            </CDropdownMenu>\r\n                                            </CDropdown>\r\n                                        :\"\"}</CCol></>:''}\r\n                                   \r\n                                        </CRow>\r\n                                         </td>\r\n                                    \r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                </table>\r\n            </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    data : state.staffleaveReducer.staffleaves,\r\n    user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, {updateStaffleave, getStaffleaves, deleteStaffleave})(StaffLeave)\r\n","import axios from 'axios';\r\nimport {\r\n    STAFFJOB_GET_ONE,\r\n    STAFFJOB_GET_MULTIPLE,\r\n    STAFFJOB_REGISTER_SUCCESS,\r\n    STAFFJOB_REGISTER_FAIL,\r\n    STAFFJOB_LOADING,\r\n    STAFFJOB_LOADING_ERROR,\r\n    STAFFJOB_UPDATE_SUCCESS,\r\n    STAFFJOB_UPDATE_FAIL,\r\n    STAFFJOB_DELETE_SUCCESS,\r\n    STAFFJOB_DELETE_FAIL\r\n} from \"./../../types/staff/staffjob\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFJOB \r\nexport const getStaffjobs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFJOB_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFJOB_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFJOB_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFJOB \r\nexport const getStaffjob = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFJOB_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFJOB DELETE\r\nexport const deleteStaffjob = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFJOB_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFJOB_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFJOB REGISTER\r\nexport const registerStaffjob = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFJOB_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFJOB_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFJOB UPDATE\r\nexport const updateStaffjob = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFJOB_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFJOB_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import React , { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { registerStaffjob, updateStaffjob, deleteStaffjob } from './../../actions/staff/staffjob';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCardHeader,\r\n  CCard,\r\n  CCardBody,\r\n  CButton,\r\n  CFormGroup,\r\n  CInput,\r\n  CSelect,\r\n  CLabel,\r\n  CCardFooter,\r\n  CTextarea\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst Staffjobs = (props) => {\r\n    const history = useHistory()\r\n    const sid = props.sid\r\n    const [editid, setEditid] = useState(props.editid)\r\n    const [id, setId] = useState(null)\r\n    \r\n    //JOB\r\n    const [job, setJob] = useState('')\r\n  \r\n    useEffect(() => {\r\n      if(parseInt(props.rowid) > 0)\r\n      {\r\n        let data = props.data; \r\n        setId(data.id)\r\n        setJob(data.job)\r\n      }\r\n    }, [props.data, props.rowid, sid])\r\n    \r\n    const handleSubmit = () =>{\r\n\r\n        let fd = new FormData();\r\n        fd.append('job', job);\r\n        fd.append('table', 'staffjobs');\r\n\r\n        if(id && parseInt(id) > 0)\r\n        {\r\n            fd.append('id', id);\r\n            fd.append('cat', 'update');\r\n            fd.append('narration', 'Updating job record');\r\n            props.updateStaffjob(fd)\r\n        }else\r\n        {\r\n            fd.append('cat', 'insert');\r\n            fd.append('narration', 'inserting job record');\r\n            fd.append('staffid', sid);\r\n            props.registerStaffjob(fd)\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n   \r\n  return (\r\n    <>\r\n    <CRow className='align-center mx-auto d-flex ' sm={12}>\r\n    <CCol sm=\"6\" md=\"6\" className='mx-auto'>\r\n                    <CCard>\r\n                      <CCardHeader>\r\n                        <h4>{parseInt(id) > 0 ? 'Edit Application':'Job Application'}</h4>\r\n                      </CCardHeader>\r\n                        <CCardBody>\r\n                       <CRow>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Job\">Job Role</CLabel>\r\n                                <CTextarea\r\n                                    id=\"Job\" \r\n                                    name='text'\r\n                                    row={20}\r\n                                    column={2}\r\n                                    defaultValue={job}\r\n                                    placeholder=\"Type or paste here....\"\r\n                                    onChange={(e)=>setJob(e.target.value)} \r\n                                    >\r\n                                </CTextarea>\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                           \r\n                            \r\n                        </CRow>\r\n                        \r\n                        </CCardBody>\r\n                        <CCardFooter>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={handleSubmit}><CIcon name=\"cil-scrubber\" /> Submit</CButton>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"danger\" onClick={()=>props.handleClose()}><CIcon name=\"cil-ban\" /> Close</CButton>\r\n                        </CCardFooter>\r\n                    </CCard>\r\n                    </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    user : state.userReducer\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    registerStaffjob,\r\n    updateStaffjob,\r\n    \r\n  })(Staffjobs)\r\n  \r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton\r\n } from '@coreui/react';\r\nimport { getStafflogs, deleteStafflog } from './../../actions/staff/stafflog';\r\nimport FormLog from './FormLog';\r\n\r\n\r\nconst StaffLog = (props, {match}) => {\r\n  const staffid = props.sid\r\n  const usercontrol = props.usercontrol\r\n  const userview = props.userview\r\n  const data = props.data\r\n  const [active, setActive] = useState(false)\r\n  const [editerid, setEditerid] = useState(null)\r\n  const [editerdata, setEditerdata] = useState({})\r\n\r\n  const [edit, setEdit] = useState('')\r\n\r\n  useEffect(() => {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'staffid':staffid\r\n        }),\r\n        cat:'selectes',\r\n        \r\n        table:'stafflogs',\r\n        narration:`get all staff log with id ${staffid}`\r\n      }\r\n      props.getStafflogs(params);\r\n      \r\n  }, [staffid, props.user])\r\n\r\n  const showCont = (num, id)=>{\r\n        if(num === 0)\r\n        {\r\n            setEdit(id)\r\n        }\r\n        else if(num === 1){\r\n            setEdit(null)\r\n        }\r\n  }\r\n const onEdit = (data) =>{\r\n    setEditerid(data.id)\r\n    setEditerdata(data)\r\n    setActive(true)\r\n }\r\n const onAdd = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive((prev)=>!prev)\r\n }\r\n const onDelete = (data) =>{\r\n    props.deleteStafflog(data)\r\n }\r\n const onClose = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive(false)\r\n}\r\n  return (\r\n    <>\r\n    {active ?\r\n    <FormLog\r\n        data={editerdata}\r\n        rowid={editerid}\r\n        sid={staffid}\r\n        handleClose={onClose}\r\n    />:''}\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Log History <small></small></h5>\r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group text-right\">\r\n              <CButton  \r\n                  color={active ? \"danger\" :\"primary\" }\r\n                  onClick={onAdd}\r\n                  className=\"\"\r\n                  >\r\n                <i className={active ? \"fa fa-close\" :\"fa fa-plus\" }></i>\r\n              </CButton>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%'>\r\n                    {\r\n                        data && Array.isArray(data) && data.length > 0 ? data.filter(rw=>rw !==null).map((prop, index)=>{\r\n                            return (\r\n                                <tr\r\n                                    onMouseLog={()=>showCont(1, prop.id)}\r\n                                    onMouseEnter={()=>showCont(0, prop.id)}onMouseOver\r\n                                > \r\n                                    <td>\r\n                                        {prop.school}\r\n                                       \r\n                                    </td>\r\n                                    <td width='20%'>\r\n                                        <span className={edit !== prop.id ? 'collapse' : ''}>\r\n                                        <button onClick={()=>onEdit(prop)} className='btn btn-link'><i className='fa fa-edit'></i></button>\r\n                                        <button onClick={()=>onDelete(prop.id)} className='btn btn-link'><i className='fa fa-trash'></i></button>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                </table>\r\n            </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    data : state.stafflogReducer.stafflogs,\r\n    user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, { getStafflogs, deleteStafflog})(StaffLog)\r\n","import React , { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { registerStaffexperience, updateStaffexperience, deleteStaffexperience } from './../../actions/staff/staffexperience';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCardHeader,\r\n  CCard,\r\n  CCardBody,\r\n  CButton,\r\n  CFormGroup,\r\n  CInput,\r\n  CSelect,\r\n  CLabel,\r\n  CCardFooter,\r\n  CTextarea\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst Staffexperiences = (props) => {\r\n    const history = useHistory()\r\n    const sid = props.sid\r\n    const [id, setId] = useState(null)\r\n    \r\n    //EXPERIENCE\r\n    const [organisation, setOrganisation] = useState('')\r\n    const [position, setPosition] = useState('')\r\n    const [job, setJob] = useState('')\r\n    const [started, setStarted] = useState('')\r\n    const [ended, setEnded] = useState('')\r\n  \r\n\r\n    useEffect(() => {\r\n      if(parseInt(props.rowid) > 0)\r\n      {\r\n        let data = props.data; \r\n        setId(data.id)\r\n        setOrganisation(data.organisation)\r\n        setPosition(data.position)\r\n        setJob(data.job)\r\n        setStarted(data.started)\r\n        setEnded(data.ended)\r\n      }\r\n    }, [props.data, props.rowid, sid])\r\n    const handleClose = () =>{\r\n\r\n    }\r\n    const handleSubmit = () =>{\r\n\r\n        let fd = new FormData();\r\n        fd.append('organisation', organisation);\r\n        fd.append('position', position);\r\n        fd.append('job', job);\r\n        fd.append('started', started);\r\n        fd.append('ended', ended);\r\n        fd.append('table', 'staffexperiences');\r\n\r\n        if(id && parseInt(id) > 0)\r\n        {\r\n            fd.append('id', id);\r\n            fd.append('cat', 'update');\r\n            fd.append('narration', 'Updating experience record');\r\n            props.updateStaffexperience(fd)\r\n        }else\r\n        {\r\n            fd.append('cat', 'insert');\r\n            fd.append('narration', 'inserting experience record');\r\n            fd.append('staffid', sid);\r\n            props.registerStaffexperience(fd)\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n    const changejob= (e) =>{\r\n        setJob(e.target.value)\r\n    }\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n    <CRow className='align-center mx-auto d-flex ' sm={12}>\r\n    <CCol sm=\"6\" md=\"6\" className='mx-auto'>\r\n                    <CCard>\r\n                      <CCardHeader>\r\n                        <h4>{parseInt(id) > 0 ? 'Edit':'Add'}</h4>\r\n                      </CCardHeader>\r\n                        <CCardBody>\r\n                       <CRow>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Organisation\">Organisation</CLabel>\r\n                                <CInput \r\n                                    id=\"Organisation\" \r\n                                    name='text'\r\n                                    defaultValue={organisation}\r\n                                    placeholder=\"Ministry Of Education, Kano \"\r\n                                    onChange={(e)=>setOrganisation(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Position\">Position/Office</CLabel>\r\n                                <CInput \r\n                                    id=\"Position\" \r\n                                    name='text'\r\n                                    defaultValue={position}\r\n                                    placeholder=\"Education Officer \"\r\n                                    onChange={(e)=>setPosition(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\">\r\n                              <CFormGroup>\r\n                                  <CLabel htmlFor=\"job\">Job Description</CLabel>\r\n                                  <CTextarea \r\n                                      custom \r\n                                      id=\"job\" \r\n                                      onChange={changejob}\r\n                                      value={job} \r\n                                      placeholder='Coordinate teachers, ....'\r\n                                  >\r\n                                     \r\n                                  </CTextarea>\r\n                              </CFormGroup>\r\n                              </CCol>\r\n                              \r\n                            <CCol xs=\"12\" sm='6'>\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"started\">Date Started</CLabel>\r\n                                <CInput \r\n                                    id=\"started\" \r\n                                    type='date'\r\n                                    defaultValue={started}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setStarted(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm='6'>\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ended\">Date Left</CLabel>\r\n                                <CInput \r\n                                    id=\"ended\" \r\n                                    type='date'\r\n                                    defaultValue={ended}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setEnded(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            \r\n                        </CRow>\r\n                        \r\n                        </CCardBody>\r\n                        <CCardFooter>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={handleSubmit}><CIcon name=\"cil-scrubber\" /> Submit</CButton>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"danger\" onClick={()=>props.handleClose()}><CIcon name=\"cil-ban\" /> Close</CButton>\r\n                        </CCardFooter>\r\n                    </CCard>\r\n                    </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    user : state.userReducer\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    registerStaffexperience,\r\n    updateStaffexperience,\r\n    \r\n  })(Staffexperiences)\r\n  \r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton\r\n } from '@coreui/react';\r\nimport { getStaffexperiences, deleteStaffexperience } from './../../actions/staff/staffexperience';\r\nimport FormExperience from './FormExperience';\r\n\r\n\r\nconst StaffExperience = (props, {match}) => {\r\n  const staffid = props.sid\r\n  const usercontrol = props.usercontrol\r\n  const userview = props.userview\r\n  const data = props.data \r\n  const [active, setActive] = useState(false)\r\n  const [editerid, setEditerid] = useState(null)\r\n  const [editerdata, setEditerdata] = useState({})\r\n  const [edit, setEdit] = useState('')\r\n\r\n  useEffect(() => {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'staffid':staffid\r\n        }),\r\n        cat:'selectes',\r\n        table:'staffexperiences',\r\n        narration:`get all staff experience with id ${staffid}`\r\n      }\r\n      props.getStaffexperiences(params);\r\n      \r\n  }, [staffid, props.user])\r\n\r\n  const showCont = (num, id)=>{\r\n        if(num === 0)\r\n        {\r\n            setEdit(id)\r\n        }\r\n        else if(num === 1){\r\n            setEdit(null)\r\n        }\r\n  }\r\n const onEdit = (data) =>{\r\n    setEditerid(data.id)\r\n    setEditerdata(data)\r\n    setActive(true)\r\n }\r\n const onAdd = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive((prev)=>!prev)\r\n }\r\n const onDelete = (data) =>{\r\n let fd = new FormData();\r\n    fd.append('id', data)\r\n    fd.append('table', 'staffexperiences')\r\n    fd.append('cat', 'delete')\r\n    props.deleteStaffexperience(fd,data)\r\n }\r\n \r\n const onClose = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive(false)\r\n}\r\n  return (\r\n    <>\r\n    {active ?\r\n    <FormExperience\r\n        data={editerdata}\r\n        rowid={editerid}\r\n        sid={staffid}\r\n        handleClose={onClose}\r\n    />:''}\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Work History <br/><small>Chronological Order</small></h5>\r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group text-right\">\r\n              <CButton  \r\n                  color={active ? \"danger\" :\"primary\" }\r\n                  onClick={onAdd}\r\n                  className=\"\"\r\n                  >\r\n                <i className={active ? \"fa fa-close\" :\"fa fa-plus\" }></i>\r\n              </CButton>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%'>\r\n                    {\r\n                        data && Array.isArray(data) && data.length > 0 ? data.filter(rw=>rw !==null).map((prop, index)=>{\r\n                            \r\n                            return (\r\n                                <tr\r\n                                    key={{index}}\r\n                                    onMouseLeave={()=>showCont(1, prop.id)}\r\n                                    onMouseEnter={()=>showCont(0, prop.id)}\r\n                                > \r\n                                    <td>\r\n                                        <strong style={{textTransform:'uppercase'}}>{prop.organisation}</strong><br/>\r\n                                        <i style={{textTransform:'capitalize'}}>{prop.position}</i><br/>\r\n                                        {prop.job}<br/>\r\n                                        {moment(prop.started).format('MMM DD, YYYY')}{\" - \"}{moment(prop.ended).format('MMM DD, YYYY')}\r\n                                       \r\n                                    </td>\r\n                                    <td width='20%'>\r\n                                        <span className={edit !== prop.id ? 'collapse' : ''}>\r\n                                        <button onClick={()=>onEdit(prop)} className='btn btn-link'><i className='fa fa-edit fa-2x'></i></button>\r\n                                        <button onClick={()=>onDelete(prop.id)} className='btn btn-link'><i className='fa fa-trash fa-2x'></i></button>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                </table>\r\n            </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    data : state.staffexperienceReducer.staffexperiences,\r\n    user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, { getStaffexperiences, deleteStaffexperience})(StaffExperience)\r\n","import React , { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { registerStaffprofessional, updateStaffprofessional, deleteStaffprofessional } from './../../actions/staff/staffprofessional';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCardHeader,\r\n  CCard,\r\n  CCardBody,\r\n  CButton,\r\n  CFormGroup,\r\n  CInput,\r\n  CSelect,\r\n  CLabel,\r\n  CCardFooter\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { gradesjson, SERVER_URL, setElement } from '../../actions/common';\r\n\r\nconst Staffprofessionals = (props) => {\r\n    const history = useHistory()\r\n    const sid = props.sid\r\n    const [editid, setEditid] = useState(props.editid)\r\n    const [id, setId] = useState(null)\r\n    \r\n    //PROFESSIONAL\r\n    const [instituition, setInstituition] = useState('')\r\n    const [level, setLevel] = useState('')\r\n    const [issued, setIssued] = useState('')\r\n    const [links, setLinks] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(parseInt(props.rowid) > 0)\r\n      {\r\n        let data = props.data; \r\n        setId(data.id)\r\n        setInstituition(data.instituition)\r\n        setLevel(data.level)\r\n        setLinks(data.links)\r\n        setIssued(data.issued)\r\n      }\r\n    }, [props.data, props.rowid, sid])\r\n    const handleClose = () =>{\r\n\r\n    }\r\n    const handleSubmit = () =>{\r\n\r\n        let fd = new FormData();\r\n        fd.append('instituition', instituition);\r\n        fd.append('level', level);\r\n        fd.append('files', links);\r\n        fd.append('issued', issued);\r\n        fd.append('table', 'staffprofessionals');\r\n\r\n        if(id && parseInt(id) > 0)\r\n        {\r\n            fd.append('id', id);\r\n            fd.append('cat', 'update');\r\n            fd.append('narration', 'Updating professional record');\r\n            props.updateStaffprofessional(fd)\r\n        }else\r\n        {\r\n            fd.append('cat', 'insert');\r\n            fd.append('narration', 'inserting professional record');\r\n            fd.append('staffid', sid);\r\n            props.registerStaffprofessional(fd)\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n    const handleInputChange = (evt) => {\r\n        setLinks(evt.target.files[0]);\r\n    }\r\n  \r\n\r\n  return (\r\n    <>\r\n    <CRow className='align-center mx-auto d-flex ' sm={12}>\r\n    <CCol sm=\"6\" md=\"6\" className='mx-auto'>\r\n                    <CCard>\r\n                      <CCardHeader>\r\n                        <h4>{parseInt(id) > 0 ? 'Edit':'Add'}</h4>\r\n                      </CCardHeader>\r\n                        <CCardBody>\r\n                       <CRow>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Instituition\">Instituition</CLabel>\r\n                                <CInput \r\n                                    id=\"Instituition\" \r\n                                    name='text'\r\n                                    value={instituition}\r\n                                    placeholder=\"Teachers Registration Council of Nigeria\"\r\n                                    onChange={(e)=>setInstituition(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Level\">Level &  Certificate Number</CLabel>\r\n                                <CInput \r\n                                    id=\"Level\" \r\n                                    name='text'\r\n                                    value={level}\r\n                                    placeholder=\"Graduate Member  - KB1234567\"\r\n                                    onChange={(e)=>setLevel(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"issued\">Date Issued</CLabel>\r\n                                <CInput \r\n                                    id=\"issued\" \r\n                                    type='date'\r\n                                    value={issued}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setIssued(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                           <CCol xs=\"12\" >\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"files\">Upload Document (100kb)</CLabel>\r\n                                <CInput \r\n                                    type=\"file\" \r\n                                    name=\"files\" \r\n                                    id=\"files\"\r\n                                    defaultValue={links}\r\n                                    onChange={handleInputChange} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        \r\n                        </CCardBody>\r\n                        <CCardFooter>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={handleSubmit}><CIcon name=\"cil-scrubber\" /> Submit</CButton>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"danger\" onClick={()=>props.handleClose()}><CIcon name=\"cil-ban\" /> Close</CButton>\r\n                        </CCardFooter>\r\n                    </CCard>\r\n                    </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    user : state.userReducer\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    registerStaffprofessional,\r\n    updateStaffprofessional,\r\n    \r\n  })(Staffprofessionals)\r\n  \r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\nimport { checkImage } from './../../actions/common'\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton\r\n } from '@coreui/react';\r\nimport { getStaffprofessionals, deleteStaffprofessional } from './../../actions/staff/staffprofessional';\r\nimport FormProfessional from './FormProfessional';\r\n\r\n\r\nconst StaffProfessional = (props, {match}) => {\r\n  const staffid = props.sid\r\n  const usercontrol = props.usercontrol\r\n  const userview = props.userview\r\n  const data = props.data\r\n  const [active, setActive] = useState(false)\r\n  const [editerid, setEditerid] = useState(null)\r\n  const [editerdata, setEditerdata] = useState({})\r\n\r\n  const [edit, setEdit] = useState('')\r\n\r\n  useEffect(() => {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'staffid':staffid\r\n        }),\r\n        cat:'selectes',\r\n        \r\n        table:'staffprofessionals',\r\n        narration:`get all staff professional with id ${staffid}`\r\n      }\r\n      props.getStaffprofessionals(params);\r\n      \r\n  }, [staffid, props.user])\r\n\r\n  const showCont = (num, id)=>{\r\n        if(num === 0)\r\n        {\r\n            setEdit(id)\r\n        }\r\n        else if(num === 1){\r\n            setEdit(null)\r\n        }\r\n  }\r\n const onEdit = (data) =>{\r\n    setEditerid(data.id)\r\n    setEditerdata(data)\r\n    setActive(true)\r\n }\r\n const onAdd = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive((prev)=>!prev)\r\n }\r\n const onDelete = (data) =>{\r\n    let fd = new FormData();\r\n    fd.append('id', data)\r\n    fd.append('table', 'staffeducations')\r\n    fd.append('cat', 'delete')\r\n    props.deleteStaffprofessional(fd, data)\r\n }\r\n const onClose = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive(false)\r\n}\r\n  return (\r\n    <>\r\n    {active ?\r\n    <FormProfessional\r\n        data={editerdata}\r\n        rowid={editerid}\r\n        sid={staffid}\r\n        handleClose={onClose}\r\n    />:''}\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Professional Certification <small></small></h5>\r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group text-right\">\r\n              <CButton  \r\n                  color={active ? \"danger\" :\"primary\" }\r\n                  onClick={onAdd}\r\n                  className=\"\"\r\n                  >\r\n                <i className={active ? \"fa fa-close\" :\"fa fa-plus\" }></i>\r\n              </CButton>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%'>\r\n                    {\r\n                        data && Array.isArray(data) && data.length > 0 ? data.filter(rw=>rw !==null).map((prop, index)=>{\r\n                            let imgx = process.env.REACT_APP_SERVER_URL + prop.links;\r\n                            return (\r\n                                <tr\r\n                                    onMouseLeave={()=>showCont(1, prop.id)}\r\n                                    onMouseEnter={()=>showCont(0, prop.id)}onMouseOver\r\n                                > \r\n                                    <td>\r\n                                        {prop.level}{\" \"} <strong style={{textTransform:'uppercase'}}>{prop.instituition}</strong><br/>\r\n                                        {moment(prop.issued).format('MMM DD, YYYY')} \r\n                                        {checkImage(imgx) ? <a target='_blank' className='btn btn-link' href={imgx}>DOWNLOAD</a>:<strong>No File Uploaded</strong>}\r\n                                    </td>\r\n                                    <td width='20%'>\r\n                                        <span className={edit !== prop.id ? 'collapse' : ''}>\r\n                                        <button onClick={()=>onEdit(prop)} className='btn btn-link'><i className='fa fa-edit fa-2x'></i></button>\r\n                                        <button onClick={()=>onDelete(prop.id)} className='btn btn-link'><i className='fa fa-trash fa-2x'></i></button>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                </table>\r\n            </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    data : state.staffprofessionalReducer.staffprofessionals,\r\n    user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, { getStaffprofessionals, deleteStaffprofessional})(StaffProfessional)\r\n","import React , { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { registerStaffeducation, updateStaffeducation, deleteStaffeducation } from './../../actions/staff/staffeducation';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCardHeader,\r\n  CCard,\r\n  CCardBody,\r\n  CButton,\r\n  CFormGroup,\r\n  CInput,\r\n  CSelect,\r\n  CLabel,\r\n  CCardFooter\r\n\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { gradesjson, SERVER_URL, setElement } from '../../actions/common';\r\n\r\nconst Staffeducations = (props) => {\r\n    const history = useHistory()\r\n    const sid = props.sid\r\n    const [editid, setEditid] = useState(props.editid)\r\n    const [id, setId] = useState(null)\r\n    \r\n    //EDUCATION\r\n    const [school, setSchool] = useState('')\r\n    const [course, setCourse] = useState('')\r\n    const [grade, setGrade] = useState('')\r\n    const [result, setResult] = useState('Primary School')\r\n    const [started, setStarted] = useState('')\r\n    const [linked, setLinked] = useState('')\r\n    const [ended, setEnded] = useState('')\r\n  \r\n    \r\n\r\n    useEffect(() => {\r\n      if(parseInt(props.rowid) > 0)\r\n      {\r\n        let data = props.data; \r\n        setId(data.id)\r\n        setSchool(data.school)\r\n        setCourse(data.course)\r\n        setLinked(data.files)\r\n        setResult(data.result)\r\n        setGrade(data.grade)\r\n        setStarted(data.started)\r\n        setEnded(data.ended)\r\n        setElement('result', data.result )\r\n        setElement('grade', data.grade )\r\n      }\r\n    }, [props.data, props.rowid, sid])\r\n    const handleClose = () =>{\r\n\r\n    }\r\n    const handleSubmit = () =>{\r\n\r\n        let fd = new FormData();\r\n        fd.append('school', school);\r\n        fd.append('course', course);\r\n        fd.append('result', result);\r\n        fd.append('grade', grade);\r\n        fd.append('files', linked);\r\n        fd.append('started', started);\r\n        fd.append('ended', ended);\r\n        fd.append('table', 'staffeducations');\r\n\r\n        if(id && parseInt(id) > 0)\r\n        {\r\n            fd.append('id', id);\r\n            fd.append('cat', 'update');\r\n            fd.append('narration', 'Updating education record');\r\n            props.updateStaffeducation(fd)\r\n        }else\r\n        {\r\n            fd.append('cat', 'insert');\r\n            fd.append('narration', 'inserting education record');\r\n            fd.append('staffid', sid);\r\n            props.registerStaffeducation(fd)\r\n     \r\n        }\r\n\r\n    }\r\n    \r\n    const changeresult= (e) =>{\r\n        setResult(e.target.value)\r\n    }\r\n    const handleInputChange = (evt) => {\r\n        setLinked(evt.target.files[0]);\r\n    }\r\n  \r\nlet gradetype = [\r\n  \"ND\",\r\n  \"OND\",\r\n  \"HND\",\r\n  \"NCE\",\r\n  \"B.Sc.\",\r\n  \"BA.\",\r\n  \"BA. (Ed)\",\r\n  \"Bsc (Ed)\",\r\n  \"B.Eng.\",\r\n  \"B.Tech.\",\r\n  \"B.Tech. (Ed)\",\r\n  \"B.Ed.\",\r\n  \"PGDE\",\r\n  \"PDE\",\r\n  \"M.Sc.\",\r\n  \"MA.\",\r\n  \"M.Eng.\",\r\n  \"M.Tech.\",\r\n  \"M.Ed.\",\r\n  \"Phd\"\r\n]\r\n\r\nlet gradetypes = [\r\n  \"First Class\",\r\n  \"Second Class Upper\",\r\n  \"Second Class Lower\",\r\n  \"Third Class\",\r\n  \"Upper Credit\",\r\n  \"Lower Credit\",\r\n  \"Passed(No Grading)\",\r\n  \"PASS\",\r\n  \"Certificate of Attendance\"\r\n]\r\nlet starray = gradetype.map((rw, ind) =>{\r\n    return <option key={ind} value={rw}>{rw}</option>\r\n})\r\n\r\nlet lgarray = gradetypes.map((rw, ind) =>{\r\n  return <option key={ind} value={rw}>{rw}</option>\r\n})\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <CRow className='align-center mx-auto d-flex ' sm={12}>\r\n    <CCol sm=\"6\" md=\"6\" className='mx-auto'>\r\n                    <CCard>\r\n                      <CCardHeader>\r\n                        <h4>{parseInt(id) > 0 ? 'Edit':'Add'}</h4>\r\n                      </CCardHeader>\r\n                        <CCardBody>\r\n                       <CRow>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"School\">School</CLabel>\r\n                                <CInput \r\n                                    id=\"School\" \r\n                                    name='text'\r\n                                    defaultValue={school}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setSchool(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\">\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"Course\">Course Of Study</CLabel>\r\n                                <CInput \r\n                                    id=\"Course\" \r\n                                    name='text'\r\n                                    defaultValue={course}\r\n                                    placeholder=\"Mathematics Education \"\r\n                                    onChange={(e)=>setCourse(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm='6'>\r\n                              <CFormGroup>\r\n                                  <CLabel htmlFor=\"result\">Type<i className='text-danger'>*</i></CLabel>\r\n                                  <CSelect \r\n                                      custom \r\n                                      id=\"result\" \r\n                                      onChange={changeresult} \r\n                                  >\r\n                                    <option >Select</option>\r\n                                      {starray}\r\n                                  </CSelect>\r\n                              </CFormGroup>\r\n                              </CCol>\r\n                              <CCol xs=\"12\" sm='6'>\r\n                              <CFormGroup>\r\n                              <CLabel htmlFor=\"grade\">Grade</CLabel>\r\n                                  <CSelect \r\n                                      custom \r\n                                      id=\"grade\" \r\n                                      placeholder=\"Select grade\"\r\n                                      onChange={(e)=>setGrade(e.target.value)} \r\n                                     \r\n                                  >\r\n                                    <option >Select</option>\r\n                                      {lgarray}\r\n                                  </CSelect>\r\n                              </CFormGroup>\r\n                              </CCol>\r\n            \r\n                            <CCol xs=\"12\" sm='6'>\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"started\">Date Started</CLabel>\r\n                                <CInput \r\n                                    id=\"started\" \r\n                                    type='date'\r\n                                    defaultValue={started}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setStarted(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" sm='6'>\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ended\">Date Completed</CLabel>\r\n                                <CInput \r\n                                    id=\"ended\" \r\n                                    type='date'\r\n                                    defaultValue={ended}\r\n                                    placeholder=\"Federal University of Technology Minna, Niger State, Nigeria \"\r\n                                    onChange={(e)=>setEnded(e.target.value)} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" >\r\n                            <CFormGroup>\r\n                                <CLabel htmlFor=\"ended\">Upload Result</CLabel>\r\n                                <CInput \r\n                                    type=\"file\" \r\n                                    name=\"files\" \r\n                                    id=\"files\"\r\n                                    defaultValue={linked}\r\n                                    onChange={handleInputChange} \r\n                                    />\r\n                            </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        \r\n                        </CCardBody>\r\n                        <CCardFooter>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={handleSubmit}><CIcon name=\"cil-scrubber\" /> Submit</CButton>\r\n                            <CButton type=\"submit\" size=\"sm\" color=\"danger\" onClick={()=>props.handleClose()}><CIcon name=\"cil-ban\" /> Close</CButton>\r\n                        </CCardFooter>\r\n                    </CCard>\r\n                    </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    user : state.userReducer\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    registerStaffeducation,\r\n    updateStaffeducation,\r\n    \r\n  })(Staffeducations)\r\n  \r\n","import React, {useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\nimport { checkImage } from './../../actions/common'\r\nimport {  \r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CRow,\r\n    CCol,\r\n    CButton\r\n } from '@coreui/react';\r\nimport { getStaffeducations, deleteStaffeducation } from './../../actions/staff/staffeducation';\r\nimport FormEducation from './FormEducation';\r\n\r\n\r\nconst StaffEducation = (props, {match}) => {\r\n  const staffid = props.sid\r\n  const usercontrol = props.usercontrol\r\n  const userview = props.userview\r\n  const data = props.data\r\n  const [active, setActive] = useState(false)\r\n  const [editerid, setEditerid] = useState(null)\r\n  const [editerdata, setEditerdata] = useState({})\r\n\r\n  const [edit, setEdit] = useState('')\r\n\r\n  useEffect(() => {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'staffid':staffid\r\n        }),\r\n        cat:'selectes',\r\n        \r\n        table:'staffeducations',\r\n        narration:`get all staff education with id ${staffid}`\r\n      }\r\n      props.getStaffeducations(params);\r\n      \r\n  }, [staffid, props.user])\r\n\r\n  const showCont = (num, id)=>{\r\n        if(num === 0)\r\n        {\r\n            setEdit(id)\r\n        }\r\n        else if(num === 1){\r\n            setEdit(null)\r\n        }\r\n  }\r\n const onEdit = (data) =>{\r\n    setEditerid(data.id)\r\n    setEditerdata(data)\r\n    setActive(true)\r\n }\r\n const onAdd = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive((prev)=>!prev)\r\n }\r\n const onDelete = (data) =>{\r\n    let fd = new FormData();\r\n    fd.append('id', data)\r\n    fd.append('table', 'staffeducations')\r\n    fd.append('cat', 'delete')\r\n    props.deleteStaffeducation(fd,data)\r\n }\r\n const onClose = () =>{\r\n    setEditerid(null)\r\n    setEditerdata({})\r\n    setActive(false)\r\n}\r\n  return (\r\n    <>\r\n    {active ?\r\n    <FormEducation\r\n        data={editerdata}\r\n        rowid={editerid}\r\n        sid={staffid}\r\n        handleClose={onClose}\r\n    />:''}\r\n    <CRow>\r\n    <CCol lg={12}>\r\n        <CCard>\r\n            <CCardHeader>\r\n                \r\n                <CRow>\r\n              <CCol>\r\n              <h5>Education History <small></small></h5>\r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group text-right\">\r\n              <CButton  \r\n                  color={active ? \"danger\" :\"primary\" }\r\n                  onClick={onAdd}\r\n                  className=\"\"\r\n                  >\r\n                <i className={active ? \"fa fa-close\" :\"fa fa-plus\" }></i>\r\n              </CButton>\r\n              </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n             <CCardBody>\r\n                <table width='100%'>\r\n                    { \r\n                        data && Array.isArray(data) && data.length > 0 ? data.filter(rw=>rw !==null && rw !== undefined).map((prop, index)=>{\r\n                            let imgx = process.env.REACT_APP_SERVER_URL + prop.links;\r\n                            \r\n                            return (\r\n                                <tr\r\n                                key={index}\r\n                                    onMouseLeave={()=>showCont(1, prop.id)}\r\n                                    onMouseEnter={()=>showCont(0, prop.id)}onMouseOver\r\n                                > \r\n                                    <td>\r\n                                        <strong style={{textTransform:'uppercase'}}>{prop.school}</strong><br/>\r\n                                        {prop.result}{\" \"}<i style={{textTransform:'capitalize'}}>{prop.course}</i><br/>\r\n                                        {prop.grade}<br/>\r\n                                        {moment(prop.started).format('MMM DD, YYYY')}{\" - \"}{moment(prop.ended).format('MMM DD, YYYY')}\r\n                                     {checkImage(imgx) ? <a target='_blank' className='btn btn-link' href={imgx}>DOWNLOAD</a>:<strong>No File Uploaded</strong>}\r\n                                    </td>\r\n                                    <td width='20%'>\r\n                                        <span className={edit !== prop.id ? 'collapse' : ''}>\r\n                                        <button onClick={()=>onEdit(prop)} className='btn btn-link'><i className='fa fa-edit fa-2x'></i></button>\r\n                                        <button onClick={()=>onDelete(prop.id)} className='btn btn-link'><i className='fa fa-trash fa-2x'></i></button>\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }):<h4 className='text-center'>No Data</h4>\r\n                    }\r\n                </table>\r\n            </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n    </CRow>\r\n</>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    data : state.staffeducationReducer.staffeducations,\r\n    user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, { getStaffeducations, deleteStaffeducation})(StaffEducation)\r\n"],"sourceRoot":""}