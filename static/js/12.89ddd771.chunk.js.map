{"version":3,"sources":["views/setting/Stage/Header.js","actions/staff/staff.js","actions/setting/clasz.js","actions/student/student.js","actions/setting/theme.js","actions/staff/staffsubject.js","actions/setting/report.js","actions/setting/subject.js","views/staff/StaffDashboardMenu.js","views/staff/SearchDashboard.js","views/staff/SearchDashboard1.js","actions/setting/claszunit.js","actions/setting/gradeunit.js","actions/setting/notice.js","views/setting/Form/Staffsubject.js","views/setting/Table/Staffsubject0.js","views/setting/Table/Staffsubject1.js","views/setting/Table/Staffsubject2.js","views/setting/Table/Staffsubject3.js","views/setting/Table/Staffsubject.js"],"names":["Header","props","history","useHistory","xs","sm","src","process","icon","height","id","className","title","undefined","school","hasOwnProperty","name","content","color","onClick","goBack","disabled","editer","data-target","data-toggle","toggle","path","API_PATH_STAFF","getStaffs","params","dispatch","getState","token","MAIN_TOKEN","table","type","STAFF_LOADING","axios","get","axiosConfig","then","res","STAFF_GET_MULTIPLE","payload","data","catch","err","STAFF_LOADING_ERROR","getStaffAll","STAFF_GET_ALL","searchStaff","STAFF_GET_SEARCH","birthday","STAFF_GET_BIRTHDAY","getStaff","STAFF_GET_ONE","deleteStaff","POST","STAFF_DELETE_SUCCESS","STAFF_DELETE_FAIL","registerStaff","post","axiosConfig1","STAFF_REGISTER_SUCCESS","STAFF_REGISTER_FAIL","updateStaff","STAFF_UPDATE_SUCCESS","STAFF_UPDATE_FAIL","API_PATH_SETTING","getClaszs","CLASZ_LOADING","CLASZ_GET_MULTIPLE","CLASZ_LOADING_ERROR","getClasz","CLASZ_GET_ONE","deleteClasz","CLASZ_DELETE_SUCCESS","CLASZ_DELETE_FAIL","registerClasz","CLASZ_REGISTER_SUCCESS","CLASZ_REGISTER_FAIL","updateClasz","CLASZ_UPDATE_SUCCESS","CLASZ_UPDATE_FAIL","getStudents","STUDENT_LOADING","STUDENT_GET_MULTIPLE","STUDENT_LOADING_ERROR","searchStudent","STUDENT_GET_SEARCH","getStudent","STUDENT_GET_ONE","deleteStudent","STUDENT_DELETE_SUCCESS","STUDENT_DELETE_FAIL","registerStudent","STUDENT_REGISTER_SUCCESS","STUDENT_REGISTER_FAIL","updateStudent","STUDENT_UPDATE_SUCCESS","STUDENT_UPDATE_FAIL","TABLE_NAME","getThemes","THEME_LOADING","THEME_GET_MULTIPLE","THEME_LOADING_ERROR","getThemesummary","THEME_GET_SUMMARY","getTheme","THEME_GET_ONE","deleteTheme","THEME_DELETE_SUCCESS","THEME_DELETE_FAIL","registerTheme","THEME_REGISTER_SUCCESS","THEME_REGISTER_FAIL","updateTheme","THEME_UPDATE_SUCCESS","THEME_UPDATE_FAIL","getStaffsubjects","STAFFSUBJECT_LOADING","STAFFSUBJECT_GET_MULTIPLE","STAFFSUBJECT_LOADING_ERROR","getStaffsubjectsummary","STAFFSUBJECT_GET_SUMMARY","getStaffsubject","STAFFSUBJECT_GET_ONE","deleteStaffsubject","STAFFSUBJECT_DELETE_SUCCESS","STAFFSUBJECT_DELETE_FAIL","registerStaffsubject","STAFFSUBJECT_REGISTER_SUCCESS","STAFFSUBJECT_REGISTER_FAIL","updateStaffsubject","STAFFSUBJECT_UPDATE_SUCCESS","STAFFSUBJECT_UPDATE_FAIL","getReports","REPORT_LOADING","REPORT_GET_MULTIPLE","REPORT_LOADING_ERROR","getReport","REPORT_GET_ONE","deleteReport","REPORT_DELETE_SUCCESS","REPORT_DELETE_FAIL","registerReport","REPORT_REGISTER_SUCCESS","REPORT_REGISTER_FAIL","updateReport","REPORT_UPDATE_SUCCESS","REPORT_UPDATE_FAIL","getSubjects","SUBJECT_LOADING","SUBJECT_GET_MULTIPLE","SUBJECT_LOADING_ERROR","getSubject","SUBJECT_GET_ONE","deleteSubject","SUBJECT_DELETE_SUCCESS","SUBJECT_DELETE_FAIL","registerSubject","SUBJECT_REGISTER_SUCCESS","SUBJECT_REGISTER_FAIL","updateSubject","SUBJECT_UPDATE_SUCCESS","SUBJECT_UPDATE_FAIL","Dashboard","useState","setSchool","term","setTerm","clasz","setClasz","dt","dropdowns","Array","isArray","length","dt0","dt1","dt3","map","prop","ind","key","value","termid","JSON","stringify","sch","schools","lg","md","row","placeholder","onChange","e","target","changeSchool","parse","changeTerm","action","method","custom","size","to","connect","state","result","staffReducer","user","userReducer","useEffect","activeschool","cat","narration","dat","index","href","active","photo","style","width","alt","class","onError","onerror","employment_no","display","position","zIndex","studentReducer","admission_no","getClaszunits","CLASZUNIT_LOADING","CLASZUNIT_GET_MULTIPLE","CLASZUNIT_LOADING_ERROR","getClaszunit","CLASZUNIT_GET_ONE","deleteClaszunit","CLASZUNIT_DELETE_SUCCESS","CLASZUNIT_DELETE_FAIL","registerClaszunit","CLASZUNIT_REGISTER_SUCCESS","CLASZUNIT_REGISTER_FAIL","updateClaszunit","CLASZUNIT_UPDATE_SUCCESS","CLASZUNIT_UPDATE_FAIL","getGradeunits","GRADEUNIT_LOADING","GRADEUNIT_GET_MULTIPLE","GRADEUNIT_LOADING_ERROR","getGradeunit","GRADEUNIT_GET_ONE","deleteGradeunit","GRADEUNIT_DELETE_SUCCESS","GRADEUNIT_DELETE_FAIL","registerGradeunit","GRADEUNIT_REGISTER_SUCCESS","GRADEUNIT_REGISTER_FAIL","updateGradeunit","GRADEUNIT_UPDATE_SUCCESS","GRADEUNIT_UPDATE_FAIL","getNotices","NOTICE_LOADING","NOTICE_GET_MULTIPLE","NOTICE_LOADING_ERROR","getNotice","NOTICE_GET_ONE","deleteNotice","NOTICE_DELETE_SUCCESS","NOTICE_DELETE_FAIL","registerNotice","NOTICE_REGISTER_SUCCESS","NOTICE_REGISTER_FAIL","updateNotice","NOTICE_UPDATE_SUCCESS","NOTICE_UPDATE_FAIL","staffsubjects","staffsubjectReducer","claszs","claszReducer","subjects","subjectReducer","staffs","setId","claszid","setClaszid","subjectid","setSubjectid","staff","setStaff","contact","setContact","sessionid","pid","qid","parseInt","clientid","itemid","itemid1","setElement","claszarray","clarray","filter","rw","subjectarray","subarray","starray","surname","firstname","xl","onClose","htmlFor","defaultValue","fd","FormData","append","groupid","onReset","tabl","itemname","itemname1","clientname","submenu","cursor","onActivate","is_active","onEdit","onDelete","allStaff","allStaffz","allStaffName","allSubject","allClass","forEach","prp","push","itemabbrv1","col_arr","tablhead","Object","keys","row_arr","row1","ind1","rz","arz","r","i","reduce","a","b","console","log","Swal","buttons","cancel","text","defeat","tablfooter","foo","y","variant","Staffsubject0","did","ini","Staffsubject1","Staffsubject2","Staffsubject3"],"mappings":"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","file":"static/js/12.89ddd771.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  CButton,\r\n  CButtonGroup,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTooltip\r\n} from '@coreui/react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Header = (props) => {\r\n  const history = useHistory() \r\n   return (\r\n    <CCardHeader>\r\n          <CRow>\r\n          <CCol xs={2} sm=\"1\">\r\n                <img\r\n                    src={process.env.PUBLIC_URL + props.icon}\r\n                    height='40px'\r\n                />\r\n          </CCol>\r\n            <CCol xs={6} sm=\"7\">\r\n            <h4 id=\"traffic\" className=\"card-title mb-0\">{props.title}</h4>\r\n            <div className=\"small text-muted\">{props.school != undefined && props.school.hasOwnProperty('name') && props.school.name ? props.school.name: <i>No school active</i>}</div>\r\n            </CCol>\r\n            <CCol xs={4} sm=\"4\" className=\"d-md-block\">\r\n              <CButtonGroup className=\"float-right\">\r\n                <CTooltip content=\"Click to go back\">\r\n              <CButton\r\n                color=\"secondary\" \r\n                onClick={()=>history.goBack()}\r\n                \r\n              ><i className='fa fa-backward'></i></CButton></CTooltip>\r\n              <CTooltip content=\"Add new record\">\r\n              <CButton \r\n                  disabled={props.editer === false ? true : false}\r\n                  data-target='#formz' \r\n                  data-toggle=\"collapse\" \r\n                  color=\"primary\" \r\n                  onClick={()=>props.toggle()}\r\n                  className=\"float-right\">\r\n                <i className='fa fa-plus'></i>\r\n              </CButton></CTooltip>\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n</CCardHeader>)\r\n}\r\n\r\nexport default Header\r\n","import axios from 'axios';\r\nimport {\r\n    STAFF_GET_ONE,\r\n    STAFF_GET_MULTIPLE,\r\n    STAFF_GET_ALL,\r\n    STAFF_GET_BIRTHDAY,\r\n    STAFF_GET_SEARCH,\r\n    STAFF_REGISTER_SUCCESS,\r\n    STAFF_REGISTER_FAIL,\r\n    STAFF_LOADING,\r\n    STAFF_LOADING_ERROR,\r\n    STAFF_UPDATE_SUCCESS,\r\n    STAFF_UPDATE_FAIL,\r\n    STAFF_DELETE_SUCCESS,\r\n    STAFF_DELETE_FAIL\r\n} from \"./../../types/staff/staff\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'staffs';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFF \r\nexport const getStaffs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STAFF \r\nexport const getStaffAll = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                      \r\n                dispatch({\r\n                    type: STAFF_GET_ALL,\r\n                    payload: res.data\r\n                 })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                   type : STAFF_LOADING_ERROR,\r\n                   payload:err\r\n                })\r\n            })\r\n};\r\n\r\nexport const searchStaff = params => (dispatch, getState) => {\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_SEARCH,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\nexport const birthday = params => (dispatch, getState) => {\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_BIRTHDAY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\n//GET SINGLE STAFF \r\nexport const getStaff = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFF_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFF DELETE\r\nexport const deleteStaff = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFF REGISTER\r\nexport const registerStaff = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFF UPDATE\r\nexport const updateStaff = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    CLASZ_GET_ONE,\r\n    CLASZ_GET_MULTIPLE,\r\n    CLASZ_REGISTER_SUCCESS,\r\n    CLASZ_REGISTER_FAIL,\r\n    CLASZ_LOADING,\r\n    CLASZ_LOADING_ERROR,\r\n    CLASZ_UPDATE_SUCCESS,\r\n    CLASZ_UPDATE_FAIL,\r\n    CLASZ_DELETE_SUCCESS,\r\n    CLASZ_DELETE_FAIL\r\n} from \"../../types/setting/clasz\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'claszs';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL CLASZ \r\nexport const getClaszs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : CLASZ_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: CLASZ_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : CLASZ_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE CLASZ \r\nexport const getClasz = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : CLASZ_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//CLASZ DELETE\r\nexport const deleteClasz = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//CLASZ REGISTER\r\nexport const registerClasz = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //CLASZ UPDATE\r\nexport const updateClasz = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STUDENT_GET_ONE,\r\n    STUDENT_GET_MULTIPLE,\r\n    STUDENT_GET_SEARCH,\r\n    STUDENT_REGISTER_SUCCESS,\r\n    STUDENT_REGISTER_FAIL,\r\n    STUDENT_LOADING,\r\n    STUDENT_LOADING_ERROR,\r\n    STUDENT_UPDATE_SUCCESS,\r\n    STUDENT_UPDATE_FAIL,\r\n    STUDENT_DELETE_SUCCESS,\r\n    STUDENT_DELETE_FAIL\r\n} from \"./../../types/student/student\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'students';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL STUDENT \r\nexport const getStudents = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : STUDENT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENT \r\nexport const searchStudent = params => (dispatch, getState) => {\r\n   \r\n    dispatch({type : STUDENT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENT_GET_SEARCH,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENT \r\nexport const getStudent = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENT DELETE\r\nexport const deleteStudent = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENT REGISTER\r\nexport const registerStudent = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENT UPDATE\r\nexport const updateStudent = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    THEME_GET_ONE,\r\n    THEME_GET_MULTIPLE,\r\n    THEME_GET_SUMMARY,\r\n    THEME_GET_DROPDOWNS,\r\n    THEME_REGISTER_SUCCESS,\r\n    THEME_REGISTER_FAIL,\r\n    THEME_LOADING,\r\n    THEME_LOADING_ERROR,\r\n    THEME_UPDATE_SUCCESS,\r\n    THEME_UPDATE_FAIL,\r\n    THEME_DELETE_SUCCESS,\r\n    THEME_DELETE_FAIL\r\n} from \"../../types/setting/theme\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'themes';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL THEME \r\nexport const getThemes = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : THEME_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: THEME_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : THEME_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL THEME \r\nexport const getThemesummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = 'themesummary';\r\n\r\n    dispatch({type : THEME_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: THEME_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : THEME_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\n//GET ALL THEME \r\nexport const getThemedropdowns = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : THEME_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: THEME_GET_DROPDOWNS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : THEME_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE THEME \r\nexport const getTheme = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : THEME_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//THEME DELETE\r\nexport const deleteTheme = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: THEME_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : THEME_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//THEME REGISTER\r\nexport const registerTheme = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: THEME_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : THEME_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //THEME UPDATE\r\nexport const updateTheme = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: THEME_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : THEME_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STAFFSUBJECT_GET_ONE,\r\n    STAFFSUBJECT_GET_MULTIPLE,\r\n    STAFFSUBJECT_GET_SUMMARY,\r\n    STAFFSUBJECT_REGISTER_SUCCESS,\r\n    STAFFSUBJECT_REGISTER_FAIL,\r\n    STAFFSUBJECT_LOADING,\r\n    STAFFSUBJECT_LOADING_ERROR,\r\n    STAFFSUBJECT_UPDATE_SUCCESS,\r\n    STAFFSUBJECT_UPDATE_FAIL,\r\n    STAFFSUBJECT_DELETE_SUCCESS,\r\n    STAFFSUBJECT_DELETE_FAIL\r\n} from \"./../../types/staff/staffsubject\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'staffsubjects';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFSUBJECT \r\nexport const getStaffsubjects = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFSUBJECT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFSUBJECT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFSUBJECT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\nexport const getStaffsubjectsummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFSUBJECT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFSUBJECT_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFSUBJECT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\n//GET SINGLE STAFFSUBJECT \r\nexport const getStaffsubject = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFSUBJECT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFSUBJECT DELETE\r\nexport const deleteStaffsubject = (params, id) => (dispatch, getState) =>{\r\n    axios.post(path, params, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFSUBJECT_DELETE_SUCCESS,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFSUBJECT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFSUBJECT REGISTER\r\nexport const registerStaffsubject = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFSUBJECT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFSUBJECT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFSUBJECT UPDATE\r\nexport const updateStaffsubject = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFSUBJECT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFSUBJECT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    REPORT_GET_ONE,\r\n    REPORT_GET_MULTIPLE,\r\n    REPORT_REGISTER_SUCCESS,\r\n    REPORT_REGISTER_FAIL,\r\n    REPORT_LOADING,\r\n    REPORT_LOADING_ERROR,\r\n    REPORT_UPDATE_SUCCESS,\r\n    REPORT_UPDATE_FAIL,\r\n    REPORT_DELETE_SUCCESS,\r\n    REPORT_DELETE_FAIL\r\n} from \"../../types/setting/report\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'reports';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL REPORT \r\nexport const getReports = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : REPORT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: REPORT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : REPORT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE REPORT \r\nexport const getReport = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : REPORT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//REPORT DELETE\r\nexport const deleteReport = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REPORT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : REPORT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//REPORT REGISTER\r\nexport const registerReport = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REPORT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : REPORT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //REPORT UPDATE\r\nexport const updateReport = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REPORT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : REPORT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    SUBJECT_GET_ONE,\r\n    SUBJECT_GET_MULTIPLE,\r\n    SUBJECT_REGISTER_SUCCESS,\r\n    SUBJECT_REGISTER_FAIL,\r\n    SUBJECT_LOADING,\r\n    SUBJECT_LOADING_ERROR,\r\n    SUBJECT_UPDATE_SUCCESS,\r\n    SUBJECT_UPDATE_FAIL,\r\n    SUBJECT_DELETE_SUCCESS,\r\n    SUBJECT_DELETE_FAIL\r\n} from \"./../../types/setting/subject\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'subjects';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL SUBJECT \r\nexport const getSubjects = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    \r\n\r\n    dispatch({type : SUBJECT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: SUBJECT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : SUBJECT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE SUBJECT \r\nexport const getSubject = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : SUBJECT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//SUBJECT DELETE\r\nexport const deleteSubject = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SUBJECT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : SUBJECT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//SUBJECT REGISTER\r\nexport const registerSubject = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SUBJECT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : SUBJECT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //SUBJECT UPDATE\r\nexport const updateSubject = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SUBJECT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : SUBJECT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { \r\n    CCard, \r\n    CCardBody, \r\n    CButton, \r\n    CButtonGroup, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow, \r\n    CDropdown, \r\n    CDropdownToggle, \r\n    CDropdownMenu, \r\n    CDropdownItem, \r\n    CDropdownDivider, \r\n    CContainer, \r\n    CCardFooter, \r\n    CForm,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CInputGroupPrepend,\r\n    CFormGroup,\r\n    CInputGroupText,\r\n    CSelect,\r\n    CLabel\r\n} from '@coreui/react';\r\n\r\nimport CIcon from '@coreui/icons-react'\r\nimport { Link } from 'react-router-dom';\r\nimport SearchDashboard from './SearchDashboard'\r\nimport SearchDashboard1 from './SearchDashboard1'\r\nconst Dashboard = (props) => {\r\n  \r\n  const [school, setSchool] = useState({})\r\n  const [term, setTerm ] = useState({})\r\n  //const [term, setTerm] = useState(0)\r\n  const [clasz, setClasz] = useState(0)\r\n  let dt = props.dropdowns && Array.isArray(props.dropdowns) && props.dropdowns.length > 4 ? props.dropdowns : [[], [], [], []];\r\n  let dt0 ='';\r\n  let dt1 ='';\r\n  let dt2 ='';\r\n  let dt3 ='';\r\n  if(dt.length > 0)\r\n  {\r\n     dt0 = dt[0].map((prop, ind)=>{\r\n    return <option key={ind}  value={prop.termid}>{prop.name}</option>;\r\n    });\r\n    dt1 = dt[1].map((prop, ind)=>{\r\n    return <option key={ind}  value={prop.id}>{prop.name}</option>;\r\n    });\r\n    dt2 = dt[2].map((prop, ind)=>{\r\n    return <option key={ind}  value={prop.id}>{prop.name}</option>;\r\n    });\r\n    dt3 = dt[0].map((prop, ind)=>{\r\n    return <option key={ind} value={JSON.stringify(prop)}>{prop.name}</option>;\r\n    });\r\n}\r\n\r\nlet sch  = Array.isArray(props.schools) ? props.schools.map((prop, ind)=>{\r\n  return <option value={JSON.stringify(prop)}>{prop.name}</option>;\r\n}):<option></option>;\r\n\r\nconst changeSchool =() =>{\r\n    props.changeSchool(JSON.parse(school))\r\n}\r\nconst changeTerm =() =>{\r\n  props.changeTerm(JSON.parse(term))\r\n}\r\nreturn (\r\n    <>\r\n    \r\n    <CRow>\r\n      <CCol lg={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            \r\n              <h4>Quick Menu</h4>\r\n              \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CContainer>\r\n            <CRow>\r\n              <CCol>\r\n              <CRow className='d-block'>\r\n                <strong>Change</strong>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol xs='12' sm='12' md='6' >\r\n                  <CForm>\r\n                  <CFormGroup row>\r\n                        <CInputGroup>\r\n                          <CInputGroupPrepend>\r\n                          <CInputGroupText>Change School</CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CSelect \r\n                          id=\"input3-group2\" \r\n                          name=\"input3-group2\" \r\n                          placeholder=\"Search Staff\"\r\n                          onChange={(e)=>setSchool(e.target.value)}\r\n                          >\r\n                            {sch}\r\n                            </CSelect>\r\n                          <CInputGroupAppend>\r\n                            <CButton  onClick={changeSchool} type=\"button\" color=\"secondary\"><i className='fa fa-thumbs-up'></i></CButton>\r\n                          </CInputGroupAppend>\r\n                        </CInputGroup>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n                <CCol xs='12' sm='12' md='6'>\r\n                <CForm>\r\n                <CFormGroup row>\r\n                      <CInputGroup>\r\n                        <CInputGroupPrepend>\r\n                        <CInputGroupText>Change Term</CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CSelect  onChange={(e)=>setTerm(e.target.value)} id=\"input3-group2\" name=\"input3-group2\" placeholder=\"Search Staff\" >\r\n                          {dt3}\r\n                          </CSelect>\r\n                        <CInputGroupAppend>\r\n                          <CButton  onClick={changeTerm}  type=\"button\" color=\"secondary\"><i className='fa fa-thumbs-up'></i></CButton>\r\n                        </CInputGroupAppend>\r\n                      </CInputGroup>\r\n                  </CFormGroup>\r\n                </CForm>\r\n              </CCol>\r\n              </CRow>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              \r\n            <CCol>\r\n               <CRow className='d-block'>\r\n                <strong>Navigate</strong>\r\n              </CRow>\r\n              <CForm action=\"\" method=\"post\" >\r\n              <CRow xs={12} >\r\n              <CCol xs='12' sm='12' md='12'  >\r\n              <CRow>\r\n              <CCol xs='12' sm='4' md='5' lg='5'  className=\"ml-0\">\r\n                <CFormGroup row>\r\n                <CInputGroup>\r\n                    <CInputGroupPrepend>\r\n                    <CInputGroupText>Select Term</CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                  <CSelect \r\n                    custom \r\n                    size=\"md\" \r\n                    name=\"term\" \r\n                    id=\"term\"\r\n                    onChange={(e)=>setTerm(e.target.value)}\r\n                    >\r\n                      <option value=\"0\">Select Term</option>\r\n                      {dt0}\r\n                    </CSelect>\r\n                  </CInputGroup>\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol  xs='12' sm='4' md='5' lg='5' className=\"ml-0\" >\r\n                <CFormGroup row>\r\n                <CInputGroup>\r\n                    <CInputGroupPrepend>\r\n                    <CInputGroupText>Select Class</CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                <CSelect \r\n                    custom \r\n                    size=\"md\" \r\n                    name=\"clasz\" \r\n                    id=\"clasz\"\r\n                    onChange={(e)=>setClasz(e.target.value)}\r\n                    >\r\n                      <option value=\"0\">Select Class</option>\r\n                      {dt1}\r\n                    </CSelect>\r\n                 </CInputGroup>\r\n                </CFormGroup>\r\n                </CCol>\r\n              <CCol xs='12' sm='3' md='2' lg='2' className=\"ml-0\" >\r\n                <CFormGroup className=\"\">\r\n                <Link \r\n                    type=\"submit\" \r\n                    className=\"btn btn-success btn-block btn-sm\"\r\n                    size=\"sm\" \r\n                    color=\"primary\"\r\n                    to={`/studentclasses/${term}/${clasz}`}\r\n                    >\r\n                      <CIcon name=\"cil-scrubber\" /> Load !</Link>\r\n                </CFormGroup>\r\n                </CCol>\r\n              </CRow>\r\n              </CCol>\r\n              </CRow>\r\n              </CForm>\r\n            </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol>\r\n                    <CRow className='d-block'>\r\n                      <strong>Search</strong>\r\n                    </CRow>\r\n                    <CRow className='pr-2'xs={12} >\r\n                      <CCol md='6'  >\r\n                        <SearchDashboard />\r\n                      </CCol>\r\n                      <CCol className='pr-2' md='6'  >\r\n                        <SearchDashboard1 />\r\n                      </CCol>\r\n                    </CRow>\r\n                </CCol>\r\n              </CRow>\r\n            </CContainer>\r\n          </CCardBody>\r\n         </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n\r\n})\r\nexport default Dashboard","\r\nimport React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { searchStaff } from './../../actions/staff/staff'\r\nimport {  \r\n    CCol, \r\n    CRow,\r\n    CFormGroup,\r\n    CInput,\r\n    CListGroup,\r\n    CListGroupItem,\r\n    CCard\r\n    \r\n} from '@coreui/react';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  const [term, setTerm] = useState();\r\n  const [clasz, setClasz] = useState([]);\r\n\r\n  let dt0 = ''\r\n  let dt1 = ''\r\n\r\n  const changeSchool = (e) =>{\r\n      setTerm(e.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(props.result !== undefined && Array.isArray(props.result))\r\n    {\r\n      setClasz(props.result)\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [props.result])\r\n\r\n  useEffect(() => {\r\n    if(term !== undefined && term.length > 2)\r\n    {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'search':term,\r\n            'schoolid': props.user.activeschool.id\r\n        }),\r\n        cat:'selected',\r\n        table:'staffsearch',\r\n        narration:`get all schools for access control`\r\n      }\r\n      props.searchStaff(params);\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [term, props.user.activeschool.id])\r\n\r\n\r\n  let dat = clasz.map((props, index)=>{\r\n    return <CListGroupItem key={index} target='_blank' className=\"m-0\" href={`#/staffs/${props.id}`} active>\r\n      <CRow>\r\n        <CCol xs='2' className='m-0'>\r\n            <img\r\n               src={process.env.REACT_APP_SERVER_URL + props.photo} \r\n               style={{height:'40px', width:'40px'}}\r\n               height=\"30px\"\r\n               alt=\"profile-image\" \r\n               class=\"profile\"\r\n               onError={(e)=>{e.target.onerror=null; e.target.src=process.env.PUBLIC_URL + '/icons/profile_1.png'} }\r\n               />\r\n        </CCol>\r\n        <CCol>\r\n        <strong>{props.name}</strong><br/>\r\n        <small>{props.employment_no}</small>\r\n        </CCol>\r\n      </CRow>\r\n      </CListGroupItem>\r\n  })\r\n  \r\n\r\nreturn (\r\n    <>\r\n              <CRow xs={12} >\r\n                <CCol>\r\n                <CFormGroup row>\r\n                  <CInput\r\n                    size=\"md\"\r\n                    className='w-100'\r\n                    value={term}\r\n                    onChange={(e)=>setTerm(e.target.value)}\r\n                    placeholder=' Staff search...'\r\n                    />     \r\n                </CFormGroup>\r\n                <CCard className=\"mt-0\" style={{display:'block', position:'absolute', zIndex:'101'}}>\r\n                <CListGroup style={{width:'300px'}}>\r\n                  {dat}\r\n                 </CListGroup>\r\n                </CCard>\r\n                </CCol>\r\n              </CRow>\r\n             \r\n             \r\n              \r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  result:state.staffReducer.result,\r\n  user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, {searchStaff})(Dashboard)","\r\nimport React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { searchStudent } from './../../actions/student/student'\r\nimport {  \r\n    CCol, \r\n    CRow,\r\n    CFormGroup,\r\n    CInput,\r\n    CListGroup,\r\n    CListGroupItem,\r\n    CCard\r\n    \r\n} from '@coreui/react';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  const [term, setTerm] = useState();\r\n  const [clasz, setClasz] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(props.result !== undefined && Array.isArray(props.result))\r\n    {\r\n      setClasz(props.result)\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [props.result])\r\n\r\n  useEffect(() => {\r\n    if(term !== undefined && term.length > 2)\r\n    {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'search':term,\r\n            'schoolid': props.user.activeschool.id\r\n        }),\r\n        cat:'selected',\r\n        table:'studentsearch',\r\n        narration:`get all schools for access control`\r\n      }\r\n      props.searchStudent(params);\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [term, props.user.activeschool.id])\r\n\r\n\r\n  let dat = clasz.map((props, index)=>{\r\n    return <CListGroupItem key={index} href={`/students/${props.id}`} active>\r\n        <strong>{props.name}</strong><br/>\r\n        <small>{props.admission_no}</small>\r\n      </CListGroupItem>\r\n  })\r\n  \r\n\r\nreturn (\r\n    <>\r\n              <CRow xs={12} >\r\n                <CCol>\r\n                <CFormGroup row>\r\n                  <CInput\r\n                    size=\"md\"\r\n                    className='w-100'\r\n                    value={term}\r\n                    onChange={(e)=>setTerm(e.target.value)}\r\n                    placeholder=' Student search...'\r\n                    />     \r\n                </CFormGroup>\r\n                <CCard className=\"mt-0\" style={{display:'block', position:'absolute', zIndex:'101'}}>\r\n                <CListGroup style={{width:'300px'}}>\r\n                  {dat}\r\n                 </CListGroup>\r\n                </CCard>\r\n                </CCol>\r\n              </CRow>\r\n             \r\n             \r\n              \r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  result:state.studentReducer.result,\r\n  user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, {searchStudent})(Dashboard)","\r\nimport axios from 'axios';\r\nimport {\r\n    CLASZUNIT_GET_ONE,\r\n    CLASZUNIT_GET_MULTIPLE,\r\n    CLASZUNIT_REGISTER_SUCCESS,\r\n    CLASZUNIT_REGISTER_FAIL,\r\n    CLASZUNIT_LOADING,\r\n    CLASZUNIT_LOADING_ERROR,\r\n    CLASZUNIT_UPDATE_SUCCESS,\r\n    CLASZUNIT_UPDATE_FAIL,\r\n    CLASZUNIT_DELETE_SUCCESS,\r\n    CLASZUNIT_DELETE_FAIL\r\n} from \"./../../types/setting/claszunit\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'claszunits';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL CLASZUNIT \r\nexport const getClaszunits = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : CLASZUNIT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: CLASZUNIT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : CLASZUNIT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE CLASZUNIT \r\nexport const getClaszunit = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : CLASZUNIT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//CLASZUNIT DELETE\r\nexport const deleteClaszunit = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZUNIT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZUNIT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//CLASZUNIT REGISTER\r\nexport const registerClaszunit = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZUNIT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZUNIT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //CLASZUNIT UPDATE\r\nexport const updateClaszunit = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZUNIT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZUNIT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    GRADEUNIT_GET_ONE,\r\n    GRADEUNIT_GET_MULTIPLE,\r\n    GRADEUNIT_REGISTER_SUCCESS,\r\n    GRADEUNIT_REGISTER_FAIL,\r\n    GRADEUNIT_LOADING,\r\n    GRADEUNIT_LOADING_ERROR,\r\n    GRADEUNIT_UPDATE_SUCCESS,\r\n    GRADEUNIT_UPDATE_FAIL,\r\n    GRADEUNIT_DELETE_SUCCESS,\r\n    GRADEUNIT_DELETE_FAIL\r\n} from \"../../types/setting/gradeunit\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'gradeunits';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL GRADEUNIT \r\nexport const getGradeunits = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : GRADEUNIT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: GRADEUNIT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : GRADEUNIT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE GRADEUNIT \r\nexport const getGradeunit = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : GRADEUNIT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//GRADEUNIT DELETE\r\nexport const deleteGradeunit = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GRADEUNIT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : GRADEUNIT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//GRADEUNIT REGISTER\r\nexport const registerGradeunit = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GRADEUNIT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : GRADEUNIT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //GRADEUNIT UPDATE\r\nexport const updateGradeunit = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GRADEUNIT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : GRADEUNIT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    NOTICE_GET_ONE,\r\n    NOTICE_GET_MULTIPLE,\r\n    NOTICE_REGISTER_SUCCESS,\r\n    NOTICE_REGISTER_FAIL,\r\n    NOTICE_LOADING,\r\n    NOTICE_LOADING_ERROR,\r\n    NOTICE_UPDATE_SUCCESS,\r\n    NOTICE_UPDATE_FAIL,\r\n    NOTICE_DELETE_SUCCESS,\r\n    NOTICE_DELETE_FAIL\r\n} from \"../../types/setting/notice\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'notices';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL NOTICE \r\nexport const getNotices = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : NOTICE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: NOTICE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : NOTICE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE NOTICE \r\nexport const getNotice = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : NOTICE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//NOTICE DELETE\r\nexport const deleteNotice = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: NOTICE_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : NOTICE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//NOTICE REGISTER\r\nexport const registerNotice = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: NOTICE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : NOTICE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //NOTICE UPDATE\r\nexport const updateNotice = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: NOTICE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : NOTICE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {registerStaffsubject, updateStaffsubject, deleteStaffsubject} from './../../../actions/staff/staffsubject';\r\nimport {getStaffs} from './../../../actions/staff/staff';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CInput,\r\n  CCardFooter,\r\n  CFormText,\r\n  CTextarea,\r\n  CSelect\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport {setElement} from './../../../actions/common'\r\n\r\n\r\nconst Staffsubject = (props) => {\r\n  const [id, setId] = useState(null)\r\n  const [claszid, setClaszid] = useState(null)\r\n  const [subjectid, setSubjectid] = useState(null)\r\n  const [staff, setStaff] = useState(null)\r\n  const [contact, setContact] = useState(null)\r\n  let sessionid = props.pid;\r\n  let termid = props.qid;\r\n  let groupid = 2;\r\n  //GET STAFFSUBJECTS PER SCHOOL\r\n  useEffect(() => {\r\n    if(props.activeschool !== undefined && parseInt(props.activeschool.id) > 0){\r\n        let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'schoolid': props.activeschool.id,\r\n            'is_active':0\r\n        }),\r\n        cat:'select',\r\n        table:'staffs',\r\n        narration:'get staffs'\r\n        }\r\n        props.getStaffs(params)\r\n\r\n    }\r\n  }, [props.activeschool])\r\n\r\n  //CHANGE STATE AS EDIT OR ADD\r\n  useEffect(() => {\r\n    if(props.data !== undefined && parseInt(props.data.id) > 0)\r\n    {\r\n      let dt = props.data;\r\n      \r\n      setId(dt.id);\r\n      setStaff(dt.clientid);\r\n      setClaszid(dt.itemid);\r\n      setSubjectid(dt.itemid1);\r\n      setContact(dt.contact);\r\n      setElement('nf-subjectid', dt.itemid1 )\r\n      setElement('nf-claszid', dt.itemid )\r\n      setElement('nf-staff', dt.clientid )\r\n    }else{\r\n      setId(null);\r\n      setStaff('');\r\n      setContact('');\r\n      setSubjectid('');\r\n      setClaszid('');\r\n    }\r\n    \r\n  }, [props.data])\r\n\r\n  const handleSubmit = () =>{\r\n    if(parseInt(staff) > 0)\r\n    {\r\n      let fd = new FormData();\r\n      fd.append('itemid', claszid);\r\n      fd.append('itemid1', subjectid);\r\n      fd.append('clientid', staff);\r\n      fd.append('contact', contact);\r\n      fd.append('checker', groupid+'_'+termid+'_'+staff+'_'+claszid+'_'+subjectid);\r\n      fd.append('table', 'accessstaffsubject');\r\n      fd.append('sessionid', sessionid);\r\n      \r\n      if(id && parseInt(id) > 0)\r\n      {\r\n        //UPDATE \r\n        fd.append('id', id);\r\n        fd.append('cat', 'updates');\r\n        props.updateStaffsubject(fd)\r\n        \r\n      }else if(termid && parseInt(termid) > 0)\r\n      {\r\n        //INSERT\r\n        fd.append('grp', groupid);\r\n        fd.append('termid', termid);\r\n        fd.append('cat', 'inserts');\r\n        props.registerStaffsubject(fd)\r\n      }\r\n      props.onReset()\r\n    }\r\n  }\r\n\r\n  let claszarray = props.user.dropdowns && Array.isArray(props.user.dropdowns) ? props.user.dropdowns[1] : [];\r\n  let clarray = Array.isArray(claszarray) ? claszarray.filter(rw=>rw !== null).map((rw, ind) =>{\r\n      return <option key={ind} value={rw.id}>{rw.name}</option>\r\n  }):<option></option>\r\n\r\n  let subjectarray = props.user.dropdowns && Array.isArray(props.user.dropdowns) ? props.user.dropdowns[2] : [];\r\n  let subarray = Array.isArray(subjectarray) ? subjectarray.filter(rw=>rw !== null).map((rw, ind) =>{\r\n      return <option key={ind} value={rw.id}>{rw.name}</option>\r\n  }):<option></option>\r\n\r\n  let stafarray = props.staffs && Array.isArray(props.staffs) ? props.staffs : [];\r\n  let starray = stafarray.filter(rw=>rw !== null).map((rw, ind) =>{\r\n      return <option key={ind} value={rw.id}>{rw.surname} {rw.firstname}</option>\r\n  })\r\n \r\n   return (\r\n    <CCol xl={12}  id=\"#formz\">\r\n        <CCard>\r\n            <CCardHeader id='traffic' className=\"card-title mb-0\">\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                <h4>{ id && parseInt(id) > 0 ? 'Edit' : 'Add'} <small> Subjects Allocation</small></h4>\r\n                </CCol>\r\n                <CCol sm=\"6\" className=\"d-md-block\">\r\n                  <CButton  \r\n                      color=\"danger\" \r\n                      onClick={props.onClose}\r\n                      className=\"float-right\">\r\n                    <i className='fa fa-remove'></i>\r\n                  </CButton>\r\n                </CCol>\r\n              </CRow>\r\n              \r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CForm action=\"\" method=\"post\">\r\n              <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-staff\">Staff </CLabel>\r\n                  <CSelect\r\n                      type=\"text\" \r\n                      id=\"nf-staff\" \r\n                      name=\"staff\"\r\n                      onChange={(e)=>setStaff(e.target.value)}\r\n                      placeholder=\"\" \r\n                    >\r\n                      {starray}\r\n                  </CSelect>\r\n                  <CFormText className=\"help-block\">Select the staff</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-subjectid\">Subject </CLabel>\r\n                  <CSelect\r\n                      type=\"text\" \r\n                      id=\"nf-subjectid\" \r\n                      name=\"subjectid\"\r\n                      defaultValue={subjectid}\r\n                      onChange={(e)=>setSubjectid(e.target.value)}\r\n                      placeholder=\"\" \r\n                    >\r\n                      {subarray}\r\n                  </CSelect>\r\n                  <CFormText className=\"help-block\">Select the subject</CFormText>\r\n                </CFormGroup>\r\n             <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-claszid\">Class </CLabel>\r\n                  <CSelect\r\n                      type=\"text\" \r\n                      id=\"nf-claszid\" \r\n                      name=\"claszid\"\r\n                      onChange={(e)=>setClaszid(e.target.value)}\r\n                      placeholder=\"\" \r\n                    >\r\n                      {clarray}\r\n                  </CSelect>\r\n                  <CFormText className=\"help-block\">Select the class</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n              <CLabel htmlFor=\"nf-contact\">Contact/Period</CLabel>\r\n              <CInput \r\n                  type=\"number\" \r\n                  id=\"nf-contact\" \r\n                  name=\"contactz\"\r\n                  value={contact}\r\n                  onChange={(e)=>setContact(e.target.value)}\r\n                  placeholder=\"0\" \r\n                />\r\n              <CFormText className=\"help-block\">Please enter department name</CFormText>\r\n            </CFormGroup>\r\n                </CForm>\r\n            </CCardBody>\r\n            <CCardFooter>\r\n              <CButton type=\"submit\" onClick={handleSubmit} size=\"sm\" color=\"primary\"><CIcon name=\"cil-scrubber\" /> Submit</CButton>{' '}\r\n              <CButton type=\"reset\" onClick={props.onReset} size=\"sm\" color=\"danger\"><CIcon name=\"cil-ban\" /> Reset</CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n      </CCol>\r\n      )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer,\r\n  user:state.userReducer,\r\n  activeschool:state.userReducer.activeschool,\r\n  claszs : state.claszReducer.claszs,\r\n  subjects : state.subjectReducer.subjects,\r\n  staffs : state.staffReducer.staffs,\r\n})\r\nexport default connect(mapStateToProps, {\r\n  registerStaffsubject,\r\n  updateStaffsubject,\r\n  deleteStaffsubject,\r\n  getStaffs\r\n})(Staffsubject)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nconst Staffsubject = (props) => {\r\n \r\n  let data = props.data && Array.isArray(props.data) ? props.data.filter(rw =>rw !== null || rw !== undefined) : []\r\n  let tabl = data.filter(rw=>rw != null).map((row, ind)=>{\r\n      return <tr key={ind}>\r\n                <td className='text-center'>{ind + 1}</td>\r\n                <td className='text-left'>{row.itemname}</td>\r\n                <td className='text-left'>{row.itemname1}</td>\r\n                <td className='text-center'>{row.contact}</td>\r\n                <td>{row.clientname}</td>\r\n                { props.editer === true  || (Array.isArray(props.submenu) && props.submenu.length > 0) ? \r\n                <td className='text-center'>\r\n                   \r\n                    {props.editer === true ?\r\n                     <>\r\n                    <a style={{cursor:'pointer'}} onClick={()=>props.onActivate(row.id, row.is_active)}><i className={`fa ${parseInt(row.is_active) == 1 ? 'fa-thumbs-down text-danger' : 'fa-thumbs-up text-success'} ml-2 px-2`}></i></a>\r\n                    <a style={{cursor:'pointer'}} onClick={()=>props.onEdit(row)}><i className='fa fa-edit ml-2 px-2'></i></a>\r\n                    <a style={{cursor:'pointer'}} onClick={()=>props.onDelete(row)}><i className='fa fa-remove ml-2 px-2 text-danger'></i></a>\r\n                    </>:\"\"}\r\n                </td>:''}\r\n              </tr>\r\n  })\r\n  return (\r\n        <>\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n                <thead className=\"thead-light\" >\r\n                  <tr>\r\n                    <th className=\"text-center\"> SN.</th>\r\n                    <th><i className='fa fa-users'></i> STAFF NAME</th>\r\n                    <th><i className='fa fa-blacboard'></i> CLASS</th>\r\n                    <th><i className='fa fa-book'></i> SUBJECT</th>\r\n                    <th><i className='fa fa-clock-o'></i> PERIODS<br/> (PER WEEK)</th>\r\n                    { props.editer === true  || (props.submenu !== undefined && props.submenu.length > 0) ? <th className=\"text-center\"><i className='fa fa-gear'></i> Action</th>:''}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n              </table>\r\n              </>\r\n         \r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer\r\n})\r\nexport default connect(mapStateToProps, {\r\n})(Staffsubject)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Swal from 'sweetalert'\r\n\r\nconst Staffsubject = (props) => {\r\n\r\n  let popz = (dt) =>{\r\n    console.log(dt)\r\n    Swal(\"Please select what you want to do ?\", {\r\n      buttons: {\r\n        cancel: \"Delete!\",\r\n        catch: {\r\n          text: \"Edit\",\r\n          value: \"catch\",\r\n        },\r\n        defeat: true,\r\n      },\r\n    })\r\n    .then((value) => {\r\n      switch (value) {\r\n     \r\n        case \"defeat\":\r\n          props.onDelete(dt)\r\n          //Swal(\"Pikachu fainted! You gained 500 XP!\");\r\n          break;\r\n     \r\n        case \"catch\":\r\n          props.onEdit(dt)\r\n          //Swal(\"Gotcha!\", \"Pikachu was caught!\", \"success\");\r\n          break;\r\n     \r\n        default:\r\n          Swal(\"canceled!\");\r\n      }\r\n    });\r\n  }\r\n  \r\n  let data = props.data && Array.isArray(props.data) ? props.data.filter(rw =>rw !== null || rw !== 'null' ||  rw !== undefined) : []\r\n  let allStaff = {};\r\n  let allStaffz = {};\r\n  let allStaffName = {};\r\n  let allSubject = {};\r\n  let allClass = {};\r\n  \r\n  data.filter(rw =>rw !== null || rw !== undefined).forEach(prp => {\r\n    if(prp.clientid in allStaff)\r\n    {\r\n        if(prp.itemid in allStaff[prp.clientid])\r\n        {\r\n            if(prp.itemid1 in allStaff[prp.clientid][prp.itemid])\r\n            {\r\n                allStaff[prp.clientid][prp.itemid][prp.itemid1].push(prp.contact)\r\n            }else\r\n            {\r\n                allStaff[prp.clientid][prp.itemid][prp.itemid1] = [prp.contact]\r\n            }\r\n        }else\r\n        {\r\n            allStaff[prp.clientid][prp.itemid] = {}\r\n            allStaff[prp.clientid][prp.itemid][prp.itemid1] = [prp.contact]\r\n        }\r\n        \r\n    }else\r\n    {\r\n        allStaff[prp.clientid] = {}\r\n        allStaff[prp.clientid][prp.itemid] = {}\r\n        allStaff[prp.clientid][prp.itemid][prp.itemid1] =  [prp.contact]\r\n    }\r\n\r\n  });\r\n\r\n  data.filter(rw =>rw !== null || rw !== undefined).forEach(prp => {\r\n    if(prp.clientid in allStaffz)\r\n    {\r\n        if(prp.itemid in allStaffz[prp.clientid])\r\n        {\r\n            if(prp.itemid1 in allStaffz[prp.clientid][prp.itemid])\r\n            {\r\n                allStaffz[prp.clientid][prp.itemid][prp.itemid1].push(prp)\r\n            }else\r\n            {\r\n                allStaffz[prp.clientid][prp.itemid][prp.itemid1] = [prp]\r\n            }\r\n        }else\r\n        {\r\n            allStaffz[prp.clientid][prp.itemid] = {}\r\n            allStaffz[prp.clientid][prp.itemid][prp.itemid1] = [prp]\r\n        }\r\n        \r\n    }else\r\n    {\r\n        allStaffz[prp.clientid] = {}\r\n        allStaffz[prp.clientid][prp.itemid] = {}\r\n        allStaffz[prp.clientid][prp.itemid][prp.itemid1] =  [prp]\r\n    }\r\n\r\n  });\r\n  \r\n  data.forEach(prp => {\r\n    return allStaffName[prp.clientid] = prp.clientname;\r\n  });\r\n  data.forEach(prp => {\r\n    return allSubject[prp.itemid1] = prp.itemabbrv1;\r\n  });\r\n  data.forEach(prp => {\r\n    return allClass[prp.itemid] = prp.itemname;\r\n  });\r\n  let col_arr = {}\r\n  let tablhead = Object.keys(allClass).filter(rw=>rw != null).map((row, ind)=>{\r\n    col_arr[row] = [];\r\n    return <th key={ind} className='text-center'>{allClass[row]}</th>\r\n    })\r\n\r\n  let tabl = Object.keys(allStaffName).filter(rw=>rw != null).map((row, ind)=>{\r\n      let row_arr = []\r\n      return <tr key={ind}>\r\n                <td className='text-left'>{allStaffName[row]}</td>\r\n                    {Object.keys(allClass).filter(rw=>rw != null).map((row1, ind1)=>{\r\n                        let rz = row in allStaff && row1 in allStaff[row] ? allStaff[row][row1] : [] ;\r\n                        let arz = Object.keys(rz).map((r, i)=>{\r\n                            col_arr[row1].push(rz[r].reduce((a, b)=>parseInt(a) + parseInt(b), 0));\r\n                            row_arr.push(rz[r].reduce((a, b)=>parseInt(a) + parseInt(b), 0));\r\n                            return <span key={i} onClick={()=>popz(allStaffz[row][row1][r][0])}>{`${allSubject[r]} (${rz[r].reduce((a, b)=>parseInt(a) + parseInt(b), 0)})`}</span>\r\n                        })\r\n                        return <th key={ind1} className='text-center'>{arz}</th>\r\n                    })}\r\n                    <th className=\"text-center\">{row_arr.reduce((a, b)=>parseInt(a) + parseInt(b), 0)}</th>\r\n              </tr>\r\n  })\r\n  let tablfooter = Object.keys(allClass).filter(rw=>rw != null).map((row, ind)=>{\r\n    let foo = col_arr[row].reduce((a, b)=>parseInt(a) + parseInt(b), 0);\r\n    return <th key={ind} className='text-center'>{foo}</th>\r\n    })\r\n  return (\r\n\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n              <thead>\r\n                  <td>STAFF</td>{tablhead}<th>TOTAL</th>\r\n              </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n                 <thead>\r\n                  <td>TOTAL</td>{tablfooter}<th></th>\r\n              </thead>\r\n              </table>\r\n         \r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer\r\n})\r\nexport default connect(mapStateToProps, {\r\n\r\n})(Staffsubject)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Swal from 'sweetalert'\r\n\r\nconst Staffsubject = (props) => {\r\n  \r\n  let popz = (dt) =>{\r\n    console.log(dt)\r\n    Swal(\"Please select what you want to do ?\", {\r\n      buttons: {\r\n        cancel: \"Delete!\",\r\n        catch: {\r\n          text: \"Edit\",\r\n          value: \"catch\",\r\n        },\r\n        defeat: true,\r\n      },\r\n    })\r\n    .then((value) => {\r\n      switch (value) {\r\n     \r\n        case \"defeat\":\r\n          props.onDelete(dt)\r\n          //Swal(\"Pikachu fainted! You gained 500 XP!\");\r\n          break;\r\n     \r\n        case \"catch\":\r\n          props.onEdit(dt)\r\n          //Swal(\"Gotcha!\", \"Pikachu was caught!\", \"success\");\r\n          break;\r\n     \r\n        default:\r\n          Swal(\"canceled!\");\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  let data =props.data && Array.isArray(props.data) ? props.data.filter(rw =>rw !== null || rw !== undefined) : []\r\n  let allStaff = {};\r\n  let allStaffz = {};\r\n  let allStaffName = {};\r\n  let allSubject = {};\r\n  let allClass = {};\r\n  \r\n  data.filter(rw =>rw !== 'null' || rw !== undefined).forEach(prp => {\r\n    if(prp.clientid in allStaff)\r\n    {\r\n        if(prp.itemid1 in allStaff[prp.clientid])\r\n        {\r\n            if(prp.itemid in allStaff[prp.clientid][prp.itemid1])\r\n            {\r\n                allStaff[prp.clientid][prp.itemid1][prp.itemid].push(prp.contact)\r\n            }else\r\n            {\r\n                allStaff[prp.clientid][prp.itemid1][prp.itemid] = [prp.contact]\r\n            }\r\n        }else\r\n        {\r\n            allStaff[prp.clientid][prp.itemid1] = {}\r\n            allStaff[prp.clientid][prp.itemid1][prp.itemid] = [prp.contact]\r\n        }\r\n        \r\n    }else\r\n    {\r\n        allStaff[prp.clientid] = {}\r\n        allStaff[prp.clientid][prp.itemid1] = {}\r\n        allStaff[prp.clientid][prp.itemid1][prp.itemid] =  [prp.contact]\r\n    }\r\n\r\n  });\r\n  \r\n  data.filter(rw =>rw !== 'null' || rw !== undefined).forEach(prp => {\r\n    if(prp.clientid in allStaffz)\r\n    {\r\n        if(prp.itemid1 in allStaffz[prp.clientid])\r\n        {\r\n            if(prp.itemid in allStaffz[prp.clientid][prp.itemid1])\r\n            {\r\n                allStaffz[prp.clientid][prp.itemid1][prp.itemid].push(prp)\r\n            }else\r\n            {\r\n                allStaffz[prp.clientid][prp.itemid1][prp.itemid] = [prp]\r\n            }\r\n        }else\r\n        {\r\n            allStaffz[prp.clientid][prp.itemid1] = {}\r\n            allStaffz[prp.clientid][prp.itemid1][prp.itemid] = [prp]\r\n        }\r\n        \r\n    }else\r\n    {\r\n        allStaffz[prp.clientid] = {}\r\n        allStaffz[prp.clientid][prp.itemid1] = {}\r\n        allStaffz[prp.clientid][prp.itemid1][prp.itemid] =  [prp]\r\n    }\r\n\r\n  });\r\n  \r\n  \r\n  data.forEach(prp => {\r\n    return allStaffName[prp.clientid] = prp.clientname;\r\n  });\r\n  data.forEach(prp => {\r\n    return allSubject[prp.itemid1] = prp.itemabbrv1;\r\n  });\r\n  data.forEach(prp => {\r\n    return allClass[prp.itemid] = prp.itemname;\r\n  });\r\n  let col_arr = {}\r\n  let tablhead = Object.keys(allSubject).filter(rw=>rw != null).map((row, ind)=>{\r\n    col_arr[row] = [];\r\n    return <th key={ind} className='text-center'>{allSubject[row]}</th>\r\n    })\r\n\r\n  let tabl = Object.keys(allStaffName).filter(rw=>rw != null).map((row, ind)=>{\r\n      let row_arr = []\r\n      return <tr key={ind}>\r\n                <td className='text-left'>{allStaffName[row]}</td>\r\n                    {Object.keys(allSubject).filter(rw=>rw != null).map((row1, ind1)=>{\r\n                        let rz = row in allStaff && row1 in allStaff[row] ? allStaff[row][row1] : [] ;\r\n                        let arz = Object.keys(rz).map((r, i)=>{\r\n                            col_arr[row1].push(rz[r].reduce((a, b)=>parseInt(a) + parseInt(b), 0));\r\n                            row_arr.push(rz[r].reduce((a, b)=>parseInt(a) + parseInt(b), 0));\r\n                            return <span key={i} onClick={()=>popz(allStaffz[row][row1][r][0])} style={{display:'block'}}>{`${allClass[r]} (${rz[r].reduce((a, b)=>parseInt(a) + parseInt(b), 0)})`}</span>\r\n                        })\r\n                        return <th key={ind1} className='text-center'>{arz}</th>\r\n                    })}\r\n                    <th className=\"text-center\">{row_arr.reduce((a, b)=>parseInt(a) + parseInt(b), 0)}</th>\r\n              </tr>\r\n  })\r\n  let tablfooter = Object.keys(allSubject).filter(rw=>rw != null).map((row, ind)=>{\r\n    let foo = col_arr[row].reduce((a, b)=>parseInt(a) + parseInt(b), 0);\r\n    return <th key={ind} className='text-center'>{foo}</th>\r\n    })\r\n  return (\r\n\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n              <thead>\r\n                  <td>STAFF</td>{tablhead}<th>TOTAL</th>\r\n              </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n                 <thead>\r\n                  <td>TOTAL</td>{tablfooter}<th></th>\r\n              </thead>\r\n              </table>\r\n         \r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer\r\n})\r\nexport default connect(mapStateToProps, {\r\n\r\n})(Staffsubject)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Swal from 'sweetalert'\r\n\r\nconst Staffsubject = (props) => {\r\n  let popz = (dt) =>{\r\n    if(dt && Array.isArray(dt) && dt.length === 1){\r\n    Swal(\"Please select what you want to do ?\", {\r\n      buttons: {\r\n        cancel: \"Delete!\",\r\n        catch: {\r\n          text: \"Edit\",\r\n          value: \"catch\",\r\n        },\r\n        defeat: true,\r\n      },\r\n    })\r\n    .then((value) => {\r\n      switch (value) {\r\n     \r\n        case \"defeat\":\r\n          props.onDelete(dt[0])\r\n          break;\r\n        case \"catch\":\r\n          props.onEdit(dt[0])\r\n          break;\r\n        default:\r\n          Swal(\"canceled!\");\r\n      }\r\n    });\r\n  }\r\n  }\r\n\r\n  let data = props.data && Array.isArray(props.data) ? props.data.filter(rw =>rw !== null || rw !== 'null' || rw !== undefined) : []\r\n  let allStaff = {};\r\n  let allStaffz = {};\r\n  let allStaffName = {};\r\n  let allSubject = {};\r\n  let allClass = {};\r\n  \r\n  data.filter(rw =>rw !== 'null' || rw !== null || rw !== undefined).forEach(prp => {\r\n    if(prp.itemid1 in allStaff)\r\n    {\r\n        if(prp.itemid in allStaff[prp.itemid1])\r\n        {\r\n            allStaff[prp.itemid1][prp.itemid].push(prp.contact)\r\n        }else\r\n        {\r\n            allStaff[prp.itemid1][prp.itemid] = [prp.contact]\r\n        }\r\n        \r\n    }else\r\n    {\r\n        allStaff[prp.itemid1] = {}\r\n        allStaff[prp.itemid1][prp.itemid] = [prp.contact]\r\n    }\r\n\r\n  });\r\n  \r\n  data.filter(rw =>rw !== 'null' || rw !== null || rw !== undefined).forEach(prp => {\r\n    if(prp.itemid1 in allStaffz)\r\n    {\r\n        if(prp.itemid in allStaffz[prp.itemid1])\r\n        {\r\n            allStaffz[prp.itemid1][prp.itemid].push(prp)\r\n        }else\r\n        {\r\n            allStaffz[prp.itemid1][prp.itemid] = [prp]\r\n        }\r\n        \r\n    }else\r\n    {\r\n        allStaffz[prp.itemid1] = {}\r\n        allStaffz[prp.itemid1][prp.itemid] = [prp]\r\n    }\r\n\r\n  });\r\n  \r\n  \r\n  data.forEach(prp => {\r\n    return allStaffName[prp.clientid] = prp.clientname;\r\n  });\r\n  data.forEach(prp => {\r\n    return allSubject[prp.itemid1] = prp.itemabbrv1;\r\n  });\r\n  data.forEach(prp => {\r\n    return allClass[prp.itemid] = prp.itemname;\r\n  });\r\n  let col_arr = {}\r\n  let tablhead = Object.keys(allClass).filter(rw=>rw != null).map((row, ind)=>{\r\n    col_arr[row] = [];\r\n    return <th key={ind} className='text-center'>{allClass[row]}</th>\r\n    })\r\n\r\n  let tabl = Object.keys(allSubject).filter(rw=>rw != null).map((row, ind)=>{\r\n      let row_arr = []\r\n      return <tr key={ind}>\r\n                <td className='text-left'>{allSubject[row]}</td>\r\n                    {Object.keys(allClass).filter(rw=>rw != null).map((row1, ind1)=>{\r\n                        let rz = row in allStaff && row1 in allStaff[row] ? allStaff[row][row1] : [] ;\r\n                        \r\n                            col_arr[row1].push(rz.reduce((a, b)=>parseInt(a) + parseInt(b), 0));\r\n                            row_arr.push(rz.reduce((a, b)=>parseInt(a) + parseInt(b), 0));\r\n                            let y = rz.reduce((a, b)=>parseInt(a) + parseInt(b), 0)\r\n                        \r\n                        return <th key={ind1} onClick={()=>popz(allStaffz[row][row1])} className='text-center'><span style={{display:'block'}}>{parseInt(y) > 0 ? y : '-'}</span></th>\r\n                    })}\r\n                    <th className=\"text-center\">{row_arr.reduce((a, b)=>parseInt(a) + parseInt(b), 0)}</th>\r\n              </tr>\r\n  })\r\n  let tablfooter = Object.keys(allClass).filter(rw=>rw != null).map((row, ind)=>{\r\n    let foo = col_arr[row].reduce((a, b)=>parseInt(a) + parseInt(b), 0);\r\n    return <th key={ind} className='text-center'>{foo}</th>\r\n    })\r\n  return (\r\n\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n              <thead>\r\n                  <td>STAFF</td>{tablhead}<th>TOTAL</th>\r\n              </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n                 <thead>\r\n                  <td>TOTAL</td>{tablfooter}<th></th>\r\n              </thead>\r\n              </table>\r\n         \r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer\r\n})\r\nexport default connect(mapStateToProps, {\r\n\r\n})(Staffsubject)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {getStaffsubjects, getStaffsubject, registerStaffsubject, updateStaffsubject, deleteStaffsubject} from './../../../actions/staff/staffsubject';\r\nimport { useHistory} from 'react-router-dom'\r\nimport Staffsubject0 from './Staffsubject0';\r\nimport Staffsubject1 from './Staffsubject1';\r\nimport Staffsubject2 from './Staffsubject2';\r\nimport Staffsubject3 from './Staffsubject3';\r\nimport { \r\n    CTabs,\r\n    CTabContent,\r\n    CTabPane,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CNavbar\r\n } from '@coreui/react';\r\n\r\nconst Staffsubject = (props) => { \r\n  \r\n  return (\r\n        <>\r\n        <CTabs>\r\n              <CNav variant=\"tabs\">\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Home\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Staff/Class\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Staff/Subject\r\n                  </CNavLink>\r\n                </CNavItem>\r\n                <CNavItem>\r\n                  <CNavLink>\r\n                    Subject/Class\r\n                  </CNavLink>\r\n                </CNavItem>\r\n              </CNav>\r\n              <CTabContent>\r\n                <CTabPane>\r\n                 <Staffsubject0 \r\n                    pid={props.pid}\r\n                    qid={props.qid}\r\n                    did={props.did}\r\n                    editer={props.editer}\r\n                    submenu={props.submenu}\r\n                    onActivate={(rw, ini)=>props.onActivate(rw, ini)}\r\n                    onEdit={(rw)=>props.onEdit(rw)}\r\n                    onDelete={(rw)=>props.onDelete(rw)}\r\n                    data={props.data}\r\n                 />\r\n                </CTabPane>\r\n                <CTabPane>\r\n              <Staffsubject1  \r\n                    data={props.data}\r\n                    onEdit={(rw)=>props.onEdit(rw)}\r\n                    onDelete={(rw)=>props.onDelete(rw)}\r\n              />\r\n              </CTabPane>\r\n                <CTabPane>\r\n              <Staffsubject2  \r\n                    data={props.data}\r\n                    onEdit={(rw)=>props.onEdit(rw)}\r\n                    onDelete={(rw)=>props.onDelete(rw)}\r\n                    />\r\n              </CTabPane>\r\n                <CTabPane>\r\n              <Staffsubject3  \r\n                    data={props.data}\r\n                    onEdit={(rw)=>props.onEdit(rw)}\r\n                    onDelete={(rw)=>props.onDelete(rw)}\r\n                    />\r\n              </CTabPane>\r\n              </CTabContent>\r\n            </CTabs>\r\n              </>\r\n         \r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffsubjects : state.staffsubjectReducer\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getStaffsubjects,\r\n  getStaffsubject,\r\n  registerStaffsubject,\r\n  updateStaffsubject,\r\n  deleteStaffsubject\r\n})(Staffsubject)\r\n"],"sourceRoot":""}