{"version":3,"sources":["views/staff/StaffClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","actions/staff/staff.js","actions/setting/clasz.js","actions/staff/staffclass.js"],"names":["connect","state","staffclasss","staffclassReducer","terms","termReducer","claszs","claszReducer","staffs","staffReducer","school","schoolReducer","dropdowns","getStaffs","getStaffclasss","getStaffclass","registerStaffclass","updateStaffclass","deleteStaffclass","getClaszs","props","termid","useParams","term","useHistory","useLocation","search","match","useState","collapse","setCollapse","id","setId","dts","setDts","claszid","setClaszid","staff","setStaff","useEffect","params","data","JSON","stringify","cat","table","narration","params1","parseInt","dt","clientid","itemid","setElement","onReset","deparr","filter","rw","termname","length","name","clarray","Array","isArray","map","ind","key","value","starray","surname","firstname","tabl","undefined","row","className","itemname","clientname","color","size","onClick","cid","sm","style","textTransform","data-target","data-toggle","e","preventDefault","show","xl","action","method","htmlFor","type","onChange","target","placeholder","fd","FormData","append","groupid","_slicedToArray","arr","i","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","path","API_PATH_STAFF","dispatch","getState","token","MAIN_TOKEN","STAFF_LOADING","axios","get","axiosConfig","then","res","STAFF_GET_MULTIPLE","payload","catch","STAFF_LOADING_ERROR","getStaffAll","STAFF_GET_ALL","searchStaff","STAFF_GET_SEARCH","birthday","STAFF_GET_BIRTHDAY","getStaff","STAFF_GET_ONE","deleteStaff","POST","STAFF_DELETE_SUCCESS","STAFF_DELETE_FAIL","registerStaff","post","axiosConfig1","STAFF_REGISTER_SUCCESS","STAFF_REGISTER_FAIL","updateStaff","STAFF_UPDATE_SUCCESS","STAFF_UPDATE_FAIL","API_PATH_SETTING","CLASZ_LOADING","CLASZ_GET_MULTIPLE","CLASZ_LOADING_ERROR","getClasz","CLASZ_GET_ONE","deleteClasz","CLASZ_DELETE_SUCCESS","CLASZ_DELETE_FAIL","registerClasz","CLASZ_REGISTER_SUCCESS","CLASZ_REGISTER_FAIL","updateClasz","CLASZ_UPDATE_SUCCESS","CLASZ_UPDATE_FAIL","STAFFCLASS_LOADING","STAFFCLASS_GET_MULTIPLE","STAFFCLASS_LOADING_ERROR","STAFFCLASS_GET_ONE","STAFFCLASS_DELETE_SUCCESS","STAFFCLASS_DELETE_FAIL","STAFFCLASS_REGISTER_SUCCESS","STAFFCLASS_REGISTER_FAIL","STAFFCLASS_UPDATE_SUCCESS","STAFFCLASS_UPDATE_FAIL"],"mappings":"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","file":"static/js/36.5e2bc635.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {getStaffclasss, getStaffclass, registerStaffclass, updateStaffclass, deleteStaffclass} from './../../actions/staff/staffclass';\r\nimport {getClaszs} from './../../actions/setting/clasz';\r\nimport {getStaffs} from './../../actions/staff/staff';\r\nimport { useHistory, useLocation, useParams } from 'react-router-dom'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CInput,\r\n  CCardFooter,\r\n  CCollapse,\r\n  CFormText,\r\n  CDropdown,\r\n  CDropdownItem,\r\n  CDropdownDivider,\r\n  CSelect,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CInputGroup,\r\n  CInputGroupAppend,\r\n  CInputGroupPrepend\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { setElement } from '../../actions/common';\r\nimport department from '../../reducers/setting/department';\r\n\r\n\r\n\r\nconst Staffclass = (props) => {\r\n  const termid = useParams().term\r\n  const groupid = 1;\r\n  const history = useHistory()\r\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\r\n  const [collapse, setCollapse] = useState(false)\r\n  const [id, setId] = useState(null)\r\n  const [dts, setDts] = useState('')\r\n  const [claszid, setClaszid] = useState()\r\n  const [staff, setStaff] = useState()\r\n \r\n  const toggle = (e) => {\r\n    setCollapse(!collapse)\r\n    e.preventDefault()\r\n  }\r\n//GET STAFFCLASSS PER SCHOOL\r\n  useEffect(() => {\r\n    let params = {\r\n      data:JSON.stringify(\r\n      {\r\n        'schoolid': props.school.id\r\n      }),\r\n      cat:'select',\r\n      table:'staffs',\r\n      narration:'get staffs'\r\n    }\r\n    props.getStaffs(params)\r\n    let params1 = {\r\n      data:JSON.stringify(\r\n      {\r\n          'termid': termid,\r\n          'grp': groupid,\r\n      }),\r\n      cat:'staffclass',\r\n      table:'accessstaffclass',\r\n      narration:'get staff classes'\r\n    }\r\n    props.getStaffclasss(params1);\r\n    \r\n  }, [termid, groupid, props.school.id])\r\n\r\n  //CHANGE STATE AS EDIT OR ADD\r\n  useEffect(() => {\r\n    if(id && parseInt(id) > 0)\r\n    {\r\n      let dt = dts;\r\n      setStaff(dt.clientid);\r\n      setClaszid(dt.itemid);\r\n      setElement('nf-claszid', dt.itemid )\r\n      setElement('nf-staff', dt.clientid )\r\n    }else{\r\n      setStaff('');\r\n      setClaszid('');\r\n    }\r\n    \r\n  }, [id])\r\n\r\n  const onEdit = (dt) =>{\r\n      setId(dt.id);\r\n      setDts(dt);\r\n      setCollapse(true);\r\n  }\r\n  const onDelete = (rw, dt) =>{\r\n    \r\n  }\r\n  const onActivate = (rw, num) =>{\r\n    let nu = parseInt(num) === 0 ? 1 : 0;\r\n    let fd = new FormData();\r\n    fd.append('id', rw);\r\n    fd.append('is_active', nu);\r\n    props.updateStaffclass(fd);\r\n  }\r\n  const onReset = () =>setId(null);\r\n  const onClose = () =>setCollapse(false);\r\n\r\n  const handleSubmit = () =>{\r\n    if(parseInt(staff) > 0)\r\n    {\r\n      let fd = new FormData();\r\n      fd.append('itemid', claszid);\r\n      fd.append('clientid', staff);\r\n      fd.append('checker', groupid+'_'+termid+'_'+staff+'_'+claszid);\r\n      fd.append('table', 'access');\r\n      \r\n      if(id && parseInt(id) > 0)\r\n      {\r\n        //UPDATE \r\n        fd.append('id', id);\r\n        fd.append('cat', 'updates');\r\n        props.updateStaffclass(fd)\r\n        \r\n      }else if(termid && parseInt(termid) > 0)\r\n      {\r\n        //INSERT\r\n        fd.append('grp', groupid);\r\n        fd.append('termid', termid);\r\n        fd.append('cat', 'inserts');\r\n        props.registerStaffclass(fd)\r\n      }\r\n      onReset()\r\n    }\r\n  }\r\n  \r\n  \r\n  let deparr = props.dropdowns[0].filter(rw =>parseInt(rw.id) === parseInt(termid) && parseInt(rw.id) > 0);\r\n  let termname = deparr.length > 0 ? deparr[0].name : 'None';\r\n\r\n  let claszarray = props.dropdowns && Array.isArray(props.dropdowns) ? props.dropdowns[1] : [];\r\n  let clarray = claszarray.filter(rw=>rw !== null).map((rw, ind) =>{\r\n      return <option key={ind} value={rw.id}>{rw.name}</option>\r\n  })\r\n\r\n  let stafarray = props.staffs && Array.isArray(props.staffs) ? props.staffs : [];\r\n  let starray = stafarray.filter(rw=>rw !== null).map((rw, ind) =>{\r\n      return <option key={ind} value={rw.id}>{rw.surname} {rw.firstname}</option>\r\n  })\r\n  \r\n  let data = props.staffclasss.staffclasss && Array.isArray(props.staffclasss.staffclasss) ? props.staffclasss.staffclasss.filter(rw =>rw !== null || rw !== undefined) : []\r\n  \r\n  let tabl = data.filter(rw=>rw !== null).map((row, ind)=>{\r\n      return <tr key={ind}>\r\n                <td className='text-center'>{ind + 1}</td>\r\n                <td className='text-center'>{row.itemname}</td>\r\n                <td>{row.clientname}</td>\r\n                <td className='text-center'>\r\n                <CDropdown className=\"m-0 btn-group\">\r\n                  <CDropdownToggle color=\"success\" size=\"sm\">\r\n                  <i className='fa fa-gear'></i> Action\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem onClick={()=>onEdit(row)} >Edit</CDropdownItem>\r\n                    <CDropdownItem onClick={()=>onDelete(row.cid, row)}>Delete</CDropdownItem>\r\n                    <CDropdownDivider />\r\n                    <CDropdownItem>Another Action</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n                </td>\r\n              </tr>\r\n  })\r\n  return (\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n            <h4 id=\"traffic\" className=\"card-title mb-0\">Class Teacher Allocation : {termname}</h4>\r\n              <div className=\"small text-muted\" style={{textTransform:'capitalize'}}>{props.school.name}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-md-block\">\r\n              <CButton \r\n                  data-target='#formz' \r\n                  data-toggle=\"collapse\" \r\n                  color=\"primary\" \r\n                  onClick={toggle}\r\n                  className=\"float-right\">\r\n                <i className='fa fa-plus'></i>\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th className=\"text-center\"> SN.</th>\r\n                    <th><i className='fa fa-list text-center'></i> CLASS</th>\r\n                    <th><i className='fa fa-list'></i> STAFF NAME</th>\r\n                    <th><i className='fa fa-gear'></i> ACTION</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n              </table>\r\n          </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n        <CCollapse show={collapse}>\r\n        <CCol xl={12}  id=\"#formz\">\r\n        <CCard>\r\n            <CCardHeader id='traffic' className=\"card-title mb-0\">\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                <h4>{ id && parseInt(id) > 0 ? 'Edit' : 'Add'} <small> Staffclass</small></h4>\r\n                </CCol>\r\n                <CCol sm=\"6\" className=\"d-md-block\">\r\n                  <CButton  \r\n                      color=\"danger\" \r\n                      onClick={onClose}\r\n                      className=\"float-right\">\r\n                    <i className='fa fa-remove'></i>\r\n                  </CButton>\r\n                </CCol>\r\n              </CRow>\r\n              \r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CForm action=\"\" method=\"post\">\r\n              <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-staff\">Staff </CLabel>\r\n                  <CSelect\r\n                      type=\"text\" \r\n                      id=\"nf-staff\" \r\n                      name=\"staff\"\r\n                      onChange={(e)=>setStaff(e.target.value)}\r\n                      placeholder=\"\" \r\n                    >\r\n                      {starray}\r\n                  </CSelect>\r\n                  <CFormText className=\"help-block\">Select the staff</CFormText>\r\n                </CFormGroup>\r\n             <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-claszid\">Class </CLabel>\r\n                  <CSelect\r\n                      type=\"text\" \r\n                      id=\"nf-claszid\" \r\n                      name=\"claszid\"\r\n                      onChange={(e)=>setClaszid(e.target.value)}\r\n                      placeholder=\"\" \r\n                    >\r\n                      {clarray}\r\n                  </CSelect>\r\n                  <CFormText className=\"help-block\">Select the class</CFormText>\r\n                </CFormGroup>\r\n                </CForm>\r\n            </CCardBody>\r\n            <CCardFooter>\r\n              <CButton type=\"submit\" onClick={handleSubmit} size=\"sm\" color=\"primary\"><CIcon name=\"cil-scrubber\" /> Submit</CButton>{' '}\r\n              <CButton type=\"reset\" onClick={onReset} size=\"sm\" color=\"danger\"><CIcon name=\"cil-ban\" /> Reset</CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n      </CCol>\r\n      </CCollapse>\r\n    </CRow>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  staffclasss : state.staffclassReducer,\r\n  terms : state.termReducer.terms,\r\n  claszs : state.claszReducer.claszs,\r\n  staffs : state.staffReducer.staffs,\r\n  school : state.schoolReducer.school,\r\n  dropdowns : state.schoolReducer.dropdowns\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getStaffs,\r\n  getStaffclasss,\r\n  getStaffclass,\r\n  registerStaffclass,\r\n  updateStaffclass,\r\n  deleteStaffclass,\r\n  getClaszs\r\n})(Staffclass)\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios';\r\nimport {\r\n    STAFF_GET_ONE,\r\n    STAFF_GET_MULTIPLE,\r\n    STAFF_GET_ALL,\r\n    STAFF_GET_BIRTHDAY,\r\n    STAFF_GET_SEARCH,\r\n    STAFF_REGISTER_SUCCESS,\r\n    STAFF_REGISTER_FAIL,\r\n    STAFF_LOADING,\r\n    STAFF_LOADING_ERROR,\r\n    STAFF_UPDATE_SUCCESS,\r\n    STAFF_UPDATE_FAIL,\r\n    STAFF_DELETE_SUCCESS,\r\n    STAFF_DELETE_FAIL\r\n} from \"./../../types/staff/staff\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'staffs';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFF \r\nexport const getStaffs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STAFF \r\nexport const getStaffAll = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                      \r\n                dispatch({\r\n                    type: STAFF_GET_ALL,\r\n                    payload: res.data\r\n                 })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                   type : STAFF_LOADING_ERROR,\r\n                   payload:err\r\n                })\r\n            })\r\n};\r\n\r\nexport const searchStaff = params => (dispatch, getState) => {\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_SEARCH,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\nexport const birthday = params => (dispatch, getState) => {\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_BIRTHDAY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\n//GET SINGLE STAFF \r\nexport const getStaff = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFF_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFF DELETE\r\nexport const deleteStaff = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFF REGISTER\r\nexport const registerStaff = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFF UPDATE\r\nexport const updateStaff = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    CLASZ_GET_ONE,\r\n    CLASZ_GET_MULTIPLE,\r\n    CLASZ_REGISTER_SUCCESS,\r\n    CLASZ_REGISTER_FAIL,\r\n    CLASZ_LOADING,\r\n    CLASZ_LOADING_ERROR,\r\n    CLASZ_UPDATE_SUCCESS,\r\n    CLASZ_UPDATE_FAIL,\r\n    CLASZ_DELETE_SUCCESS,\r\n    CLASZ_DELETE_FAIL\r\n} from \"../../types/setting/clasz\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'claszs';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL CLASZ \r\nexport const getClaszs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : CLASZ_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: CLASZ_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : CLASZ_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE CLASZ \r\nexport const getClasz = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : CLASZ_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//CLASZ DELETE\r\nexport const deleteClasz = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//CLASZ REGISTER\r\nexport const registerClasz = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //CLASZ UPDATE\r\nexport const updateClasz = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STAFFCLASS_GET_ONE,\r\n    STAFFCLASS_GET_MULTIPLE,\r\n    STAFFCLASS_REGISTER_SUCCESS,\r\n    STAFFCLASS_REGISTER_FAIL,\r\n    STAFFCLASS_LOADING,\r\n    STAFFCLASS_LOADING_ERROR,\r\n    STAFFCLASS_UPDATE_SUCCESS,\r\n    STAFFCLASS_UPDATE_FAIL,\r\n    STAFFCLASS_DELETE_SUCCESS,\r\n    STAFFCLASS_DELETE_FAIL\r\n} from \"./../../types/staff/staffclass\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFFCLASS \r\nexport const getStaffclasss = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFFCLASS_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFFCLASS_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFFCLASS_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STAFFCLASS \r\nexport const getStaffclass = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFFCLASS_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFFCLASS DELETE\r\nexport const deleteStaffclass = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFCLASS_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFCLASS_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFFCLASS REGISTER\r\nexport const registerStaffclass = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFCLASS_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFCLASS_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFFCLASS UPDATE\r\nexport const updateStaffclass = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFFCLASS_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFFCLASS_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n"],"sourceRoot":""}