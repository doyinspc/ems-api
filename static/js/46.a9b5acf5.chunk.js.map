{"version":3,"sources":["views/setting/School.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","actions/setting/school.js"],"names":["connect","state","schools","schoolReducer","getSchools","getSchool","registerSchool","updateSchool","deleteSchool","props","history","useHistory","useLocation","search","match","useState","collapse","setCollapse","id","setId","dts","setDts","name","setName","abbrv","setAbbrv","phone1","setPhone1","phone2","setPhone2","email","setEmail","address","setAddress","country","setCountry","states","setStates","useEffect","params","data","JSON","stringify","cat","table","narration","parseInt","dt","onReset","tabl","Array","isArray","filter","rw","undefined","map","row","ind","key","className","href","color","size","onClick","item","push","sm","data-target","data-toggle","e","preventDefault","show","xl","action","method","htmlFor","type","defaultValue","onChange","target","value","placeholder","length","fd","FormData","append","_slicedToArray","arr","i","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","err","unsupportedIterableToArray","TypeError","TABLE_NAME","path","API_PATH_SETTING","dispatch","getState","token","MAIN_TOKEN","SCHOOL_LOADING","axios","get","axiosConfig","then","res","SCHOOL_GET_MULTIPLE","payload","catch","SCHOOL_LOADING_ERROR","SCHOOL_GET_ONE","POST","SCHOOL_DELETE_SUCCESS","SCHOOL_DELETE_FAIL","post","axiosConfig1","SCHOOL_REGISTER_SUCCESS","SCHOOL_REGISTER_FAIL","SCHOOL_UPDATE_SUCCESS","SCHOOL_UPDATE_FAIL"],"mappings":"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","file":"static/js/46.a9b5acf5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport  moment from 'moment';\r\nimport {getSchools, getSchool, registerSchool, updateSchool, deleteSchool} from './../../actions/setting/school';\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CInput,\r\n  CCardFooter,\r\n  CCollapse,\r\n  CFormText,\r\n  CDropdown,\r\n  CDropdownItem,\r\n  CDropdownDivider,\r\n  CDropdownToggle,\r\n  CDropdownMenu\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nconst School = (props) => {\r\n  const history = useHistory()\r\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\r\n  const [collapse, setCollapse] = useState(false)\r\n  const [id, setId] = useState('')\r\n  const [dts, setDts] = useState({})\r\n  const [name, setName] = useState('')\r\n  const [abbrv, setAbbrv] = useState('')\r\n  const [phone1, setPhone1] = useState('')\r\n  const [phone2, setPhone2] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [address, setAddress] = useState('')\r\n  const [country, setCountry] = useState('')\r\n  const [states, setStates] = useState('')\r\n\r\n  const toggle = (e) => {\r\n    setCollapse(!collapse)\r\n    e.preventDefault()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let params = {\r\n      data:JSON.stringify({}),\r\n      cat:'all',\r\n      table:'schools',\r\n      narration:'get schools'\r\n  }\r\n    props.getSchools(params)\r\n    \r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if(parseInt(id) > 0){\r\n        let dt = dts;\r\n        setName(dt.name);\r\n        setAbbrv(dt.abbrv);\r\n        setPhone1(dt.phone1);\r\n        setPhone2(dt.phone2);\r\n        setEmail(dt.email);\r\n        setAddress(dt.address);\r\n        setCountry(dt.country);\r\n        setStates(dt.states);\r\n    }else\r\n    {\r\n        setName('');\r\n        setAbbrv('');\r\n        setPhone1('');\r\n        setPhone2('');\r\n        setEmail('');\r\n        setAddress('');\r\n        setCountry('');\r\n        setStates('');\r\n\r\n    }\r\n      \r\n  }, [id])\r\n\r\n  const onEdit = (rw, dt) =>{\r\n      setId(dt.id);\r\n      setDts(dt);\r\n      setCollapse(true)\r\n  }\r\n  const onDelete = (rw, dt) =>{\r\n    \r\n  }\r\n  const onReset = () =>{\r\n    setId(null);\r\n    setDts({});\r\n  }\r\n  const onClose = (rw, dt) =>{\r\n    setCollapse(false)\r\n  }\r\n\r\n  const handleSubmit = () =>{\r\n    if(name.length > 0){\r\n      let fd = new FormData();\r\n      fd.append('name', name);\r\n      fd.append('abbrv', abbrv);\r\n      fd.append('phone1', phone1);\r\n      fd.append('phone2', phone2);\r\n      fd.append('email', email);\r\n      fd.append('country', country);\r\n      fd.append('states', states);\r\n      fd.append('address', address);\r\n      fd.append('table', 'schools');\r\n      \r\n      if(id && parseInt(id) > 0)\r\n      {\r\n        //UPDATE \r\n        fd.append('id', id);\r\n        fd.append('cat', 'update');\r\n        props.updateSchool(fd)\r\n        \r\n      }else\r\n      {\r\n        //INSERT\r\n        fd.append('cat', 'insert');\r\n        props.registerSchool(fd)\r\n      }\r\n      onReset()\r\n    }\r\n  }\r\n \r\n  let data = props.schools.schools && Array.isArray(props.schools.schools) ? props.schools.schools.filter(rw =>rw !== null || rw !== undefined) : []\r\n  \r\n  let tabl = data.filter(rw=>rw != null).map((row, ind)=>{\r\n      return <tr key={ind}>\r\n                <td className='text-center'>{ind + 1}</td>\r\n                <td>\r\n                    {row.name}\r\n                    <div className=\"small text-muted\">{row.abbrv}</div>\r\n                </td>\r\n                <td>\r\n                <div className=\"small text-muted\">\r\n                    <span>Phone</span>: <strong><a href={`tel:${row.phone1}`}>{row.phone1}</a> <a href={`mailto:${row.phone2}`}>{row.phone2}</a></strong>\r\n                </div>\r\n                <div className=\"small text-muted\">\r\n                    <span>Email</span>: <strong><a href={`mailto:${row.email}`}>{row.email}</a></strong> \r\n                </div>\r\n                </td>\r\n                <td className='text-center'>\r\n                <div className=\"small text-muted\">{row.address}</div>\r\n                <div className=\"small text-muted\"><strong>{row.states} | {row.country}</strong></div>\r\n                 </td>\r\n                <td className='text-center'>\r\n                <CDropdown className=\"m-0 btn-group \">\r\n                  <CDropdownToggle color=\"success\" size=\"sm\">\r\n                  <i className='fa fa-gear'></i> Action\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem\r\n                      onClick={(item) => history.push(`/school/${row.id}`)}\r\n                     >Analysis</CDropdownItem>\r\n                    <CDropdownItem onClick={()=>onEdit(row.id, row)} >Edit</CDropdownItem>\r\n                    <CDropdownItem onClick={()=>onDelete(row.id, row)}>Delete</CDropdownItem>\r\n                    <CDropdownDivider />\r\n                    <CDropdownItem>Another Action</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n                </td>\r\n              </tr>\r\n  })\r\n  return (\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Schools</h4>\r\n              <div className=\"small text-muted\">Academic Calendar</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-md-block\">\r\n              <CButton \r\n                  data-target='#formz' \r\n                  data-toggle=\"collapse\" \r\n                  color=\"primary\" \r\n                  onClick={toggle}\r\n                  className=\"float-right\">\r\n                <i className='fa fa-plus'></i>\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th className=\"text-center\">SN.</th>\r\n                    <th><i className='fa fa-list'></i> School</th>\r\n                    <th className=\"text-center\"> <i className='fa fa-text'></i> Contact</th>\r\n                    <th className=\"text-center\"> <i className='fa fa-text'></i> Abbrv</th>\r\n                    <th className=\"text-center\"><i className='fa fa-gear'></i> Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n              </table>\r\n          </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n        <CCollapse show={collapse}>\r\n        <CCol xl={12}  id=\"#formz\">\r\n        <CCard>\r\n            <CCardHeader id='traffic' className=\"card-title mb-0\">\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                <h4>{ id && parseInt(id) > 0 ? 'Edit' : 'Add'} <small> School</small></h4>\r\n                </CCol>\r\n                <CCol sm=\"6\" className=\"d-md-block\">\r\n                  <CButton  \r\n                      color=\"danger\" \r\n                      onClick={onClose}\r\n                      className=\"float-right\">\r\n                    <i className='fa fa-remove'></i>\r\n                  </CButton>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CForm action=\"\" method=\"post\">\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-name\">School</CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-name\"\r\n                      defaultValue={name}\r\n                      onChange={(e)=>setName(e.target.value)}\r\n                      placeholder=\"MESL SENIOR SECONDARY SCHOOL\" \r\n                    />\r\n                  <CFormText className=\"help-block\">eNTER THE FULL NAME OF THE SCHOOL</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-abbrv\">Abbrv./Matriculation Number prefix </CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-abbrv\" \r\n                      defaultValue={abbrv}\r\n                      onChange={(e)=>setAbbrv(e.target.value)}\r\n                      placeholder=\"MESL/KS/\" \r\n                    />\r\n                  <CFormText className=\"help-block\">Abbreviation</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-abbrv\">Phone</CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-phone1\" \r\n                      name=\"phone1\"\r\n                      defaultValue={phone1}\r\n                      onChange={(e)=>setPhone1(e.target.value)}\r\n                      placeholder=\"080000000000\" \r\n                    />\r\n                  <CFormText className=\"help-block\">Main phone number</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-phone2\">Alternative Phone </CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-phone2\" \r\n                      name=\"phone2\"\r\n                      defaultValue={phone2}\r\n                      onChange={(e)=>setPhone2(e.target.value)}\r\n                      placeholder=\"080000000000\" \r\n                    />\r\n                  \r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-email\">Email </CLabel>\r\n                  <CInput \r\n                      type=\"email\" \r\n                      id=\"nf-email\" \r\n                      name=\"email\"\r\n                      defaultValue={email}\r\n                      onChange={(e)=>setEmail(e.target.value)}\r\n                      placeholder=\"in@gmail.com\" \r\n                    />\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-address\">Address </CLabel>\r\n                  <CInput \r\n                      type=\"textarea\" \r\n                      id=\"nf-address\" \r\n                      name=\"address\"\r\n                      defaultValue={address}\r\n                      onChange={(e)=>setAddress(e.target.value)}\r\n                      placeholder=\"12 Bakonle way....\" \r\n                    />\r\n                  \r\n                </CFormGroup>\r\n              </CForm>\r\n            </CCardBody>\r\n            \r\n            <CCardFooter>\r\n              <CButton type=\"submit\" onClick={handleSubmit} size=\"sm\" color=\"primary\"><CIcon name=\"cil-scrubber\" /> Submit</CButton>{' '}\r\n              <CButton type=\"reset\" onClick={onReset} size=\"sm\" color=\"danger\"><CIcon name=\"cil-ban\" /> Reset</CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n      </CCol>\r\n      </CCollapse>\r\n    </CRow>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  schools : state.schoolReducer\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getSchools,\r\n  getSchool,\r\n  registerSchool,\r\n  updateSchool,\r\n  deleteSchool\r\n})(School)\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios';\r\nimport {\r\n    SCHOOL_GET_ONE,\r\n    SCHOOL_GET_MULTIPLE,\r\n    SCHOOL_GET_DROPDOWNS,\r\n    SCHOOL_REGISTER_SUCCESS,\r\n    SCHOOL_REGISTER_FAIL,\r\n    SCHOOL_LOADING,\r\n    SCHOOL_LOADING_ERROR,\r\n    SCHOOL_UPDATE_SUCCESS,\r\n    SCHOOL_UPDATE_FAIL,\r\n    SCHOOL_DELETE_SUCCESS,\r\n    SCHOOL_DELETE_FAIL\r\n} from \"../../types/setting/school\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'schools';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL SCHOOL \r\nexport const getSchools = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : SCHOOL_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: SCHOOL_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : SCHOOL_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL SCHOOL \r\nexport const getSchooldropdowns = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : SCHOOL_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: SCHOOL_GET_DROPDOWNS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : SCHOOL_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE SCHOOL \r\nexport const getSchool = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : SCHOOL_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//SCHOOL DELETE\r\nexport const deleteSchool = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SCHOOL_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : SCHOOL_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//SCHOOL REGISTER\r\nexport const registerSchool = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SCHOOL_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : SCHOOL_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //SCHOOL UPDATE\r\nexport const updateSchool = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SCHOOL_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : SCHOOL_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n"],"sourceRoot":""}