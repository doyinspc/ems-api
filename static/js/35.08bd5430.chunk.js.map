{"version":3,"sources":["views/setting/Caunit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","actions/staff/staff.js","actions/setting/clasz.js","actions/setting/caunit.js"],"names":["connect","state","caunits","caunitReducer","terms","termReducer","claszs","claszReducer","staffs","staffReducer","school","schoolReducer","dropdowns","getStaffs","getCaunits","getCaunit","registerCaunit","updateCaunit","deleteCaunit","getClaszs","props","termid","useParams","term","caid","ca","useHistory","useLocation","search","match","useState","collapse","setCollapse","id","setId","dts","setDts","namez","setNamez","abbrv","setAbbrv","setClaszid","starts","setStarts","ends","setEnds","maxscore","setMaxscore","useEffect","params1","data","JSON","stringify","caunitt","table","narration","parseInt","dt","name","started","ended","onReset","clarray","Array","isArray","filter","rw","map","ind","key","value","deparr","termname","length","tabl","undefined","row","className","moment","format","color","size","onClick","cid","sm","style","textTransform","data-target","data-toggle","e","preventDefault","show","xl","action","method","htmlFor","type","defaultValue","onChange","target","placeholder","fd","FormData","append","_slicedToArray","arr","i","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","path","API_PATH_STAFF","params","dispatch","getState","token","MAIN_TOKEN","STAFF_LOADING","axios","get","axiosConfig","then","res","STAFF_GET_MULTIPLE","payload","catch","STAFF_LOADING_ERROR","getStaffAll","STAFF_GET_ALL","searchStaff","STAFF_GET_SEARCH","birthday","STAFF_GET_BIRTHDAY","getStaff","STAFF_GET_ONE","deleteStaff","POST","STAFF_DELETE_SUCCESS","STAFF_DELETE_FAIL","registerStaff","post","axiosConfig1","STAFF_REGISTER_SUCCESS","STAFF_REGISTER_FAIL","updateStaff","STAFF_UPDATE_SUCCESS","STAFF_UPDATE_FAIL","API_PATH_SETTING","CLASZ_LOADING","CLASZ_GET_MULTIPLE","CLASZ_LOADING_ERROR","getClasz","CLASZ_GET_ONE","deleteClasz","CLASZ_DELETE_SUCCESS","CLASZ_DELETE_FAIL","registerClasz","CLASZ_REGISTER_SUCCESS","CLASZ_REGISTER_FAIL","updateClasz","CLASZ_UPDATE_SUCCESS","CLASZ_UPDATE_FAIL","CAUNIT_LOADING","CAUNIT_GET_MULTIPLE","CAUNIT_LOADING_ERROR","CAUNIT_GET_ONE","CAUNIT_DELETE_SUCCESS","CAUNIT_DELETE_FAIL","CAUNIT_REGISTER_SUCCESS","CAUNIT_REGISTER_FAIL","CAUNIT_UPDATE_SUCCESS","CAUNIT_UPDATE_FAIL"],"mappings":"oNAgUeA,uBARS,SAACC,GAAD,MAAW,CACjCC,QAAUD,EAAME,cAChBC,MAAQH,EAAMI,YAAYD,MAC1BE,OAASL,EAAMM,aAAaD,OAC5BE,OAASP,EAAMQ,aAAaD,OAC5BE,OAAST,EAAMU,cAAcD,OAC7BE,UAAYX,EAAMU,cAAcC,aAEM,CACtCC,cACAC,eACAC,cACAC,mBACAC,iBACAC,iBACAC,eAPanB,EA9RA,SAACoB,GACd,IAAMC,EAASC,cAAYC,KACrBC,EAAOF,cAAYG,GAFD,GAGRC,cACEC,cAAcC,OAAOC,MAAM,gBAAiB,IAC9BC,oBAAS,IALjB,mBAKjBC,EALiB,KAKPC,EALO,OAMJF,mBAAS,MANL,mBAMjBG,EANiB,KAMbC,EANa,OAOFJ,mBAAS,IAPP,mBAOjBK,EAPiB,KAOZC,EAPY,OAQEN,qBARF,mBAQjBO,EARiB,KAQVC,EARU,OASER,qBATF,mBASjBS,EATiB,KASVC,EATU,OAUMV,qBAVN,mBAURW,GAVQ,aAWIX,qBAXJ,mBAWjBY,EAXiB,KAWTC,EAXS,OAYAb,qBAZA,mBAYjBc,EAZiB,KAYXC,EAZW,OAaQf,qBAbR,mBAajBgB,EAbiB,KAaPC,EAbO,KAoBxBC,qBAAU,WACR,IAAIC,EAAU,CACZC,KAAKC,KAAKC,UACV,CACI,KAAQ5B,IAEZ6B,QAAQ,WACRC,MAAM,UACNC,UAAU,8BAEZnC,EAAMN,WAAWmC,KAChB,CAACzB,EAAMJ,EAAMV,OAAOuB,KAGvBe,qBAAU,WACR,GAAGf,GAAMuB,SAASvB,GAAM,EACxB,CACE,IAAIwB,EAAKtB,EACTG,EAASmB,EAAGC,MACZlB,EAASiB,EAAGlB,OACZQ,EAAYU,EAAGX,UACfH,EAAUc,EAAGE,SACbd,EAAQY,EAAGG,YAEXtB,EAAS,IACTE,EAAS,IACTO,EAAY,IACZJ,EAAU,IACVE,EAAQ,MAGT,CAACZ,IAEJ,IAeM4B,EAAU,kBAAK3B,EAAM,OAgCvB4B,GADa1C,EAAMR,WAAamD,MAAMC,QAAQ5C,EAAMR,WAAaQ,EAAMR,UAAU,GAAK,IACjEqD,QAAO,SAAAC,GAAE,OAAS,OAAPA,KAAaC,KAAI,SAACD,EAAIE,GACtD,OAAO,4BAAQC,IAAKD,EAAKE,MAAOJ,EAAGjC,IAAKiC,EAAGR,SAG3Ca,EAASnD,EAAMR,UAAU,GAAGqD,QAAO,SAAAC,GAAE,OAAGV,SAASU,EAAGjC,MAAQuB,SAASnC,IAAWmC,SAASU,EAAGjC,IAAM,KAClGuC,EAAWD,EAAOE,OAAS,EAAIF,EAAO,GAAGb,KAAO,OAIhDgB,GAFOtD,EAAMlB,QAAQA,SAAW6D,MAAMC,QAAQ5C,EAAMlB,QAAQA,SAAWkB,EAAMlB,QAAQA,QAAQ+D,QAAO,SAAAC,GAAE,OAAU,OAAPA,QAAsBS,IAAPT,KAAoB,IAEhID,QAAO,SAAAC,GAAE,OAAS,OAAPA,KAAaC,KAAI,SAACS,EAAKR,GAC9C,OAAO,wBAAIC,IAAKD,GACN,wBAAIS,UAAU,eAAeT,EAAM,GACnC,wBAAIS,UAAU,aAAaD,EAAIlB,MAC/B,wBAAImB,UAAU,eAAeD,EAAIrC,OACjC,wBAAIsC,UAAU,eAAeD,EAAI9B,UACjC,wBAAI+B,UAAU,eAAeC,IAAOF,EAAIjB,SAASoB,OAAO,gBACxD,wBAAIF,UAAU,eAAeC,IAAOF,EAAIhB,OAAOmB,OAAO,gBACtD,wBAAIF,UAAU,eACd,kBAAC,IAAD,CAAWA,UAAU,iBACnB,kBAAC,IAAD,CAAiBG,MAAM,UAAUC,KAAK,MACtC,uBAAGJ,UAAU,eADb,WAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeK,QAAS,kBArEtChD,GADYuB,EAsEqCmB,GArExC3C,IACTG,EAAOqB,QACPzB,GAAY,GAHD,IAACyB,IAsEE,QACA,kBAAC,IAAD,CAAeyB,QAAS,WAAaN,EAAIO,MAAzC,UACA,kBAAC,IAAD,MACA,kBAAC,IAAD,8BAMlB,OACE,kBAAC,KAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,KACT,wBAAInD,GAAG,UAAU4C,UAAU,uBAAuBL,EAAlD,MAA8D,+CAC5D,yBAAKK,UAAU,mBAAmBQ,MAAO,CAACC,cAAc,mBAAoBlE,EAAMV,OAAOgD,OAE3F,kBAAC,IAAD,CAAM0B,GAAG,IAAIP,UAAU,cACrB,kBAAC,IAAD,CACIU,cAAY,SACZC,cAAY,WACZR,MAAM,UACNE,QApID,SAACO,GACdzD,GAAaD,GACb0D,EAAEC,kBAmIYb,UAAU,eACZ,uBAAGA,UAAU,mBAKnB,kBAAC,IAAD,KACA,2BAAOA,UAAU,oDACX,2BAAOA,UAAU,eACf,4BACE,wBAAIA,UAAU,eAAd,QACA,4BAAI,uBAAGA,UAAU,2BAAjB,oBACA,4BAAI,uBAAGA,UAAU,+BAAjB,UACA,4BAAI,uBAAGA,UAAU,eAAjB,cACA,4BAAI,uBAAGA,UAAU,eAAjB,aAGJ,+BACGH,OAMX,kBAAC,IAAD,CAAWiB,KAAM5D,GACjB,kBAAC,IAAD,CAAM6D,GAAI,GAAK3D,GAAG,UAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAaA,GAAG,UAAU4C,UAAU,uBAClC,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMO,GAAG,KACT,4BAAMnD,GAAMuB,SAASvB,GAAM,EAAI,OAAS,MAAxC,IAA+C,4CAE/C,kBAAC,IAAD,CAAMmD,GAAG,IAAIP,UAAU,cACrB,kBAAC,IAAD,CACIG,MAAM,SACNE,QAlHJ,kBAAKlD,GAAY,IAmHb6C,UAAU,eACZ,uBAAGA,UAAU,qBAMrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,OAAO,GAAGC,OAAO,QACtB,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAQC,QAAQ,YAAhB,SACA,kBAAC,IAAD,CACIC,KAAK,OACL/D,GAAG,WACHyB,KAAK,QACLuC,aAAc5D,EACd6D,SAAU,SAACT,GAAD,OAAKnD,EAASmD,EAAEU,OAAO7B,QACjC8B,YAAY,gCAEhB,kBAAC,IAAD,CAAWvB,UAAU,cAArB,wBAEF,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAQkB,QAAQ,YAAhB,iBACA,kBAAC,IAAD,CACIC,KAAK,OACL/D,GAAG,WACHyB,KAAK,QACLuC,aAAc1D,EACd2D,SAAU,SAACT,GAAD,OAAKjD,EAASiD,EAAEU,OAAO7B,QACjC8B,YAAY,YAEhB,kBAAC,IAAD,CAAWvB,UAAU,cAArB,oBAEF,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAQkB,QAAQ,cAAhB,UACA,kBAAC,KAAD,CACIC,KAAK,OACL/D,GAAG,aACHyB,KAAK,UACLwC,SAAU,SAACT,GAAD,OAAKhD,EAAWgD,EAAEU,OAAO7B,QACnC8B,YAAY,IAEXtC,GAEL,kBAAC,IAAD,CAAWe,UAAU,cAArB,qBAEF,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAQkB,QAAQ,eAAhB,kBACA,kBAAC,IAAD,CACIC,KAAK,OACL/D,GAAG,cACHyB,KAAK,WACLuC,aAAcnD,EACdoD,SAAU,SAACT,GAAD,OAAK1C,EAAY0C,EAAEU,OAAO7B,QACpC8B,YAAY,OAEhB,kBAAC,IAAD,CAAWvB,UAAU,cAArB,qEAEF,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAQkB,QAAQ,aAAhB,WACA,kBAAC,IAAD,CACIC,KAAK,OACL/D,GAAG,YACHyB,KAAK,SACLuC,aAAcvD,EACdwD,SAAU,SAACT,GAAD,OAAK9C,EAAU8C,EAAEU,OAAO7B,QAClC8B,YAAY,SAEhB,kBAAC,IAAD,CAAWvB,UAAU,cAArB,iCAEF,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAQkB,QAAQ,WAAhB,SACA,kBAAC,IAAD,CACIC,KAAK,OACL/D,GAAG,UACHyB,KAAK,OACLuC,aAAcrD,EACdsD,SAAU,SAACT,GAAD,OAAK5C,EAAQ4C,EAAEU,OAAO7B,QAChC8B,YAAY,SAEhB,kBAAC,IAAD,CAAWvB,UAAU,cAArB,iCAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASmB,KAAK,SAASd,QAtMd,WACnB,GAAG1B,SAASnC,GAAU,EAAE,CACtB,IAAIgF,EAAK,IAAIC,SACbD,EAAGE,OAAO,OAAQlE,GAClBgE,EAAGE,OAAO,QAAShE,GACnB8D,EAAGE,OAAO,UAAW7D,GACrB2D,EAAGE,OAAO,QAAS3D,GACnByD,EAAGE,OAAO,WAAYzD,GACtBuD,EAAGE,OAAO,QAAS,WAEhBtE,GAAMuB,SAASvB,GAAM,GAGtBoE,EAAGE,OAAO,KAAMtE,GAChBoE,EAAGE,OAAO,MAAO,UACjBnF,EAAMH,aAAaoF,IAEZhF,GAAUmC,SAASnC,GAAU,IAGpCgF,EAAGE,OAAO,OAAQlF,GAClBgF,EAAGE,OAAO,MAAO,UACjBnF,EAAMJ,eAAeqF,IAEvBxC,MA8KsDoB,KAAK,KAAKD,MAAM,WAAU,kBAAC,IAAD,CAAOtB,KAAK,iBAApF,WAAuH,IACvH,kBAAC,IAAD,CAASsC,KAAK,QAAQd,QAASrB,EAASoB,KAAK,KAAKD,MAAM,UAAS,kBAAC,IAAD,CAAOtB,KAAK,YAA7E,mB,gFC5SC,SAAS8C,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAI1C,MAAMC,QAAQyC,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXC,QAA4BA,OAAOC,YAAYC,OAAOJ,GAAjE,CACA,IAAIK,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKtC,EAET,IACE,IAAK,IAAiCuC,EAA7BC,EAAKV,EAAIE,OAAOC,cAAmBG,GAAMG,EAAKC,EAAGC,QAAQC,QAChEP,EAAKQ,KAAKJ,EAAG5C,QAEToC,GAAKI,EAAKrC,SAAWiC,GAH8CK,GAAK,IAK9E,MAAOQ,GACPP,GAAK,EACLC,EAAKM,EACL,QACA,IACOR,GAAsB,MAAhBI,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIH,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBL,EAAKC,IAAM,OAAAc,EAAA,GAA2Bf,EAAKC,IGLjF,WACb,MAAM,IAAIe,UAAU,6IHIgF,K,iCILtG,qTAmBMC,EAAOC,IAGA9G,EAAY,SAAA+G,GAAM,OAAI,SAACC,EAAUC,GAE1CF,EAAOG,MAAQC,IACfJ,EAAOtE,MAPM,SASbuE,EAAS,CAAC7B,KAAOiC,MACbC,IAAMC,IAAIT,EAAM,CAACE,UAASQ,KACrBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMuC,IACNC,QAASF,EAAIpF,UAGpBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO0C,IACPF,QAAQjB,SAKfoB,EAAc,SAAAf,GAAM,OAAI,SAACC,EAAUC,GAE5CF,EAAOG,MAAQC,IAEfH,EAAS,CAAC7B,KAAOiC,MACbC,IAAMC,IAAIT,EAAM,CAACE,UAASQ,KACrBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAM4C,IACNJ,QAASF,EAAIpF,UAGpBuF,OAAM,SAAAlB,GACHM,EAAS,CACN7B,KAAO0C,IACPF,QAAQjB,SAKdsB,EAAc,SAAAjB,GAAM,OAAI,SAACC,EAAUC,GAE5CD,EAAS,CAAC7B,KAAOiC,MACbC,IAAMC,IAAIT,EAAM,CAACE,UAASQ,KACrBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAM8C,IACNN,QAASF,EAAIpF,UAGpBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO0C,IACPF,QAAQjB,SAKfwB,EAAW,SAAAnB,GAAM,OAAI,SAACC,EAAUC,GAEzCD,EAAS,CAAC7B,KAAOiC,MACbC,IAAMC,IAAIT,EAAM,CAACE,UAASQ,KACrBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMgD,IACNR,QAASF,EAAIpF,UAGpBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO0C,IACPF,QAAQjB,SAMf0B,EAAW,SAAAhH,GAAE,OAAI,SAAC4F,EAAUC,GAErCD,EACI,CACA7B,KAAOkD,IACPV,QAASvG,MAIJkH,EAAc,SAAAvB,GAAM,OAAI,SAACC,EAAUC,GAC5CI,IAAMkB,KAAK1B,EAAM,CAACE,UAASQ,KACtBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMqD,IACNb,QAASZ,EAAO3F,QAGvBwG,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOsD,IACPd,QAAUjB,SAMbgC,EAAgB,SAAArG,GAAI,OAAI,SAAA2E,GACjCK,IAAMsB,KAAK9B,EAAMxE,EAAMuG,KAClBpB,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAM0D,IACNlB,QAASF,EAAIpF,KAAKA,UAGzBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO2D,IACPnB,QAASjB,SAKZqC,EAAc,SAAC1G,GAAD,OAAU,SAAC2E,EAAUC,GAE5CI,IAAMsB,KAAK9B,EAAMxE,EAAMuG,KAClBpB,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAM6D,IACNrB,QAASF,EAAIpF,KAAKA,UAGzBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO8D,IACPtB,QAASjB,U,iCC1JzB,+MAgBMG,EAAOqC,IAGA5I,EAAY,SAAAyG,GAAM,OAAI,SAACC,EAAUC,GAE1CF,EAAOG,MAAQC,IACfJ,EAAOtE,MAPM,SASbuE,EAAS,CAAC7B,KAAOgE,MACb9B,IAAMC,IAAIT,EAAM,CAACE,UAASQ,KACrBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMiE,IACNzB,QAASF,EAAIpF,UAGpBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOkE,IACP1B,QAAQjB,SAKf4C,EAAW,SAAAlI,GAAE,OAAI,SAAC4F,EAAUC,GAErCD,EACI,CACA7B,KAAOoE,IACP5B,QAASvG,MAIJoI,EAAc,SAAAzC,GAAM,OAAI,SAACC,EAAUC,GAC5CI,IAAMkB,KAAK1B,EAAM,CAACE,UAASQ,KACtBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMsE,IACN9B,QAASZ,EAAO3F,QAGvBwG,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOuE,IACP/B,QAAUjB,SAMbiD,EAAgB,SAAAtH,GAAI,OAAI,SAAA2E,GACjCK,IAAMsB,KAAK9B,EAAMxE,EAAMuG,KAClBpB,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMyE,IACNjC,QAASF,EAAIpF,KAAKA,UAGzBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO0E,IACPlC,QAASjB,SAKZoD,EAAc,SAACzH,GAAD,OAAU,SAAC2E,EAAUC,GAE5CI,IAAMsB,KAAK9B,EAAMxE,EAAMuG,KAClBpB,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAM4E,IACNpC,QAASF,EAAIpF,KAAKA,UAGzBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAO6E,IACPrC,QAASjB,U,iCC9FzB,+MAgBMG,EAAOqC,IAGAjJ,EAAa,SAAA8G,GAAM,OAAI,SAACC,EAAUC,GAE3CF,EAAOG,MAAQC,IACfJ,EAAOtE,MAPM,UASbuE,EAAS,CAAC7B,KAAO8E,MACb5C,IAAMC,IAAIT,EAAM,CAACE,UAASQ,KACrBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAM+E,IACNvC,QAASF,EAAIpF,UAGpBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOgF,IACPxC,QAAQjB,SAKfxG,EAAY,SAAAkB,GAAE,OAAI,SAAC4F,EAAUC,GAEtCD,EACI,CACA7B,KAAOiF,IACPzC,QAASvG,MAIJf,EAAe,SAAA0G,GAAM,OAAI,SAACC,EAAUC,GAC7CI,IAAMkB,KAAK1B,EAAM,CAACE,UAASQ,KACtBC,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMkF,IACN1C,QAASZ,EAAO3F,QAGvBwG,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOmF,IACP3C,QAAUjB,SAMbvG,EAAiB,SAAAkC,GAAI,OAAI,SAAA2E,GAClCK,IAAMsB,KAAK9B,EAAMxE,EAAMuG,KAClBpB,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMoF,IACN5C,QAASF,EAAIpF,KAAKA,UAGzBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOqF,IACP7C,QAASjB,SAKZtG,EAAe,SAACiC,GAAD,OAAU,SAAC2E,EAAUC,GAE7CI,IAAMsB,KAAK9B,EAAMxE,EAAMuG,KAClBpB,MAAK,SAAAC,GACFT,EAAS,CACL7B,KAAMsF,IACN9C,QAASF,EAAIpF,KAAKA,UAGzBuF,OAAM,SAAAlB,GACHM,EAAS,CACL7B,KAAOuF,IACP/C,QAASjB","file":"static/js/35.08bd5430.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport {getCaunits, getCaunit, registerCaunit, updateCaunit, deleteCaunit} from './../../actions/setting/caunit';\r\nimport {getClaszs} from './../../actions/setting/clasz';\r\nimport {getStaffs} from './../../actions/staff/staff';\r\nimport { useHistory, useLocation, useParams } from 'react-router-dom'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CInput,\r\n  CCardFooter,\r\n  CCollapse,\r\n  CFormText,\r\n  CDropdown,\r\n  CDropdownItem,\r\n  CDropdownDivider,\r\n  CSelect,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n  CInputGroup,\r\n  CInputGroupAppend,\r\n  CInputGroupPrepend\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nconst Caunit = (props) => {\r\n  const termid = useParams().term\r\n  const caid = useParams().ca\r\n  const history = useHistory()\r\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\r\n  const [collapse, setCollapse] = useState(false)\r\n  const [id, setId] = useState(null)\r\n  const [dts, setDts] = useState('')\r\n  const [namez, setNamez] = useState()\r\n  const [abbrv, setAbbrv] = useState()\r\n  const [claszid, setClaszid] = useState()\r\n  const [starts, setStarts] = useState()\r\n  const [ends, setEnds] = useState()\r\n  const [maxscore, setMaxscore] = useState()\r\n \r\n  const toggle = (e) => {\r\n    setCollapse(!collapse)\r\n    e.preventDefault()\r\n  }\r\n//GET CAUNITS PER SCHOOL\r\n  useEffect(() => {\r\n    let params1 = {\r\n      data:JSON.stringify(\r\n      {\r\n          'caid': caid\r\n      }),\r\n      caunitt:'selected',\r\n      table:'caunits',\r\n      narration:'get staff term caunit unit'\r\n    }\r\n    props.getCaunits(params1);\r\n  }, [caid, props.school.id])\r\n\r\n  //CHANGE STATE AS EDIT OR ADD\r\n  useEffect(() => {\r\n    if(id && parseInt(id) > 0)\r\n    {\r\n      let dt = dts;\r\n      setNamez(dt.name);\r\n      setAbbrv(dt.abbrv);\r\n      setMaxscore(dt.maxscore);\r\n      setStarts(dt.started);\r\n      setEnds(dt.ended);\r\n    }else{\r\n      setNamez('');\r\n      setAbbrv('');\r\n      setMaxscore('');\r\n      setStarts('');\r\n      setEnds('');\r\n    }\r\n    \r\n  }, [id])\r\n\r\n  const onEdit = (dt) =>{\r\n      setId(dt.id);\r\n      setDts(dt);\r\n      setCollapse(true);\r\n  }\r\n  const onDelete = (rw, dt) =>{\r\n    \r\n  }\r\n  const onActivate = (rw, num) =>{\r\n    let nu = parseInt(num) === 0 ? 1 : 0;\r\n    let fd = new FormData();\r\n    fd.append('id', rw);\r\n    fd.append('is_active', nu);\r\n    props.updateCaunit(fd);\r\n  }\r\n  const onReset = () =>setId(null);\r\n  const onClose = () =>setCollapse(false);\r\n\r\n  const handleSubmit = () =>{\r\n    if(parseInt(termid) > 0){\r\n      let fd = new FormData();\r\n      fd.append('name', namez);\r\n      fd.append('abbrv', abbrv);\r\n      fd.append('started', starts);\r\n      fd.append('ended', ends);\r\n      fd.append('maxscore', maxscore);\r\n      fd.append('table', 'caunits');\r\n      \r\n      if(id && parseInt(id) > 0)\r\n      {\r\n        //UPDATE \r\n        fd.append('id', id);\r\n        fd.append('cat', 'update');\r\n        props.updateCaunit(fd)\r\n        \r\n      }else if(termid && parseInt(termid) > 0)\r\n      {\r\n        //INSERT;\r\n        fd.append('caid', termid);\r\n        fd.append('cat', 'insert');\r\n        props.registerCaunit(fd)\r\n      }\r\n      onReset()\r\n    }\r\n  }\r\n  \r\n  let claszarray = props.dropdowns && Array.isArray(props.dropdowns) ? props.dropdowns[1] : [];\r\n  let clarray = claszarray.filter(rw=>rw !== null).map((rw, ind) =>{\r\n      return <option key={ind} value={rw.id}>{rw.name}</option>\r\n  })\r\n  \r\n  let deparr = props.dropdowns[0].filter(rw =>parseInt(rw.id) === parseInt(termid) && parseInt(rw.id) > 0);\r\n  let termname = deparr.length > 0 ? deparr[0].name : 'None';\r\n  \r\n  let data = props.caunits.caunits && Array.isArray(props.caunits.caunits) ? props.caunits.caunits.filter(rw =>rw !== null || rw !== undefined) : []\r\n  \r\n  let tabl = data.filter(rw=>rw !== null).map((row, ind)=>{\r\n      return <tr key={ind}>\r\n                <td className='text-center'>{ind + 1}</td>\r\n                <td className='text-left'>{row.name}</td>\r\n                <td className='text-center'>{row.abbrv}</td>\r\n                <td className='text-center'>{row.maxscore}</td>\r\n                <td className='text-center'>{moment(row.started).format('MMM D, YYYY')}</td>\r\n                <td className='text-center'>{moment(row.ended).format('MMM D, YYYY')}</td>\r\n                <td className='text-center'>\r\n                <CDropdown className=\"m-0 btn-group\">\r\n                  <CDropdownToggle color=\"success\" size=\"sm\">\r\n                  <i className='fa fa-gear'></i> Action\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem onClick={()=>onEdit(row)} >Edit</CDropdownItem>\r\n                    <CDropdownItem onClick={()=>onDelete(row.cid, row)}>Delete</CDropdownItem>\r\n                    <CDropdownDivider />\r\n                    <CDropdownItem>Another Action</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n                </td>\r\n              </tr>\r\n  })\r\n  return (\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n            <h4 id=\"traffic\" className=\"caunitrd-title mb-0\">{termname} : <small> Assessment</small></h4>\r\n              <div className=\"small text-muted\" style={{textTransform:'caunitpitalize'}}>{props.school.name}</div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-md-block\">\r\n              <CButton \r\n                  data-target='#formz' \r\n                  data-toggle=\"collapse\" \r\n                  color=\"primary\" \r\n                  onClick={toggle}\r\n                  className=\"float-right\">\r\n                <i className='fa fa-plus'></i>\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n          <table className=\"table table-hover table-outline mb-0  d-sm-table\">\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th className=\"text-center\"> SN.</th>\r\n                    <th><i className='fa fa-list text-center'></i> ASSESSMENT NAME</th>\r\n                    <th><i className='fa fa-bullseye text-center'></i> ABBRV</th>\r\n                    <th><i className='fa fa-list'></i> MAX SCORE</th>\r\n                    <th><i className='fa fa-gear'></i> ACTION</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {tabl}\r\n                 </tbody>\r\n              </table>\r\n          </CCardBody>\r\n        </CCard>\r\n        </CCol>\r\n        <CCollapse show={collapse}>\r\n        <CCol xl={12}  id=\"#formz\">\r\n        <CCard>\r\n            <CCardHeader id='traffic' className=\"caunitrd-title mb-0\">\r\n              <CRow>\r\n                <CCol sm=\"6\">\r\n                <h4>{ id && parseInt(id) > 0 ? 'Edit' : 'Add'} <small> CAUNIT</small></h4>\r\n                </CCol>\r\n                <CCol sm=\"6\" className=\"d-md-block\">\r\n                  <CButton  \r\n                      color=\"danger\" \r\n                      onClick={onClose}\r\n                      className=\"float-right\">\r\n                    <i className='fa fa-remove'></i>\r\n                  </CButton>\r\n                </CCol>\r\n              </CRow>\r\n              \r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CForm action=\"\" method=\"post\">\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-namez\">Name </CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-namez\" \r\n                      name=\"namez\"\r\n                      defaultValue={namez}\r\n                      onChange={(e)=>setNamez(e.target.value)}\r\n                      placeholder=\"First Continious Assessment\" \r\n                    />\r\n                  <CFormText className=\"help-block\">set assessment name</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-abbrv\">Abbreviation </CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-abbrv\" \r\n                      name=\"abbrv\"\r\n                      defaultValue={abbrv}\r\n                      onChange={(e)=>setAbbrv(e.target.value)}\r\n                      placeholder=\"CAUNIT1\" \r\n                    />\r\n                  <CFormText className=\"help-block\">abbreviate name</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-claszid\">Class </CLabel>\r\n                  <CSelect\r\n                      type=\"text\" \r\n                      id=\"nf-claszid\" \r\n                      name=\"claszid\"\r\n                      onChange={(e)=>setClaszid(e.target.value)}\r\n                      placeholder=\"\" \r\n                    >\r\n                      {clarray}\r\n                  </CSelect>\r\n                  <CFormText className=\"help-block\">Select the class</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-maxscore\">Maximum Score </CLabel>\r\n                  <CInput \r\n                      type=\"text\" \r\n                      id=\"nf-maxscore\" \r\n                      name=\"maxscore\"\r\n                      defaultValue={maxscore}\r\n                      onChange={(e)=>setMaxscore(e.target.value)}\r\n                      placeholder=\"20\" \r\n                    />\r\n                  <CFormText className=\"help-block\">set the maximum score students caunitn attain on this assessment</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-starts\">Starts </CLabel>\r\n                  <CInput \r\n                      type=\"date\" \r\n                      id=\"nf-starts\" \r\n                      name=\"starts\"\r\n                      defaultValue={starts}\r\n                      onChange={(e)=>setStarts(e.target.value)}\r\n                      placeholder=\"date\" \r\n                    />\r\n                  <CFormText className=\"help-block\">When will record entry start</CFormText>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"nf-ends\">Ends </CLabel>\r\n                  <CInput \r\n                      type=\"date\" \r\n                      id=\"nf-ends\" \r\n                      name=\"ends\"\r\n                      defaultValue={ends}\r\n                      onChange={(e)=>setEnds(e.target.value)}\r\n                      placeholder=\"date\" \r\n                    />\r\n                  <CFormText className=\"help-block\">When will record entry end</CFormText>\r\n                </CFormGroup>\r\n                </CForm>\r\n            </CCardBody>\r\n            <CCardFooter>\r\n              <CButton type=\"submit\" onClick={handleSubmit} size=\"sm\" color=\"primary\"><CIcon name=\"cil-scrubber\" /> Submit</CButton>{' '}\r\n              <CButton type=\"reset\" onClick={onReset} size=\"sm\" color=\"danger\"><CIcon name=\"cil-ban\" /> Reset</CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n      </CCol>\r\n      </CCollapse>\r\n    </CRow>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  caunits : state.caunitReducer,\r\n  terms : state.termReducer.terms,\r\n  claszs : state.claszReducer.claszs,\r\n  staffs : state.staffReducer.staffs,\r\n  school : state.schoolReducer.school,\r\n  dropdowns : state.schoolReducer.dropdowns\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getStaffs,\r\n  getCaunits,\r\n  getCaunit,\r\n  registerCaunit,\r\n  updateCaunit,\r\n  deleteCaunit,\r\n  getClaszs\r\n})(Caunit)\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios';\r\nimport {\r\n    STAFF_GET_ONE,\r\n    STAFF_GET_MULTIPLE,\r\n    STAFF_GET_ALL,\r\n    STAFF_GET_BIRTHDAY,\r\n    STAFF_GET_SEARCH,\r\n    STAFF_REGISTER_SUCCESS,\r\n    STAFF_REGISTER_FAIL,\r\n    STAFF_LOADING,\r\n    STAFF_LOADING_ERROR,\r\n    STAFF_UPDATE_SUCCESS,\r\n    STAFF_UPDATE_FAIL,\r\n    STAFF_DELETE_SUCCESS,\r\n    STAFF_DELETE_FAIL\r\n} from \"./../../types/staff/staff\";\r\nimport { MAIN_TOKEN, API_PATH_STAFF, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'staffs';\r\nconst path = API_PATH_STAFF;\r\n\r\n//GET ALL STAFF \r\nexport const getStaffs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STAFF \r\nexport const getStaffAll = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                      \r\n                dispatch({\r\n                    type: STAFF_GET_ALL,\r\n                    payload: res.data\r\n                 })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                   type : STAFF_LOADING_ERROR,\r\n                   payload:err\r\n                })\r\n            })\r\n};\r\n\r\nexport const searchStaff = params => (dispatch, getState) => {\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_SEARCH,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\nexport const birthday = params => (dispatch, getState) => {\r\n\r\n    dispatch({type : STAFF_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STAFF_GET_BIRTHDAY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STAFF_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n\r\n//GET SINGLE STAFF \r\nexport const getStaff = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STAFF_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STAFF DELETE\r\nexport const deleteStaff = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STAFF REGISTER\r\nexport const registerStaff = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STAFF UPDATE\r\nexport const updateStaff = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STAFF_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STAFF_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    CLASZ_GET_ONE,\r\n    CLASZ_GET_MULTIPLE,\r\n    CLASZ_REGISTER_SUCCESS,\r\n    CLASZ_REGISTER_FAIL,\r\n    CLASZ_LOADING,\r\n    CLASZ_LOADING_ERROR,\r\n    CLASZ_UPDATE_SUCCESS,\r\n    CLASZ_UPDATE_FAIL,\r\n    CLASZ_DELETE_SUCCESS,\r\n    CLASZ_DELETE_FAIL\r\n} from \"../../types/setting/clasz\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'claszs';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL CLASZ \r\nexport const getClaszs = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : CLASZ_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: CLASZ_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : CLASZ_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE CLASZ \r\nexport const getClasz = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : CLASZ_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//CLASZ DELETE\r\nexport const deleteClasz = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//CLASZ REGISTER\r\nexport const registerClasz = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //CLASZ UPDATE\r\nexport const updateClasz = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CLASZ_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CLASZ_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    CAUNIT_GET_ONE,\r\n    CAUNIT_GET_MULTIPLE,\r\n    CAUNIT_REGISTER_SUCCESS,\r\n    CAUNIT_REGISTER_FAIL,\r\n    CAUNIT_LOADING,\r\n    CAUNIT_LOADING_ERROR,\r\n    CAUNIT_UPDATE_SUCCESS,\r\n    CAUNIT_UPDATE_FAIL,\r\n    CAUNIT_DELETE_SUCCESS,\r\n    CAUNIT_DELETE_FAIL\r\n} from \"../../types/setting/caunit\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'caunits';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL CAUNIT \r\nexport const getCaunits = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : CAUNIT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: CAUNIT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : CAUNIT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE CAUNIT \r\nexport const getCaunit = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : CAUNIT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//CAUNIT DELETE\r\nexport const deleteCaunit = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CAUNIT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CAUNIT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//CAUNIT REGISTER\r\nexport const registerCaunit = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CAUNIT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CAUNIT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //CAUNIT UPDATE\r\nexport const updateCaunit = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: CAUNIT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : CAUNIT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n"],"sourceRoot":""}