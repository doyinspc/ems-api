{"version":3,"sources":["views/staff/StudentDashboardClass.js","views/staff/StaffDashboardMenu.js","views/staff/SearchDashboard.js","views/staff/SearchDashboard1.js","views/staff/StaffDashboardSession1.js","views/staff/StaffDashboardDefault.js"],"names":["connect","state","staffsubject","staffsubjectReducer","user","userReducer","getStaffsubjects","props","useState","useEffect","undefined","activeterm","params","data","JSON","stringify","termid","sessionid","id","cat","table","narration","Dashboard","school","setSchool","term","setTerm","clasz","setClasz","dt","dropdowns","Array","isArray","length","dt0","dt1","dt3","map","prop","ind","key","value","name","sch","schools","lg","className","xs","sm","md","row","placeholder","onChange","e","target","onClick","changeSchool","parse","type","color","changeTerm","action","method","custom","size","to","result","staffReducer","searchStaff","activeschool","dat","index","href","active","src","process","photo","style","height","width","alt","class","onError","onerror","employment_no","display","position","zIndex","studentReducer","searchStudent","admission_no","hasOwnProperty","toggleMenu","activeTerm","termReducer","getUserDatas","getUserSchools","getUserTerms","getUserdropdowns","settSchool","settTerm","showmenu","setShowmenu","did","parseInt","params1","mid","myschools","join","mySchoolData","prev","show","StaffDashboardMenu"],"mappings":"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","file":"static/js/38.06350cce.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {  \r\n    CCol, \r\n    CRow, \r\n    CDropdown, \r\n    CDropdownToggle, \r\n    CDropdownMenu, \r\n    CDropdownItem,\r\n    CWidgetDropdown,\r\n    CCollapse\r\n} from '@coreui/react';\r\nimport StaffDashboardDefault from './StaffDashboardDefault'\r\nimport { getStaffsubjects } from './../../actions/staff/staffsubject'\r\nimport StudentClass from '../student/StudentClasses';\r\nconst Dashboard = (props) => {\r\n    \r\n  const [subject, setSubject]  = useState([])\r\n  const [page, setPage]  = useState(0)\r\n  const [collapser, setCollapser]  = useState(true)\r\n\r\n  useEffect(() => {\r\n\r\n    if(props.user.activeterm !== undefined)\r\n    {\r\n       let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'termid':props.user.activeterm.termid,\r\n            'sessionid':props.user.activeterm.sessionid,\r\n            'clientid':props.user.user.id,\r\n            'grp':2\r\n        }),\r\n        cat:'staffclass',\r\n        table:'accessstaffsubjectnum',\r\n        narration:'get staffsubjects'\r\n  \r\n      }\r\n      props.getStaffsubjects(params)\r\n    } \r\n    \r\n  }, [props.user.activeterm])\r\n\r\n  const goBack = () =>{\r\n    setPage(0);\r\n    setCollapser(true)\r\n  }\r\n\r\n  const loadStudents = (sub) =>{\r\n      setSubject(sub)\r\n      setPage(1);\r\n      setCollapser(false)\r\n  }\r\n  const loadRecords = (sub) =>{\r\n      setSubject(sub)\r\n      setPage(2);\r\n      setCollapser(false)\r\n  }\r\n  const loadScheme = (sub) =>{\r\n    setSubject(sub)\r\n      setPage(3);\r\n      setCollapser(false)\r\n  }\r\n  const loadPlan = (sub) =>{\r\n      setSubject(sub)\r\n      setPage(4);\r\n      setCollapser(false)\r\n  }\r\n  const loadAnalysis = (sub) =>{\r\n      setSubject(sub)\r\n      setPage(5);\r\n      setCollapser(false)\r\n  }\r\n \r\nreturn (\r\n    <>\r\n      {/* <StaffDashboardDefault /> */}\r\n      <StudentClass />\r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\nstaffsubject:state.staffsubjectReducer,\r\nuser:state.userReducer\r\n})\r\nexport default connect(mapStateToProps, { getStaffsubjects}) (Dashboard)","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { \r\n    CCard, \r\n    CCardBody, \r\n    CButton, \r\n    CButtonGroup, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow, \r\n    CDropdown, \r\n    CDropdownToggle, \r\n    CDropdownMenu, \r\n    CDropdownItem, \r\n    CDropdownDivider, \r\n    CContainer, \r\n    CCardFooter, \r\n    CForm,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CInputGroupPrepend,\r\n    CFormGroup,\r\n    CInputGroupText,\r\n    CSelect,\r\n    CLabel\r\n} from '@coreui/react';\r\n\r\nimport CIcon from '@coreui/icons-react'\r\nimport { Link } from 'react-router-dom';\r\nimport SearchDashboard from './SearchDashboard'\r\nimport SearchDashboard1 from './SearchDashboard1'\r\nconst Dashboard = (props) => {\r\n  \r\n  const [school, setSchool] = useState({})\r\n  const [term, setTerm ] = useState({})\r\n  //const [term, setTerm] = useState(0)\r\n  const [clasz, setClasz] = useState(0)\r\n  let dt = props.dropdowns && Array.isArray(props.dropdowns) && props.dropdowns.length > 4 ? props.dropdowns : [[], [], [], []];\r\n  let dt0 ='';\r\n  let dt1 ='';\r\n  let dt2 ='';\r\n  let dt3 ='';\r\n  if(dt.length > 0)\r\n  {\r\n     dt0 = dt[0].map((prop, ind)=>{\r\n    return <option key={ind}  value={prop.termid}>{prop.name}</option>;\r\n    });\r\n    dt1 = dt[1].map((prop, ind)=>{\r\n    return <option key={ind}  value={prop.id}>{prop.name}</option>;\r\n    });\r\n    dt2 = dt[2].map((prop, ind)=>{\r\n    return <option key={ind}  value={prop.id}>{prop.name}</option>;\r\n    });\r\n    dt3 = dt[0].map((prop, ind)=>{\r\n    return <option key={ind} value={JSON.stringify(prop)}>{prop.name}</option>;\r\n    });\r\n}\r\n\r\nlet sch  = Array.isArray(props.schools) ? props.schools.map((prop, ind)=>{\r\n  return <option value={JSON.stringify(prop)}>{prop.name}</option>;\r\n}):<option></option>;\r\n\r\nconst changeSchool =() =>{\r\n    props.changeSchool(JSON.parse(school))\r\n}\r\nconst changeTerm =() =>{\r\n  props.changeTerm(JSON.parse(term))\r\n}\r\nreturn (\r\n    <>\r\n    \r\n    <CRow>\r\n      <CCol lg={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            \r\n              <h4>Quick Menu</h4>\r\n              \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CContainer>\r\n            <CRow>\r\n              <CCol>\r\n              <CRow className='d-block'>\r\n                <strong>Change</strong>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol xs='12' sm='12' md='6' >\r\n                  <CForm>\r\n                  <CFormGroup row>\r\n                        <CInputGroup>\r\n                          <CInputGroupPrepend>\r\n                          <CInputGroupText>Change School</CInputGroupText>\r\n                          </CInputGroupPrepend>\r\n                          <CSelect \r\n                          id=\"input3-group2\" \r\n                          name=\"input3-group2\" \r\n                          placeholder=\"Search Staff\"\r\n                          onChange={(e)=>setSchool(e.target.value)}\r\n                          >\r\n                            {sch}\r\n                            </CSelect>\r\n                          <CInputGroupAppend>\r\n                            <CButton  onClick={changeSchool} type=\"button\" color=\"secondary\"><i className='fa fa-thumbs-up'></i></CButton>\r\n                          </CInputGroupAppend>\r\n                        </CInputGroup>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n                <CCol xs='12' sm='12' md='6'>\r\n                <CForm>\r\n                <CFormGroup row>\r\n                      <CInputGroup>\r\n                        <CInputGroupPrepend>\r\n                        <CInputGroupText>Change Term</CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CSelect  onChange={(e)=>setTerm(e.target.value)} id=\"input3-group2\" name=\"input3-group2\" placeholder=\"Search Staff\" >\r\n                          {dt3}\r\n                          </CSelect>\r\n                        <CInputGroupAppend>\r\n                          <CButton  onClick={changeTerm}  type=\"button\" color=\"secondary\"><i className='fa fa-thumbs-up'></i></CButton>\r\n                        </CInputGroupAppend>\r\n                      </CInputGroup>\r\n                  </CFormGroup>\r\n                </CForm>\r\n              </CCol>\r\n              </CRow>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              \r\n            <CCol>\r\n               <CRow className='d-block'>\r\n                <strong>Navigate</strong>\r\n              </CRow>\r\n              <CForm action=\"\" method=\"post\" >\r\n              <CRow xs={12} >\r\n              <CCol xs='12' sm='12' md='12'  >\r\n              <CRow>\r\n              <CCol xs='12' sm='4' md='5' lg='5'  className=\"ml-0\">\r\n                <CFormGroup row>\r\n                <CInputGroup>\r\n                    <CInputGroupPrepend>\r\n                    <CInputGroupText>Select Term</CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                  <CSelect \r\n                    custom \r\n                    size=\"md\" \r\n                    name=\"term\" \r\n                    id=\"term\"\r\n                    onChange={(e)=>setTerm(e.target.value)}\r\n                    >\r\n                      <option value=\"0\">Select Term</option>\r\n                      {dt0}\r\n                    </CSelect>\r\n                  </CInputGroup>\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol  xs='12' sm='4' md='5' lg='5' className=\"ml-0\" >\r\n                <CFormGroup row>\r\n                <CInputGroup>\r\n                    <CInputGroupPrepend>\r\n                    <CInputGroupText>Select Class</CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                <CSelect \r\n                    custom \r\n                    size=\"md\" \r\n                    name=\"clasz\" \r\n                    id=\"clasz\"\r\n                    onChange={(e)=>setClasz(e.target.value)}\r\n                    >\r\n                      <option value=\"0\">Select Class</option>\r\n                      {dt1}\r\n                    </CSelect>\r\n                 </CInputGroup>\r\n                </CFormGroup>\r\n                </CCol>\r\n              <CCol xs='12' sm='3' md='2' lg='2' className=\"ml-0\" >\r\n                <CFormGroup className=\"\">\r\n                <Link \r\n                    type=\"submit\" \r\n                    className=\"btn btn-success btn-block btn-sm\"\r\n                    size=\"sm\" \r\n                    color=\"primary\"\r\n                    to={`/studentclasses/${term}/${clasz}`}\r\n                    >\r\n                      <CIcon name=\"cil-scrubber\" /> Load !</Link>\r\n                </CFormGroup>\r\n                </CCol>\r\n              </CRow>\r\n              </CCol>\r\n              </CRow>\r\n              </CForm>\r\n            </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol>\r\n                    <CRow className='d-block'>\r\n                      <strong>Search</strong>\r\n                    </CRow>\r\n                    <CRow className='pr-2'xs={12} >\r\n                      <CCol md='6'  >\r\n                        <SearchDashboard />\r\n                      </CCol>\r\n                      <CCol className='pr-2' md='6'  >\r\n                        <SearchDashboard1 />\r\n                      </CCol>\r\n                    </CRow>\r\n                </CCol>\r\n              </CRow>\r\n            </CContainer>\r\n          </CCardBody>\r\n         </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n\r\n})\r\nexport default Dashboard","\r\nimport React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { searchStaff } from './../../actions/staff/staff'\r\nimport {  \r\n    CCol, \r\n    CRow,\r\n    CFormGroup,\r\n    CInput,\r\n    CListGroup,\r\n    CListGroupItem,\r\n    CCard\r\n    \r\n} from '@coreui/react';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  const [term, setTerm] = useState();\r\n  const [clasz, setClasz] = useState([]);\r\n\r\n  let dt0 = ''\r\n  let dt1 = ''\r\n\r\n  const changeSchool = (e) =>{\r\n      setTerm(e.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(props.result !== undefined && Array.isArray(props.result))\r\n    {\r\n      setClasz(props.result)\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [props.result])\r\n\r\n  useEffect(() => {\r\n    if(term !== undefined && term.length > 2)\r\n    {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'search':term,\r\n            'schoolid': props.user.activeschool.id\r\n        }),\r\n        cat:'selected',\r\n        table:'staffsearch',\r\n        narration:`get all schools for access control`\r\n      }\r\n      props.searchStaff(params);\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [term, props.user.activeschool.id])\r\n\r\n\r\n  let dat = clasz.map((props, index)=>{\r\n    return <CListGroupItem key={index} target='_blank' className=\"m-0\" href={`#/staffs/${props.id}`} active>\r\n      <CRow>\r\n        <CCol xs='2' className='m-0'>\r\n            <img\r\n               src={process.env.REACT_APP_SERVER_URL + props.photo} \r\n               style={{height:'40px', width:'40px'}}\r\n               height=\"30px\"\r\n               alt=\"profile-image\" \r\n               class=\"profile\"\r\n               onError={(e)=>{e.target.onerror=null; e.target.src=process.env.PUBLIC_URL + '/icons/profile_1.png'} }\r\n               />\r\n        </CCol>\r\n        <CCol>\r\n        <strong>{props.name}</strong><br/>\r\n        <small>{props.employment_no}</small>\r\n        </CCol>\r\n      </CRow>\r\n      </CListGroupItem>\r\n  })\r\n  \r\n\r\nreturn (\r\n    <>\r\n              <CRow xs={12} >\r\n                <CCol>\r\n                <CFormGroup row>\r\n                  <CInput\r\n                    size=\"md\"\r\n                    className='w-100'\r\n                    value={term}\r\n                    onChange={(e)=>setTerm(e.target.value)}\r\n                    placeholder=' Staff search...'\r\n                    />     \r\n                </CFormGroup>\r\n                <CCard className=\"mt-0\" style={{display:'block', position:'absolute', zIndex:'101'}}>\r\n                <CListGroup style={{width:'300px'}}>\r\n                  {dat}\r\n                 </CListGroup>\r\n                </CCard>\r\n                </CCol>\r\n              </CRow>\r\n             \r\n             \r\n              \r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  result:state.staffReducer.result,\r\n  user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, {searchStaff})(Dashboard)","\r\nimport React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { searchStudent } from './../../actions/student/student'\r\nimport {  \r\n    CCol, \r\n    CRow,\r\n    CFormGroup,\r\n    CInput,\r\n    CListGroup,\r\n    CListGroupItem,\r\n    CCard\r\n    \r\n} from '@coreui/react';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  const [term, setTerm] = useState();\r\n  const [clasz, setClasz] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(props.result !== undefined && Array.isArray(props.result))\r\n    {\r\n      setClasz(props.result)\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [props.result])\r\n\r\n  useEffect(() => {\r\n    if(term !== undefined && term.length > 2)\r\n    {\r\n      let params = {\r\n        data:JSON.stringify(\r\n        {\r\n            'search':term,\r\n            'schoolid': props.user.activeschool.id\r\n        }),\r\n        cat:'selected',\r\n        table:'studentsearch',\r\n        narration:`get all schools for access control`\r\n      }\r\n      props.searchStudent(params);\r\n    }else{\r\n      setClasz([])\r\n    }\r\n  }, [term, props.user.activeschool.id])\r\n\r\n\r\n  let dat = clasz.map((props, index)=>{\r\n    return <CListGroupItem key={index} href={`/students/${props.id}`} active>\r\n        <strong>{props.name}</strong><br/>\r\n        <small>{props.admission_no}</small>\r\n      </CListGroupItem>\r\n  })\r\n  \r\n\r\nreturn (\r\n    <>\r\n              <CRow xs={12} >\r\n                <CCol>\r\n                <CFormGroup row>\r\n                  <CInput\r\n                    size=\"md\"\r\n                    className='w-100'\r\n                    value={term}\r\n                    onChange={(e)=>setTerm(e.target.value)}\r\n                    placeholder=' Student search...'\r\n                    />     \r\n                </CFormGroup>\r\n                <CCard className=\"mt-0\" style={{display:'block', position:'absolute', zIndex:'101'}}>\r\n                <CListGroup style={{width:'300px'}}>\r\n                  {dat}\r\n                 </CListGroup>\r\n                </CCard>\r\n                </CCol>\r\n              </CRow>\r\n             \r\n             \r\n              \r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  result:state.studentReducer.result,\r\n  user : state.userReducer\r\n})\r\nexport default connect(mapStateToProps, {searchStudent})(Dashboard)","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { \r\n    CCard,  \r\n    CButton, \r\n    CButtonGroup, \r\n    CCardHeader, \r\n    CCol, \r\n    CRow, \r\n   \r\n} from '@coreui/react';\r\n\r\n\r\n\r\nconst Dashboard = (props) => {\r\n \r\nreturn (\r\n    <>\r\n    <CRow>\r\n      <CCol lg={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            <CRow>\r\n              <CCol xs={10}>\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">{props.activeschool != undefined && props.activeterm.hasOwnProperty('name') && props.activeschool.name ? props.activeschool.name: <i>Please select a school or consult the admin</i>}</h4>\r\n              <div className=\"small text-muted\"><strong>{props.activeterm != undefined &&  props.activeterm.hasOwnProperty('name') && props.activeterm.name ? props.activeterm.name : <span> Welcome<small><i> (No active term)</i></small></span> }</strong></div>\r\n              \r\n              </CCol>\r\n              <CCol className=\"d-md-block btn-group\">\r\n              <CButtonGroup className='pull-right'>\r\n              <CButton  \r\n                  color=\"primary\" \r\n                  className=\"\"\r\n                  onClick={()=>props.toggleMenu()}\r\n                  >\r\n                <i className='fa fa-search'></i>\r\n              </CButton>\r\n              </CButtonGroup>  \r\n            </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n         </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import { CCollapse } from '@coreui/react';\r\nimport React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { getUserDatas, getUserSchools, getUserTerms, getUserdropdowns, settSchool, settTerm} from './../../actions/user'\r\nimport StaffDashboardMenu from './StaffDashboardMenu';\r\nimport StaffDashboardSession from './StaffDashboardSession1';\r\n\r\nconst Dashboard = (props) => {\r\n  const [showmenu, setShowmenu] = useState(false)\r\n\r\nuseEffect(() => {\r\n  //load dropdowns\r\n  let did = props.user.activeschool !== undefined && props.user.activeschool.hasOwnProperty('id') && parseInt(props.user.activeschool.id) > 0 ? props.user.activeschool.id :'null'\r\n  let params = {\r\n    data:JSON.stringify(\r\n    {\r\n        'schoolid':did\r\n    }),\r\n    cat:'dropdowns',\r\n    table:'access',\r\n    narration:'get all dropdowns'\r\n    }\r\n    props.getUserdropdowns(params)\r\n  let params1 = {\r\n      data:JSON.stringify(\r\n      {\r\n          'schoolid':did\r\n      }),\r\n      cat:'accessterms',\r\n      table:'access',\r\n      narration:'get current term'\r\n      }\r\n      props.getUserTerms(params1)\r\n    \r\n}, [props.user.mid, props.user.activeschool])\r\n\r\nuseEffect(() => {\r\n  //load staff schools\r\n  let params = {\r\n    data:JSON.stringify(\r\n    {\r\n        'schools':props.user.myschools.join(',')\r\n    }),\r\n    cat:'schoolaccess',\r\n    table:'schools',\r\n    narration:'get all schools'\r\n    }\r\n    props.getUserSchools(params)\r\n}, [props.user.mid, props.user.myschools])\r\n\r\nuseEffect(() => {\r\n  //load staff subjects and class\r\n  let params = {\r\n    data:JSON.stringify(\r\n    {\r\n        'sessionid':props.user.activeterm.sessionid,\r\n        'termid':props.user.activeterm.termid,\r\n        'staffid':props.user.mid,\r\n    }),\r\n    cat:'dataaccess',\r\n    table:'access',\r\n    narration:'get all schools'\r\n    }\r\n    getUserDatas(params)\r\n  \r\n    \r\n}, [props.user.mid, props.user.activeterm]);\r\n\r\nlet dt = props.user.dropdowns && Array.isArray(props.user.dropdowns) ? props.user.dropdowns : [[], []];\r\nconst changeSchool = (data) =>{\r\n  \r\n      props.settSchool(data)\r\n}\r\nconst changeTerm = (data) =>{\r\n      props.settTerm(data)\r\n}\r\nconst changeMenu = () =>{\r\n      setShowmenu(prev=>!prev);\r\n}\r\n\r\nreturn (\r\n    <>\r\n    <StaffDashboardSession \r\n        activeterm={props.user.activeterm}\r\n        activeschool={props.user.activeschool}\r\n        schools={props.user.mySchoolData}\r\n        changeSchool={(data)=>changeSchool(data)}\r\n        toggleMenu={changeMenu}\r\n      />\r\n       <CCollapse\r\n      show={showmenu}\r\n      >\r\n      <StaffDashboardMenu \r\n        dropdowns={dt}\r\n        schools={props.user.mySchoolData}\r\n        changeSchool={(data)=>changeSchool(data)}\r\n        changeTerm={(data)=>changeTerm(data)}\r\n      />\r\n      \r\n      </CCollapse>\r\n      \r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n  activeTerm : state.termReducer.activeTerm,\r\n  user : state.userReducer,\r\n\r\n})\r\nexport default connect(mapStateToProps, {\r\n  getUserDatas,\r\n  getUserSchools,\r\n  getUserTerms,\r\n  getUserdropdowns,\r\n  settSchool,\r\n  settTerm\r\n\r\n})(Dashboard)"],"sourceRoot":""}