{"version":3,"sources":["views/student/AttendanceBox.js","views/student/Attendance.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","actions/student/student.js","actions/student/studentattendance.js"],"names":["leaves","leavestd","AttendanceBox","props","useState","color","setcolor","useEffect","Date","mydate","getDay","candidates","split","includes","client","parseInt","issue","d","filter","rw","id","setData","className","style","backgroundColor","width","connect","state","students","studentReducer","studentattendance","studentattendanceReducer","user","userReducer","studentclasss","studentclassReducer","getStudentattendances","getStudentattendancedailys","getStudentattendance","registerStudentattendance","registerStudentattendancedaily","updateStudentattendance","updateStudentattendancedaily","deleteStudentattendance","deleteStudentattendancedaily","getStudents","clasz","useParams","getFullYear","getMonth","firstday","setfirstday","lastday","setlastday","datax","setdatax","idx","map","pr","ind","ids","Array","isArray","length","join","params","data","JSON","stringify","cat","table","narration","activeschool","moment","format","params1","registered_attendance_date","studentattendancedailys","undefined","arr_days","forEach","dates","reason","registered_attendance_issue","studentattendances","arr_persons","clients","leaveid","listDate","startDate","endDate","dateMove","strDate","toISOString","slice","push","setDate","getDate","alldays","prop","key","alldates","allpara","r","i","rowSpan","textOrientation","name","studenx","dt","surname","firstname","middlename","pro","date_marked","date_issue","gs","myd","cand","cli","getStaged","a","b","datas","hasOwnProperty","changeData","cnt","prp","type","value","onChange","e","target","fluid","scrolling","border","marginTop","_slicedToArray","arr","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","err","unsupportedIterableToArray","TypeError","path","API_PATH_SETTING","dispatch","getState","token","MAIN_TOKEN","STUDENT_LOADING","axios","get","axiosConfig","then","res","STUDENT_GET_MULTIPLE","payload","catch","STUDENT_LOADING_ERROR","searchStudent","STUDENT_GET_SEARCH","getStudent","STUDENT_GET_ONE","deleteStudent","POST","STUDENT_DELETE_SUCCESS","STUDENT_DELETE_FAIL","registerStudent","post","axiosConfig1","STUDENT_REGISTER_SUCCESS","STUDENT_REGISTER_FAIL","updateStudent","STUDENT_UPDATE_SUCCESS","STUDENT_UPDATE_FAIL","API_PATH_STUDENT","STUDENTATTENDANCE_LOADING","STUDENTATTENDANCE_GET_MULTIPLE","STUDENTATTENDANCE_LOADING_ERROR","getStudentattendanceSummary","STUDENTATTENDANCE_GET_SUMMARY","STUDENTATTENDANCE_GET_DAILY","STUDENTATTENDANCE_GET_ONE","STUDENTATTENDANCE_DELETE_SUCCESS","STUDENTATTENDANCE_DELETE_FAIL","STUDENTATTENDANCE_DELETE_DAILY","STUDENTATTENDANCE_REGISTER_SUCCESS","STUDENTATTENDANCE_REGISTER_FAIL","STUDENTATTENDANCE_REGISTER_DAILY","STUDENTATTENDANCE_UPDATE_SUCCESS","STUDENTATTENDANCE_UPDATE_FAIL","STUDENTATTENDANCE_UPDATE_DAILY"],"mappings":"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","file":"static/js/39.20fb46ad.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react'\r\nimport {  leavestd } from '../../actions/common';\r\nlet leaves = leavestd\r\nconst AttendanceBox = (props) => {\r\n    const [color, setcolor] = useState('#ccc');\r\n    //if pass current date\r\n    useEffect(() => {\r\n        //confirm if its date yet else return grey\r\n        if(new Date(props.mydate) <= new Date() && new Date(props.mydate).getDay() !== 6 && new Date(props.mydate).getDay() !== 0)\r\n        {\r\n            //date has passed\r\n            //confirm if in list\r\n            let list = props.candidates.split(',');\r\n            if(list.includes(props.client))\r\n            {\r\n                //client present that day\r\n                //was it recorded\r\n                if(parseInt(props.issue) > 0)\r\n                {\r\n                    let d = leaves.filter(rw=>parseInt(rw.id) === parseInt(props.issue))\r\n                    setcolor(d[0].color)    \r\n                    props.setData(props.client, parseInt(props.issue))\r\n                }else{\r\n                    setcolor('#cfc') \r\n                    props.setData(props.client, 1)\r\n                }\r\n            }else\r\n            {\r\n                //client not present that day\r\n                setcolor('#ccc');\r\n                props.setData(props.client, 0)\r\n            }\r\n            \r\n        }\r\n        return () => {\r\n            setcolor('#ccc')\r\n        }\r\n    }, [props.mydate])\r\n    \r\n    return(\r\n        <>\r\n        <td className='text-center'  style={{backgroundColor:color, width:'25px'}} >\r\n        </td>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AttendanceBox","import { CRow, CCol, CButton, CContainer, CInput, CLabel } from '@coreui/react';\r\nimport React, { useEffect, useState, useMemo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { \r\n    getStudentattendances, \r\n    getStudentattendancedailys,\r\n    getStudentattendance, \r\n    registerStudentattendance, \r\n    registerStudentattendancedaily,\r\n    updateStudentattendance, \r\n    updateStudentattendancedaily, \r\n    deleteStudentattendance,\r\n    deleteStudentattendancedaily\r\n  } from './../../actions/student/studentattendance';\r\nimport { getStudents } from './../../actions/student/student';\r\nimport moment from 'moment'\r\nimport AttendanceBox from './AttendanceBox';\r\nimport { leavestd } from '../../actions/common';\r\nimport { useParams } from 'react-router-dom';\r\nlet leaves = leavestd;\r\n\r\nconst Studentattendance = (props) => {\r\n    let clasz = useParams().clasz\r\n     \r\n     const [firstday, setfirstday] = useState(new Date(new Date().getFullYear(), new Date().getMonth(), -1))\r\n     const [lastday, setlastday] = useState(new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0))\r\n     const [datax, setdatax] = useState({})\r\n\r\n     let sc = props.studentclasss.studentclasss\r\n     let idx = sc.map((pr, ind)=>{\r\n         return pr.id\r\n     })\r\n     let ids = Array.isArray(idx) && idx.length > 0 ? idx.join(\",\"): '';\r\n    useEffect(() => {\r\n        //date changes get\r\n        let params = {\r\n            data:JSON.stringify(\r\n            {\r\n                'ids':ids\r\n            }),\r\n            cat:'selected',\r\n            table:'studentx',\r\n            narration:'get all students'\r\n        }\r\n          props.getStudents(params)\r\n        \r\n    }, [ids])\r\n     \r\n    useEffect(() => {\r\n        //date changes get\r\n        let params = {\r\n          data:JSON.stringify(\r\n          {\r\n              'schoolid':props.user.activeschool.id,\r\n              'clients':clasz,\r\n              'grp':2,\r\n              'starts':moment(firstday).format('YYYY-MM-DD'),\r\n              'ends':moment(lastday).format('YYYY-MM-DD'),\r\n              'ids':ids\r\n          }),\r\n          cat:'selectedattendance',\r\n          table:'attendances',\r\n          narration:'get all students'\r\n      }\r\n        props.getStudentattendances(params)\r\n    \r\n        let params1 = {\r\n          data:JSON.stringify(\r\n          {\r\n              'clients':1,\r\n              'schoolid':props.user.activeschool.id,\r\n              'grp':4,\r\n              'starts':moment(firstday).format('YYYY-MM-DD'),\r\n              'ends':moment(lastday).format('YYYY-MM-DD')\r\n          }),\r\n          cat:'selectedattendance',\r\n          table:'attendances',\r\n          narration:'get all attendance'\r\n      }\r\n        props.getStudentattendancedailys(params1)\r\n      }, [firstday, lastday, ids, clasz])\r\n     \r\n     const changeData = (client, ids) =>{\r\n         let datas = {...datax}\r\n         if(datas.hasOwnProperty(client))\r\n         {\r\n             datas[client].push(ids)\r\n             setdatax(datas)\r\n         }else{\r\n             datas[client] =[];\r\n             datas[client].push(ids)\r\n             setdatax(datas)\r\n         }\r\n         \r\n     }\r\n\r\n     const getStaged = (myd, cand, cli, issue) =>{\r\n        if(new Date(myd) <= new Date() && new Date(myd).getDay() !== 6 && new Date(myd).getDay() !== 0)\r\n        {\r\n            let list = cand.split(',');\r\n            if(list.includes(cli))\r\n            {\r\n                if(parseInt(issue) > 0)\r\n                {\r\n                    return parseInt(issue);\r\n                }else{\r\n                    return 1;\r\n                }\r\n            }else\r\n            {\r\n                return 0;\r\n            }\r\n        }\r\n     }\r\n     let registered_attendance_date = Array.isArray(props.studentattendance.studentattendancedailys)  && props.studentattendance.studentattendancedailys !== undefined? props.studentattendance.studentattendancedailys : [];\r\n     let arr_days = {}\r\n     registered_attendance_date.forEach(rw =>{\r\n         return arr_days[rw.dates] = rw.reason\r\n     });\r\n      let registered_attendance_issue = Array.isArray(props.studentattendance.studentattendances)  && props.studentattendance.studentattendances !== undefined? props.studentattendance.studentattendances : [];\r\n      let arr_persons = {}\r\n      registered_attendance_issue.forEach(rw =>{\r\n            return arr_persons[rw.dates+\"_\"+rw.clients] = rw.leaveid\r\n      });\r\n    \r\n     var listDate = [];\r\n     var startDate = firstday ;\r\n     var endDate = lastday;\r\n     var dateMove = new Date(startDate);\r\n     var strDate = startDate;\r\n\r\n        while (new Date(strDate) < new Date(endDate)){\r\n                var strDate = dateMove.toISOString().slice(0,10);\r\n                listDate.push(strDate);\r\n                dateMove.setDate(dateMove.getDate()+1);\r\n        };\r\n\r\n    \r\n     \r\n    let alldays =  listDate.map((prop, ind)=>{\r\n        return <td key={ind} className=\"text-center\" style={{width:'25px'}}><strong>{moment(new Date(prop)).format('dd')}</strong></td>\r\n    })\r\n     let alldates =  listDate.map((prop, ind)=>{\r\n            return <><td key={ind} className=\"text-center\"><strong>{new Date(prop).getDate()}</strong></td>\r\n                </>\r\n     })\r\n     let allpara = leaves.map((r, i)=>{\r\n        return <td key={i} rowSpan={2}>\r\n                <small style={{textOrientation:'upright'}}>{r.name}</small>\r\n                </td>\r\n\r\n            })\r\n\r\n     let allstudents =  props.studentclasss.studentclasss;\r\n     let studenx =  allstudents.map((prop, ind)=>{\r\n     let dt = []\r\n         return <tr key={ind +\"_\"+ prop.id}>\r\n             <td className=\"text-right\"><strong className='text-nowrap'>{`${prop.surname} ${prop.firstname} ${prop.middlename}`}</strong></td>\r\n             {listDate.map((pro, ind)=>{\r\n                let date_marked = arr_days[moment(pro).format('YYYY-MM-DD')] ? arr_days[moment(pro).format('YYYY-MM-DD')]: ''\r\n                let date_issue = arr_persons[moment(pro).format('YYYY-MM-DD')+\"_\"+prop.id] ? arr_persons[moment(pro).format('YYYY-MM-DD')+\"_\"+prop.id] : 0;\r\n                let gs = getStaged(pro, date_marked, prop.id, date_issue);\r\n                dt.push(gs);\r\n                return <><AttendanceBox \r\n                            candidates={date_marked}\r\n                            client={prop.id}\r\n                            issue={date_issue}\r\n                            mydate={pro} \r\n                            key={ind} \r\n                            setData={(a, b)=>changeData(a, b)}\r\n                            />\r\n                        </>\r\n\r\n\r\n             })}\r\n\r\n                  {leaves.map((r, i)=>{\r\n                    let cnt = Array.isArray(dt) ? dt.filter(rw=>parseInt(rw) === parseInt(r.id)).length : 0;\r\n                    return <td key={i} className='text-center'>\r\n                            {cnt}\r\n                            </td>\r\n\r\n                        })}\r\n         </tr>\r\n     })\r\n    \r\n    return(\r\n        <>\r\n        <CRow className=\" d-flex row mb-20\">\r\n            {\r\n                leaves.map((prp, ind)=>{\r\n                    return  <CButton key={ind} className=\"text-center\" style={{backgroundColor: prp.color}}><strong>{prp.name}</strong></CButton>\r\n                })\r\n            }\r\n        </CRow>\r\n        <CRow className='m-10'>\r\n            <CCol>\r\n                <CLabel><strong>Start Date</strong></CLabel>\r\n                <CInput\r\n                    name=\"starts\"\r\n                    type='date'\r\n                    value={firstday}\r\n                    onChange={(e)=>setfirstday(e.target.value)}\r\n                />\r\n            </CCol>\r\n            <CCol>\r\n            <CLabel><strong>End Date</strong></CLabel>\r\n                <CInput\r\n                    name=\"ends\"\r\n                    type='date'\r\n                    value={lastday}\r\n                    onChange={(e)=>setlastday(e.target.value)}\r\n                />\r\n            </CCol>\r\n        </CRow>\r\n        <CContainer fluid>\r\n            <CRow scrolling>\r\n        <table border='ipx solid' style={{backgroundColor:'white', marginTop:'50px'}}>\r\n            <thead>\r\n                <tr>\r\n                    <th className='text-center'><strong>DAYS</strong></th>\r\n                    {alldays}{allpara}\r\n                </tr>\r\n                <tr>\r\n                    <th className='text-center'><strong>STUDENT NAMES</strong></th>\r\n                    {alldates}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {studenx}\r\n            </tbody>\r\n        </table>\r\n        </CRow>\r\n        </CContainer>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = (state) =>({\r\n    \r\n    students:state.studentReducer.students,\r\n    studentattendance : state.studentattendanceReducer,\r\n    user:state.userReducer,\r\n    studentclasss : state.studentclassReducer\r\n\r\n  })\r\n  export default connect(mapStateToProps, {\r\n    getStudentattendances,\r\n    getStudentattendancedailys,\r\n    getStudentattendance,\r\n    registerStudentattendance,\r\n    registerStudentattendancedaily,\r\n    updateStudentattendance,\r\n    updateStudentattendancedaily,\r\n    deleteStudentattendance,\r\n    deleteStudentattendancedaily,\r\n    getStudents\r\n  })(Studentattendance)\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios';\r\nimport {\r\n    STUDENT_GET_ONE,\r\n    STUDENT_GET_MULTIPLE,\r\n    STUDENT_GET_SEARCH,\r\n    STUDENT_REGISTER_SUCCESS,\r\n    STUDENT_REGISTER_FAIL,\r\n    STUDENT_LOADING,\r\n    STUDENT_LOADING_ERROR,\r\n    STUDENT_UPDATE_SUCCESS,\r\n    STUDENT_UPDATE_FAIL,\r\n    STUDENT_DELETE_SUCCESS,\r\n    STUDENT_DELETE_FAIL\r\n} from \"./../../types/student/student\";\r\nimport { MAIN_TOKEN, API_PATH_SETTING, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'students';\r\nconst path = API_PATH_SETTING;\r\n\r\n//GET ALL STUDENT \r\nexport const getStudents = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n    params.table = TABLE_NAME;\r\n\r\n    dispatch({type : STUDENT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENT_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENT \r\nexport const searchStudent = params => (dispatch, getState) => {\r\n   \r\n    dispatch({type : STUDENT_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENT_GET_SEARCH,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENT_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENT \r\nexport const getStudent = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENT_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENT DELETE\r\nexport const deleteStudent = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENT_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENT_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENT REGISTER\r\nexport const registerStudent = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENT_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENT_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENT UPDATE\r\nexport const updateStudent = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENT_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENT_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n    STUDENTATTENDANCE_GET_ONE,\r\n    STUDENTATTENDANCE_GET_MULTIPLE,\r\n    STUDENTATTENDANCE_GET_DAILY,\r\n    STUDENTATTENDANCE_REGISTER_SUCCESS,\r\n    STUDENTATTENDANCE_REGISTER_DAILY,\r\n    STUDENTATTENDANCE_REGISTER_FAIL,\r\n    STUDENTATTENDANCE_LOADING,\r\n    STUDENTATTENDANCE_LOADING_ERROR,\r\n    STUDENTATTENDANCE_UPDATE_SUCCESS,\r\n    STUDENTATTENDANCE_UPDATE_DAILY,\r\n    STUDENTATTENDANCE_UPDATE_FAIL,\r\n    STUDENTATTENDANCE_DELETE_SUCCESS,\r\n    STUDENTATTENDANCE_DELETE_DAILY,\r\n    STUDENTATTENDANCE_DELETE_FAIL,\r\n    STUDENTATTENDANCE_GET_SUMMARY\r\n} from \"./../../types/student/studentattendance\";\r\nimport { MAIN_TOKEN, API_PATH_STUDENT, axiosConfig1, axiosConfig } from './../common';\r\n\r\nlet TABLE_NAME = 'access';\r\nconst path = API_PATH_STUDENT;\r\n\r\n//GET ALL STUDENTATTENDANCE \r\nexport const getStudentattendances = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTATTENDANCE_GET_MULTIPLE,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTATTENDANCE \r\nexport const getStudentattendanceSummary = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTATTENDANCE_GET_SUMMARY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET ALL STUDENTATTENDANCE \r\nexport const getStudentattendancedailys = params => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    params.token = MAIN_TOKEN;\r\n\r\n    dispatch({type : STUDENTATTENDANCE_LOADING});\r\n        axios.get(path, {params}, axiosConfig)\r\n            .then(res => {                                                                                                                                                                                                                                        \r\n                dispatch({\r\n                    type: STUDENTATTENDANCE_GET_DAILY,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type : STUDENTATTENDANCE_LOADING_ERROR,\r\n                    payload:err\r\n                })\r\n            })\r\n};\r\n//GET SINGLE STUDENTATTENDANCE \r\nexport const getStudentattendance = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTATTENDANCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//GET SINGLE STUDENTATTENDANCE \r\nexport const getStudentattendancedaily = id => (dispatch, getState) => {\r\n    //SET PAGE LOADING\r\n    dispatch(\r\n        {\r\n        type : STUDENTATTENDANCE_GET_ONE,\r\n        payload: id\r\n    });  \r\n};\r\n//STUDENTATTENDANCE DELETE\r\nexport const deleteStudentattendance = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_DELETE_SUCCESS,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTATTENDANCE DELETE\r\nexport const deleteStudentattendancedaily = params => (dispatch, getState) =>{\r\n    axios.POST(path, {params}, axiosConfig)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_DELETE_DAILY,\r\n                payload: params.id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_DELETE_FAIL,\r\n                payload : err\r\n            })\r\n        })\r\n        \r\n}\r\n//STUDENTATTENDANCE REGISTER\r\nexport const registerStudentattendance = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_REGISTER_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n//STUDENTATTENDANCE REGISTER\r\nexport const registerStudentattendancedaily = data => dispatch => {\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_REGISTER_DAILY,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_REGISTER_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n //STUDENTATTENDANCE UPDATE\r\nexport const updateStudentattendance = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_UPDATE_SUCCESS,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\nexport const updateStudentattendancedaily = (data) => (dispatch, getState) => {\r\n    //body\r\n    axios.post(path, data, axiosConfig1)\r\n        .then(res => {\r\n            dispatch({\r\n                type: STUDENTATTENDANCE_UPDATE_DAILY,\r\n                payload: res.data.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type : STUDENTATTENDANCE_UPDATE_FAIL,\r\n                payload: err\r\n            })\r\n        })\r\n};\r\n"],"sourceRoot":""}